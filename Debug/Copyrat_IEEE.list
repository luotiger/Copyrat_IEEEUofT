
Copyrat_IEEE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072a4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08007434  08007434  00008434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800750c  0800750c  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  0800750c  0800750c  0000850c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007514  08007514  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007514  08007514  00008514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007518  08007518  00008518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800751c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009068  2**0
                  CONTENTS
 10 .bss          00000640  20000068  20000068  00009068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200006a8  200006a8  00009068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a683  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000043b4  00000000  00000000  0002371b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001818  00000000  00000000  00027ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012e5  00000000  00000000  000292e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002493c  00000000  00000000  0002a5cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000205d9  00000000  00000000  0004ef09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dcf6d  00000000  00000000  0006f4e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014c44f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006a64  00000000  00000000  0014c494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00152ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800741c 	.word	0x0800741c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800741c 	.word	0x0800741c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000566:	463b      	mov	r3, r7
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000572:	4b3d      	ldr	r3, [pc, #244]	@ (8000668 <MX_ADC1_Init+0x108>)
 8000574:	4a3d      	ldr	r2, [pc, #244]	@ (800066c <MX_ADC1_Init+0x10c>)
 8000576:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000578:	4b3b      	ldr	r3, [pc, #236]	@ (8000668 <MX_ADC1_Init+0x108>)
 800057a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800057e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000580:	4b39      	ldr	r3, [pc, #228]	@ (8000668 <MX_ADC1_Init+0x108>)
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000586:	4b38      	ldr	r3, [pc, #224]	@ (8000668 <MX_ADC1_Init+0x108>)
 8000588:	2201      	movs	r2, #1
 800058a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800058c:	4b36      	ldr	r3, [pc, #216]	@ (8000668 <MX_ADC1_Init+0x108>)
 800058e:	2201      	movs	r2, #1
 8000590:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000592:	4b35      	ldr	r3, [pc, #212]	@ (8000668 <MX_ADC1_Init+0x108>)
 8000594:	2200      	movs	r2, #0
 8000596:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800059a:	4b33      	ldr	r3, [pc, #204]	@ (8000668 <MX_ADC1_Init+0x108>)
 800059c:	2200      	movs	r2, #0
 800059e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005a0:	4b31      	ldr	r3, [pc, #196]	@ (8000668 <MX_ADC1_Init+0x108>)
 80005a2:	4a33      	ldr	r2, [pc, #204]	@ (8000670 <MX_ADC1_Init+0x110>)
 80005a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005a6:	4b30      	ldr	r3, [pc, #192]	@ (8000668 <MX_ADC1_Init+0x108>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80005ac:	4b2e      	ldr	r3, [pc, #184]	@ (8000668 <MX_ADC1_Init+0x108>)
 80005ae:	2205      	movs	r2, #5
 80005b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005b2:	4b2d      	ldr	r3, [pc, #180]	@ (8000668 <MX_ADC1_Init+0x108>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ba:	4b2b      	ldr	r3, [pc, #172]	@ (8000668 <MX_ADC1_Init+0x108>)
 80005bc:	2201      	movs	r2, #1
 80005be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005c0:	4829      	ldr	r0, [pc, #164]	@ (8000668 <MX_ADC1_Init+0x108>)
 80005c2:	f001 ff55 	bl	8002470 <HAL_ADC_Init>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005cc:	f000 fbcc 	bl	8000d68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005d4:	2301      	movs	r3, #1
 80005d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005dc:	463b      	mov	r3, r7
 80005de:	4619      	mov	r1, r3
 80005e0:	4821      	ldr	r0, [pc, #132]	@ (8000668 <MX_ADC1_Init+0x108>)
 80005e2:	f001 ff89 	bl	80024f8 <HAL_ADC_ConfigChannel>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005ec:	f000 fbbc 	bl	8000d68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005f0:	2301      	movs	r3, #1
 80005f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f8:	463b      	mov	r3, r7
 80005fa:	4619      	mov	r1, r3
 80005fc:	481a      	ldr	r0, [pc, #104]	@ (8000668 <MX_ADC1_Init+0x108>)
 80005fe:	f001 ff7b 	bl	80024f8 <HAL_ADC_ConfigChannel>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000608:	f000 fbae 	bl	8000d68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800060c:	2304      	movs	r3, #4
 800060e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000610:	2303      	movs	r3, #3
 8000612:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000614:	463b      	mov	r3, r7
 8000616:	4619      	mov	r1, r3
 8000618:	4813      	ldr	r0, [pc, #76]	@ (8000668 <MX_ADC1_Init+0x108>)
 800061a:	f001 ff6d 	bl	80024f8 <HAL_ADC_ConfigChannel>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000624:	f000 fba0 	bl	8000d68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000628:	2305      	movs	r3, #5
 800062a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800062c:	2304      	movs	r3, #4
 800062e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000630:	463b      	mov	r3, r7
 8000632:	4619      	mov	r1, r3
 8000634:	480c      	ldr	r0, [pc, #48]	@ (8000668 <MX_ADC1_Init+0x108>)
 8000636:	f001 ff5f 	bl	80024f8 <HAL_ADC_ConfigChannel>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000640:	f000 fb92 	bl	8000d68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000644:	2307      	movs	r3, #7
 8000646:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000648:	2305      	movs	r3, #5
 800064a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800064c:	463b      	mov	r3, r7
 800064e:	4619      	mov	r1, r3
 8000650:	4805      	ldr	r0, [pc, #20]	@ (8000668 <MX_ADC1_Init+0x108>)
 8000652:	f001 ff51 	bl	80024f8 <HAL_ADC_ConfigChannel>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800065c:	f000 fb84 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000660:	bf00      	nop
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000084 	.word	0x20000084
 800066c:	40012000 	.word	0x40012000
 8000670:	0f000001 	.word	0x0f000001

08000674 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08a      	sub	sp, #40	@ 0x28
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a2f      	ldr	r2, [pc, #188]	@ (8000750 <HAL_ADC_MspInit+0xdc>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d157      	bne.n	8000746 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	613b      	str	r3, [r7, #16]
 800069a:	4b2e      	ldr	r3, [pc, #184]	@ (8000754 <HAL_ADC_MspInit+0xe0>)
 800069c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800069e:	4a2d      	ldr	r2, [pc, #180]	@ (8000754 <HAL_ADC_MspInit+0xe0>)
 80006a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80006a6:	4b2b      	ldr	r3, [pc, #172]	@ (8000754 <HAL_ADC_MspInit+0xe0>)
 80006a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006ae:	613b      	str	r3, [r7, #16]
 80006b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	4b27      	ldr	r3, [pc, #156]	@ (8000754 <HAL_ADC_MspInit+0xe0>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	4a26      	ldr	r2, [pc, #152]	@ (8000754 <HAL_ADC_MspInit+0xe0>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c2:	4b24      	ldr	r3, [pc, #144]	@ (8000754 <HAL_ADC_MspInit+0xe0>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80006ce:	23b3      	movs	r3, #179	@ 0xb3
 80006d0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d2:	2303      	movs	r3, #3
 80006d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4619      	mov	r1, r3
 80006e0:	481d      	ldr	r0, [pc, #116]	@ (8000758 <HAL_ADC_MspInit+0xe4>)
 80006e2:	f002 fcf3 	bl	80030cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80006e6:	4b1d      	ldr	r3, [pc, #116]	@ (800075c <HAL_ADC_MspInit+0xe8>)
 80006e8:	4a1d      	ldr	r2, [pc, #116]	@ (8000760 <HAL_ADC_MspInit+0xec>)
 80006ea:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006ec:	4b1b      	ldr	r3, [pc, #108]	@ (800075c <HAL_ADC_MspInit+0xe8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006f2:	4b1a      	ldr	r3, [pc, #104]	@ (800075c <HAL_ADC_MspInit+0xe8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006f8:	4b18      	ldr	r3, [pc, #96]	@ (800075c <HAL_ADC_MspInit+0xe8>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006fe:	4b17      	ldr	r3, [pc, #92]	@ (800075c <HAL_ADC_MspInit+0xe8>)
 8000700:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000704:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000706:	4b15      	ldr	r3, [pc, #84]	@ (800075c <HAL_ADC_MspInit+0xe8>)
 8000708:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800070c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800070e:	4b13      	ldr	r3, [pc, #76]	@ (800075c <HAL_ADC_MspInit+0xe8>)
 8000710:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000714:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000716:	4b11      	ldr	r3, [pc, #68]	@ (800075c <HAL_ADC_MspInit+0xe8>)
 8000718:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800071c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800071e:	4b0f      	ldr	r3, [pc, #60]	@ (800075c <HAL_ADC_MspInit+0xe8>)
 8000720:	2200      	movs	r2, #0
 8000722:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000724:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <HAL_ADC_MspInit+0xe8>)
 8000726:	2200      	movs	r2, #0
 8000728:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800072a:	480c      	ldr	r0, [pc, #48]	@ (800075c <HAL_ADC_MspInit+0xe8>)
 800072c:	f002 f9e4 	bl	8002af8 <HAL_DMA_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000736:	f000 fb17 	bl	8000d68 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4a07      	ldr	r2, [pc, #28]	@ (800075c <HAL_ADC_MspInit+0xe8>)
 800073e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000740:	4a06      	ldr	r2, [pc, #24]	@ (800075c <HAL_ADC_MspInit+0xe8>)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000746:	bf00      	nop
 8000748:	3728      	adds	r7, #40	@ 0x28
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40012000 	.word	0x40012000
 8000754:	40023800 	.word	0x40023800
 8000758:	40020000 	.word	0x40020000
 800075c:	200000cc 	.word	0x200000cc
 8000760:	40026410 	.word	0x40026410

08000764 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <MX_DMA_Init+0x3c>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a0b      	ldr	r2, [pc, #44]	@ (80007a0 <MX_DMA_Init+0x3c>)
 8000774:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_DMA_Init+0x3c>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	2105      	movs	r1, #5
 800078a:	2038      	movs	r0, #56	@ 0x38
 800078c:	f002 f98a 	bl	8002aa4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000790:	2038      	movs	r0, #56	@ 0x38
 8000792:	f002 f9a3 	bl	8002adc <HAL_NVIC_EnableIRQ>

}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800

080007a4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	@ 0x28
 80007a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
 80007be:	4b58      	ldr	r3, [pc, #352]	@ (8000920 <MX_GPIO_Init+0x17c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	4a57      	ldr	r2, [pc, #348]	@ (8000920 <MX_GPIO_Init+0x17c>)
 80007c4:	f043 0304 	orr.w	r3, r3, #4
 80007c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ca:	4b55      	ldr	r3, [pc, #340]	@ (8000920 <MX_GPIO_Init+0x17c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	f003 0304 	and.w	r3, r3, #4
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	4b51      	ldr	r3, [pc, #324]	@ (8000920 <MX_GPIO_Init+0x17c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	4a50      	ldr	r2, [pc, #320]	@ (8000920 <MX_GPIO_Init+0x17c>)
 80007e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e6:	4b4e      	ldr	r3, [pc, #312]	@ (8000920 <MX_GPIO_Init+0x17c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	4b4a      	ldr	r3, [pc, #296]	@ (8000920 <MX_GPIO_Init+0x17c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	4a49      	ldr	r2, [pc, #292]	@ (8000920 <MX_GPIO_Init+0x17c>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6313      	str	r3, [r2, #48]	@ 0x30
 8000802:	4b47      	ldr	r3, [pc, #284]	@ (8000920 <MX_GPIO_Init+0x17c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b43      	ldr	r3, [pc, #268]	@ (8000920 <MX_GPIO_Init+0x17c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a42      	ldr	r2, [pc, #264]	@ (8000920 <MX_GPIO_Init+0x17c>)
 8000818:	f043 0302 	orr.w	r3, r3, #2
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b40      	ldr	r3, [pc, #256]	@ (8000920 <MX_GPIO_Init+0x17c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0302 	and.w	r3, r3, #2
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	4b3c      	ldr	r3, [pc, #240]	@ (8000920 <MX_GPIO_Init+0x17c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a3b      	ldr	r2, [pc, #236]	@ (8000920 <MX_GPIO_Init+0x17c>)
 8000834:	f043 0308 	orr.w	r3, r3, #8
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b39      	ldr	r3, [pc, #228]	@ (8000920 <MX_GPIO_Init+0x17c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0308 	and.w	r3, r3, #8
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV8833_EN_GPIO_Port, DRV8833_EN_Pin, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2104      	movs	r1, #4
 800084a:	4836      	ldr	r0, [pc, #216]	@ (8000924 <MX_GPIO_Init+0x180>)
 800084c:	f002 fdda 	bl	8003404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_Pin|MPU6500_CS_Pin, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8000856:	4834      	ldr	r0, [pc, #208]	@ (8000928 <MX_GPIO_Init+0x184>)
 8000858:	f002 fdd4 	bl	8003404 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC4 PC5 PC8
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 800085c:	f643 533f 	movw	r3, #15679	@ 0x3d3f
 8000860:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000862:	2303      	movs	r3, #3
 8000864:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	4619      	mov	r1, r3
 8000870:	482e      	ldr	r0, [pc, #184]	@ (800092c <MX_GPIO_Init+0x188>)
 8000872:	f002 fc2b 	bl	80030cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRV8833_EN_Pin;
 8000876:	2304      	movs	r3, #4
 8000878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087a:	2301      	movs	r3, #1
 800087c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000882:	2302      	movs	r3, #2
 8000884:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV8833_EN_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	4619      	mov	r1, r3
 800088c:	4825      	ldr	r0, [pc, #148]	@ (8000924 <MX_GPIO_Init+0x180>)
 800088e:	f002 fc1d 	bl	80030cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000892:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000898:	2303      	movs	r3, #3
 800089a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	4619      	mov	r1, r3
 80008a6:	481f      	ldr	r0, [pc, #124]	@ (8000924 <MX_GPIO_Init+0x180>)
 80008a8:	f002 fc10 	bl	80030cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_15;
 80008ac:	f44f 4302 	mov.w	r3, #33280	@ 0x8200
 80008b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008b2:	2303      	movs	r3, #3
 80008b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	4619      	mov	r1, r3
 80008c0:	4819      	ldr	r0, [pc, #100]	@ (8000928 <MX_GPIO_Init+0x184>)
 80008c2:	f002 fc03 	bl	80030cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|MPU6500_CS_Pin;
 80008c6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80008ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008cc:	2301      	movs	r3, #1
 80008ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	4619      	mov	r1, r3
 80008de:	4812      	ldr	r0, [pc, #72]	@ (8000928 <MX_GPIO_Init+0x184>)
 80008e0:	f002 fbf4 	bl	80030cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DEBUG_BTN_Pin;
 80008e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DEBUG_BTN_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	480b      	ldr	r0, [pc, #44]	@ (8000928 <MX_GPIO_Init+0x184>)
 80008fa:	f002 fbe7 	bl	80030cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008fe:	2304      	movs	r3, #4
 8000900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000902:	2303      	movs	r3, #3
 8000904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	4807      	ldr	r0, [pc, #28]	@ (8000930 <MX_GPIO_Init+0x18c>)
 8000912:	f002 fbdb 	bl	80030cc <HAL_GPIO_Init>

}
 8000916:	bf00      	nop
 8000918:	3728      	adds	r7, #40	@ 0x28
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800
 8000924:	40020400 	.word	0x40020400
 8000928:	40020000 	.word	0x40020000
 800092c:	40020800 	.word	0x40020800
 8000930:	40020c00 	.word	0x40020c00

08000934 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000938:	4b12      	ldr	r3, [pc, #72]	@ (8000984 <MX_I2C1_Init+0x50>)
 800093a:	4a13      	ldr	r2, [pc, #76]	@ (8000988 <MX_I2C1_Init+0x54>)
 800093c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800093e:	4b11      	ldr	r3, [pc, #68]	@ (8000984 <MX_I2C1_Init+0x50>)
 8000940:	4a12      	ldr	r2, [pc, #72]	@ (800098c <MX_I2C1_Init+0x58>)
 8000942:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000944:	4b0f      	ldr	r3, [pc, #60]	@ (8000984 <MX_I2C1_Init+0x50>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800094a:	4b0e      	ldr	r3, [pc, #56]	@ (8000984 <MX_I2C1_Init+0x50>)
 800094c:	2200      	movs	r2, #0
 800094e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000950:	4b0c      	ldr	r3, [pc, #48]	@ (8000984 <MX_I2C1_Init+0x50>)
 8000952:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000956:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000958:	4b0a      	ldr	r3, [pc, #40]	@ (8000984 <MX_I2C1_Init+0x50>)
 800095a:	2200      	movs	r2, #0
 800095c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800095e:	4b09      	ldr	r3, [pc, #36]	@ (8000984 <MX_I2C1_Init+0x50>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000964:	4b07      	ldr	r3, [pc, #28]	@ (8000984 <MX_I2C1_Init+0x50>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800096a:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <MX_I2C1_Init+0x50>)
 800096c:	2200      	movs	r2, #0
 800096e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000970:	4804      	ldr	r0, [pc, #16]	@ (8000984 <MX_I2C1_Init+0x50>)
 8000972:	f002 fd61 	bl	8003438 <HAL_I2C_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800097c:	f000 f9f4 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	2000012c 	.word	0x2000012c
 8000988:	40005400 	.word	0x40005400
 800098c:	000186a0 	.word	0x000186a0

08000990 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000994:	4b12      	ldr	r3, [pc, #72]	@ (80009e0 <MX_I2C2_Init+0x50>)
 8000996:	4a13      	ldr	r2, [pc, #76]	@ (80009e4 <MX_I2C2_Init+0x54>)
 8000998:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800099a:	4b11      	ldr	r3, [pc, #68]	@ (80009e0 <MX_I2C2_Init+0x50>)
 800099c:	4a12      	ldr	r2, [pc, #72]	@ (80009e8 <MX_I2C2_Init+0x58>)
 800099e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	@ (80009e0 <MX_I2C2_Init+0x50>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	@ (80009e0 <MX_I2C2_Init+0x50>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	@ (80009e0 <MX_I2C2_Init+0x50>)
 80009ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009b2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009b4:	4b0a      	ldr	r3, [pc, #40]	@ (80009e0 <MX_I2C2_Init+0x50>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80009ba:	4b09      	ldr	r3, [pc, #36]	@ (80009e0 <MX_I2C2_Init+0x50>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009c0:	4b07      	ldr	r3, [pc, #28]	@ (80009e0 <MX_I2C2_Init+0x50>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009c6:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <MX_I2C2_Init+0x50>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009cc:	4804      	ldr	r0, [pc, #16]	@ (80009e0 <MX_I2C2_Init+0x50>)
 80009ce:	f002 fd33 	bl	8003438 <HAL_I2C_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80009d8:	f000 f9c6 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000180 	.word	0x20000180
 80009e4:	40005800 	.word	0x40005800
 80009e8:	000186a0 	.word	0x000186a0

080009ec <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80009f0:	4b12      	ldr	r3, [pc, #72]	@ (8000a3c <MX_I2C3_Init+0x50>)
 80009f2:	4a13      	ldr	r2, [pc, #76]	@ (8000a40 <MX_I2C3_Init+0x54>)
 80009f4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80009f6:	4b11      	ldr	r3, [pc, #68]	@ (8000a3c <MX_I2C3_Init+0x50>)
 80009f8:	4a12      	ldr	r2, [pc, #72]	@ (8000a44 <MX_I2C3_Init+0x58>)
 80009fa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a3c <MX_I2C3_Init+0x50>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	@ (8000a3c <MX_I2C3_Init+0x50>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	@ (8000a3c <MX_I2C3_Init+0x50>)
 8000a0a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a0e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a10:	4b0a      	ldr	r3, [pc, #40]	@ (8000a3c <MX_I2C3_Init+0x50>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000a16:	4b09      	ldr	r3, [pc, #36]	@ (8000a3c <MX_I2C3_Init+0x50>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a1c:	4b07      	ldr	r3, [pc, #28]	@ (8000a3c <MX_I2C3_Init+0x50>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a22:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <MX_I2C3_Init+0x50>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a28:	4804      	ldr	r0, [pc, #16]	@ (8000a3c <MX_I2C3_Init+0x50>)
 8000a2a:	f002 fd05 	bl	8003438 <HAL_I2C_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000a34:	f000 f998 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	200001d4 	.word	0x200001d4
 8000a40:	40005c00 	.word	0x40005c00
 8000a44:	000186a0 	.word	0x000186a0

08000a48 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08e      	sub	sp, #56	@ 0x38
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a5b      	ldr	r2, [pc, #364]	@ (8000bd4 <HAL_I2C_MspInit+0x18c>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d12c      	bne.n	8000ac4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	623b      	str	r3, [r7, #32]
 8000a6e:	4b5a      	ldr	r3, [pc, #360]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	4a59      	ldr	r2, [pc, #356]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000a74:	f043 0302 	orr.w	r3, r3, #2
 8000a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7a:	4b57      	ldr	r3, [pc, #348]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	f003 0302 	and.w	r3, r3, #2
 8000a82:	623b      	str	r3, [r7, #32]
 8000a84:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a86:	23c0      	movs	r3, #192	@ 0xc0
 8000a88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a8a:	2312      	movs	r3, #18
 8000a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a92:	2303      	movs	r3, #3
 8000a94:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a96:	2304      	movs	r3, #4
 8000a98:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	484e      	ldr	r0, [pc, #312]	@ (8000bdc <HAL_I2C_MspInit+0x194>)
 8000aa2:	f002 fb13 	bl	80030cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
 8000aaa:	4b4b      	ldr	r3, [pc, #300]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aae:	4a4a      	ldr	r2, [pc, #296]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000ab0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ab4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ab6:	4b48      	ldr	r3, [pc, #288]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000abe:	61fb      	str	r3, [r7, #28]
 8000ac0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000ac2:	e083      	b.n	8000bcc <HAL_I2C_MspInit+0x184>
  else if(i2cHandle->Instance==I2C2)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a45      	ldr	r2, [pc, #276]	@ (8000be0 <HAL_I2C_MspInit+0x198>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d12d      	bne.n	8000b2a <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61bb      	str	r3, [r7, #24]
 8000ad2:	4b41      	ldr	r3, [pc, #260]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	4a40      	ldr	r2, [pc, #256]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000ad8:	f043 0302 	orr.w	r3, r3, #2
 8000adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ade:	4b3e      	ldr	r3, [pc, #248]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	f003 0302 	and.w	r3, r3, #2
 8000ae6:	61bb      	str	r3, [r7, #24]
 8000ae8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000aea:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000aee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000af0:	2312      	movs	r3, #18
 8000af2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af8:	2303      	movs	r3, #3
 8000afa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000afc:	2304      	movs	r3, #4
 8000afe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b04:	4619      	mov	r1, r3
 8000b06:	4835      	ldr	r0, [pc, #212]	@ (8000bdc <HAL_I2C_MspInit+0x194>)
 8000b08:	f002 fae0 	bl	80030cc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	4b31      	ldr	r3, [pc, #196]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b14:	4a30      	ldr	r2, [pc, #192]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000b16:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b1c:	4b2e      	ldr	r3, [pc, #184]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b24:	617b      	str	r3, [r7, #20]
 8000b26:	697b      	ldr	r3, [r7, #20]
}
 8000b28:	e050      	b.n	8000bcc <HAL_I2C_MspInit+0x184>
  else if(i2cHandle->Instance==I2C3)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a2d      	ldr	r2, [pc, #180]	@ (8000be4 <HAL_I2C_MspInit+0x19c>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d14b      	bne.n	8000bcc <HAL_I2C_MspInit+0x184>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b34:	2300      	movs	r3, #0
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	4b27      	ldr	r3, [pc, #156]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3c:	4a26      	ldr	r2, [pc, #152]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000b3e:	f043 0304 	orr.w	r3, r3, #4
 8000b42:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b44:	4b24      	ldr	r3, [pc, #144]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b48:	f003 0304 	and.w	r3, r3, #4
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	4b20      	ldr	r3, [pc, #128]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b58:	4a1f      	ldr	r2, [pc, #124]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000b5a:	f043 0301 	orr.w	r3, r3, #1
 8000b5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b60:	4b1d      	ldr	r3, [pc, #116]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b64:	f003 0301 	and.w	r3, r3, #1
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b72:	2312      	movs	r3, #18
 8000b74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b7e:	2304      	movs	r3, #4
 8000b80:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b86:	4619      	mov	r1, r3
 8000b88:	4817      	ldr	r0, [pc, #92]	@ (8000be8 <HAL_I2C_MspInit+0x1a0>)
 8000b8a:	f002 fa9f 	bl	80030cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b94:	2312      	movs	r3, #18
 8000b96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ba0:	2304      	movs	r3, #4
 8000ba2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4810      	ldr	r0, [pc, #64]	@ (8000bec <HAL_I2C_MspInit+0x1a4>)
 8000bac:	f002 fa8e 	bl	80030cc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	4b08      	ldr	r3, [pc, #32]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb8:	4a07      	ldr	r2, [pc, #28]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000bba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000bbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bc0:	4b05      	ldr	r3, [pc, #20]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	68bb      	ldr	r3, [r7, #8]
}
 8000bcc:	bf00      	nop
 8000bce:	3738      	adds	r7, #56	@ 0x38
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40005400 	.word	0x40005400
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40020400 	.word	0x40020400
 8000be0:	40005800 	.word	0x40005800
 8000be4:	40005c00 	.word	0x40005c00
 8000be8:	40020800 	.word	0x40020800
 8000bec:	40020000 	.word	0x40020000

08000bf0 <main>:
  * @retval int
  */


int main(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf6:	f001 fbd5 	bl	80023a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bfa:	f000 f839 	bl	8000c70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bfe:	f7ff fdd1 	bl	80007a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c02:	f7ff fdaf 	bl	8000764 <MX_DMA_Init>
  MX_ADC1_Init();
 8000c06:	f7ff fcab 	bl	8000560 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000c0a:	f7ff fe93 	bl	8000934 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000c0e:	f7ff febf 	bl	8000990 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000c12:	f7ff feeb 	bl	80009ec <MX_I2C3_Init>
  MX_SPI1_Init();
 8000c16:	f000 f8ad 	bl	8000d74 <MX_SPI1_Init>
//  MX_TIM3_Init();
//  MX_TIM10_Init();
//  MX_TIM11_Init();
//  MX_TIM12_Init();
//  MX_TIM13_Init();
  MX_USART2_UART_Init();
 8000c1a:	f000 fc35 	bl	8001488 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  mpu6500_init();
 8000c1e:	f000 ff8d 	bl	8001b3c <mpu6500_init>
  drv8833_init();
 8000c22:	f000 fd9d 	bl	8001760 <drv8833_init>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int16_t AccData[3] = {0,0,0} ;
 8000c26:	2300      	movs	r3, #0
 8000c28:	813b      	strh	r3, [r7, #8]
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	817b      	strh	r3, [r7, #10]
 8000c2e:	2300      	movs	r3, #0
 8000c30:	81bb      	strh	r3, [r7, #12]
  int16_t GyroData[3] = {0,0,0};
 8000c32:	2300      	movs	r3, #0
 8000c34:	803b      	strh	r3, [r7, #0]
 8000c36:	2300      	movs	r3, #0
 8000c38:	807b      	strh	r3, [r7, #2]
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	80bb      	strh	r3, [r7, #4]
//      }
//      counter = counter + 1;
//    }
//    stop_micromouse();
//  }
  move_forward(50);
 8000c3e:	2032      	movs	r0, #50	@ 0x32
 8000c40:	f000 fe26 	bl	8001890 <move_forward>

  HAL_Delay(3000);
 8000c44:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000c48:	f001 fbee 	bl	8002428 <HAL_Delay>
  move_backward(50);
 8000c4c:	2032      	movs	r0, #50	@ 0x32
 8000c4e:	f000 fe34 	bl	80018ba <move_backward>
  HAL_Delay(3000);
 8000c52:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000c56:	f001 fbe7 	bl	8002428 <HAL_Delay>
  stop_motors();
 8000c5a:	f000 fe0d 	bl	8001878 <stop_motors>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	mpu6500_get_data(AccData, GyroData);
 8000c5e:	463a      	mov	r2, r7
 8000c60:	f107 0308 	add.w	r3, r7, #8
 8000c64:	4611      	mov	r1, r2
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 fff2 	bl	8001c50 <mpu6500_get_data>
 8000c6c:	e7f7      	b.n	8000c5e <main+0x6e>
	...

08000c70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b094      	sub	sp, #80	@ 0x50
 8000c74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c76:	f107 0320 	add.w	r3, r7, #32
 8000c7a:	2230      	movs	r2, #48	@ 0x30
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f005 fe31 	bl	80068e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c84:	f107 030c 	add.w	r3, r7, #12
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c94:	2300      	movs	r3, #0
 8000c96:	60bb      	str	r3, [r7, #8]
 8000c98:	4b28      	ldr	r3, [pc, #160]	@ (8000d3c <SystemClock_Config+0xcc>)
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9c:	4a27      	ldr	r2, [pc, #156]	@ (8000d3c <SystemClock_Config+0xcc>)
 8000c9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ca2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ca4:	4b25      	ldr	r3, [pc, #148]	@ (8000d3c <SystemClock_Config+0xcc>)
 8000ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cac:	60bb      	str	r3, [r7, #8]
 8000cae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	4b22      	ldr	r3, [pc, #136]	@ (8000d40 <SystemClock_Config+0xd0>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a21      	ldr	r2, [pc, #132]	@ (8000d40 <SystemClock_Config+0xd0>)
 8000cba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cbe:	6013      	str	r3, [r2, #0]
 8000cc0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d40 <SystemClock_Config+0xd0>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cc8:	607b      	str	r3, [r7, #4]
 8000cca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cd4:	2310      	movs	r3, #16
 8000cd6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ce0:	2308      	movs	r3, #8
 8000ce2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ce4:	23a8      	movs	r3, #168	@ 0xa8
 8000ce6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cec:	2304      	movs	r3, #4
 8000cee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf0:	f107 0320 	add.w	r3, r7, #32
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f002 fce3 	bl	80036c0 <HAL_RCC_OscConfig>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d00:	f000 f832 	bl	8000d68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d04:	230f      	movs	r3, #15
 8000d06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d10:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d1c:	f107 030c 	add.w	r3, r7, #12
 8000d20:	2105      	movs	r1, #5
 8000d22:	4618      	mov	r0, r3
 8000d24:	f002 ff44 	bl	8003bb0 <HAL_RCC_ClockConfig>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d2e:	f000 f81b 	bl	8000d68 <Error_Handler>
  }
}
 8000d32:	bf00      	nop
 8000d34:	3750      	adds	r7, #80	@ 0x50
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40007000 	.word	0x40007000

08000d44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a04      	ldr	r2, [pc, #16]	@ (8000d64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d101      	bne.n	8000d5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d56:	f001 fb47 	bl	80023e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40010000 	.word	0x40010000

08000d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d6c:	b672      	cpsid	i
}
 8000d6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <Error_Handler+0x8>

08000d74 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d78:	4b17      	ldr	r3, [pc, #92]	@ (8000dd8 <MX_SPI1_Init+0x64>)
 8000d7a:	4a18      	ldr	r2, [pc, #96]	@ (8000ddc <MX_SPI1_Init+0x68>)
 8000d7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d7e:	4b16      	ldr	r3, [pc, #88]	@ (8000dd8 <MX_SPI1_Init+0x64>)
 8000d80:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d86:	4b14      	ldr	r3, [pc, #80]	@ (8000dd8 <MX_SPI1_Init+0x64>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d8c:	4b12      	ldr	r3, [pc, #72]	@ (8000dd8 <MX_SPI1_Init+0x64>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d92:	4b11      	ldr	r3, [pc, #68]	@ (8000dd8 <MX_SPI1_Init+0x64>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d98:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd8 <MX_SPI1_Init+0x64>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd8 <MX_SPI1_Init+0x64>)
 8000da0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000da4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000da6:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd8 <MX_SPI1_Init+0x64>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dac:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd8 <MX_SPI1_Init+0x64>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000db2:	4b09      	ldr	r3, [pc, #36]	@ (8000dd8 <MX_SPI1_Init+0x64>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000db8:	4b07      	ldr	r3, [pc, #28]	@ (8000dd8 <MX_SPI1_Init+0x64>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000dbe:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <MX_SPI1_Init+0x64>)
 8000dc0:	220a      	movs	r2, #10
 8000dc2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dc4:	4804      	ldr	r0, [pc, #16]	@ (8000dd8 <MX_SPI1_Init+0x64>)
 8000dc6:	f003 f905 	bl	8003fd4 <HAL_SPI_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000dd0:	f7ff ffca 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20000228 	.word	0x20000228
 8000ddc:	40013000 	.word	0x40013000

08000de0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	@ 0x28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a19      	ldr	r2, [pc, #100]	@ (8000e64 <HAL_SPI_MspInit+0x84>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d12b      	bne.n	8000e5a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	4b18      	ldr	r3, [pc, #96]	@ (8000e68 <HAL_SPI_MspInit+0x88>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e0a:	4a17      	ldr	r2, [pc, #92]	@ (8000e68 <HAL_SPI_MspInit+0x88>)
 8000e0c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e12:	4b15      	ldr	r3, [pc, #84]	@ (8000e68 <HAL_SPI_MspInit+0x88>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	4b11      	ldr	r3, [pc, #68]	@ (8000e68 <HAL_SPI_MspInit+0x88>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e26:	4a10      	ldr	r2, [pc, #64]	@ (8000e68 <HAL_SPI_MspInit+0x88>)
 8000e28:	f043 0302 	orr.w	r3, r3, #2
 8000e2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e68 <HAL_SPI_MspInit+0x88>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000e3a:	2338      	movs	r3, #56	@ 0x38
 8000e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e46:	2303      	movs	r3, #3
 8000e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e4a:	2305      	movs	r3, #5
 8000e4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4e:	f107 0314 	add.w	r3, r7, #20
 8000e52:	4619      	mov	r1, r3
 8000e54:	4805      	ldr	r0, [pc, #20]	@ (8000e6c <HAL_SPI_MspInit+0x8c>)
 8000e56:	f002 f939 	bl	80030cc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000e5a:	bf00      	nop
 8000e5c:	3728      	adds	r7, #40	@ 0x28
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40013000 	.word	0x40013000
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	40020400 	.word	0x40020400

08000e70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	607b      	str	r3, [r7, #4]
 8000e7a:	4b12      	ldr	r3, [pc, #72]	@ (8000ec4 <HAL_MspInit+0x54>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e7e:	4a11      	ldr	r2, [pc, #68]	@ (8000ec4 <HAL_MspInit+0x54>)
 8000e80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e86:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec4 <HAL_MspInit+0x54>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	603b      	str	r3, [r7, #0]
 8000e96:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec4 <HAL_MspInit+0x54>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec4 <HAL_MspInit+0x54>)
 8000e9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ea0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ea2:	4b08      	ldr	r3, [pc, #32]	@ (8000ec4 <HAL_MspInit+0x54>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eaa:	603b      	str	r3, [r7, #0]
 8000eac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	210f      	movs	r1, #15
 8000eb2:	f06f 0001 	mvn.w	r0, #1
 8000eb6:	f001 fdf5 	bl	8002aa4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40023800 	.word	0x40023800

08000ec8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08c      	sub	sp, #48	@ 0x30
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	4b2f      	ldr	r3, [pc, #188]	@ (8000f9c <HAL_InitTick+0xd4>)
 8000ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee0:	4a2e      	ldr	r2, [pc, #184]	@ (8000f9c <HAL_InitTick+0xd4>)
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ee8:	4b2c      	ldr	r3, [pc, #176]	@ (8000f9c <HAL_InitTick+0xd4>)
 8000eea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ef4:	f107 020c 	add.w	r2, r7, #12
 8000ef8:	f107 0310 	add.w	r3, r7, #16
 8000efc:	4611      	mov	r1, r2
 8000efe:	4618      	mov	r0, r3
 8000f00:	f003 f836 	bl	8003f70 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000f04:	f003 f820 	bl	8003f48 <HAL_RCC_GetPCLK2Freq>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f10:	4a23      	ldr	r2, [pc, #140]	@ (8000fa0 <HAL_InitTick+0xd8>)
 8000f12:	fba2 2303 	umull	r2, r3, r2, r3
 8000f16:	0c9b      	lsrs	r3, r3, #18
 8000f18:	3b01      	subs	r3, #1
 8000f1a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f1c:	4b21      	ldr	r3, [pc, #132]	@ (8000fa4 <HAL_InitTick+0xdc>)
 8000f1e:	4a22      	ldr	r2, [pc, #136]	@ (8000fa8 <HAL_InitTick+0xe0>)
 8000f20:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000f22:	4b20      	ldr	r3, [pc, #128]	@ (8000fa4 <HAL_InitTick+0xdc>)
 8000f24:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f28:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f2a:	4a1e      	ldr	r2, [pc, #120]	@ (8000fa4 <HAL_InitTick+0xdc>)
 8000f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f2e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f30:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa4 <HAL_InitTick+0xdc>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f36:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa4 <HAL_InitTick+0xdc>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f3c:	4b19      	ldr	r3, [pc, #100]	@ (8000fa4 <HAL_InitTick+0xdc>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000f42:	4818      	ldr	r0, [pc, #96]	@ (8000fa4 <HAL_InitTick+0xdc>)
 8000f44:	f003 fe18 	bl	8004b78 <HAL_TIM_Base_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000f4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d11b      	bne.n	8000f8e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000f56:	4813      	ldr	r0, [pc, #76]	@ (8000fa4 <HAL_InitTick+0xdc>)
 8000f58:	f003 fe5e 	bl	8004c18 <HAL_TIM_Base_Start_IT>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000f62:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d111      	bne.n	8000f8e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000f6a:	2019      	movs	r0, #25
 8000f6c:	f001 fdb6 	bl	8002adc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b0f      	cmp	r3, #15
 8000f74:	d808      	bhi.n	8000f88 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000f76:	2200      	movs	r2, #0
 8000f78:	6879      	ldr	r1, [r7, #4]
 8000f7a:	2019      	movs	r0, #25
 8000f7c:	f001 fd92 	bl	8002aa4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f80:	4a0a      	ldr	r2, [pc, #40]	@ (8000fac <HAL_InitTick+0xe4>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6013      	str	r3, [r2, #0]
 8000f86:	e002      	b.n	8000f8e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000f8e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3730      	adds	r7, #48	@ 0x30
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	431bde83 	.word	0x431bde83
 8000fa4:	20000280 	.word	0x20000280
 8000fa8:	40010000 	.word	0x40010000
 8000fac:	20000004 	.word	0x20000004

08000fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <NMI_Handler+0x4>

08000fb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <HardFault_Handler+0x4>

08000fc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <MemManage_Handler+0x4>

08000fc8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <BusFault_Handler+0x4>

08000fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <UsageFault_Handler+0x4>

08000fd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
	...

08000fe8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fec:	4803      	ldr	r0, [pc, #12]	@ (8000ffc <TIM1_UP_TIM10_IRQHandler+0x14>)
 8000fee:	f003 ff9b 	bl	8004f28 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8000ff2:	4803      	ldr	r0, [pc, #12]	@ (8001000 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8000ff4:	f003 ff98 	bl	8004f28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000280 	.word	0x20000280
 8001000:	20000314 	.word	0x20000314

08001004 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001008:	4802      	ldr	r0, [pc, #8]	@ (8001014 <DMA2_Stream0_IRQHandler+0x10>)
 800100a:	f001 fe23 	bl	8002c54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	200000cc 	.word	0x200000cc

08001018 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
 8001028:	e00a      	b.n	8001040 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800102a:	f3af 8000 	nop.w
 800102e:	4601      	mov	r1, r0
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	1c5a      	adds	r2, r3, #1
 8001034:	60ba      	str	r2, [r7, #8]
 8001036:	b2ca      	uxtb	r2, r1
 8001038:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	3301      	adds	r3, #1
 800103e:	617b      	str	r3, [r7, #20]
 8001040:	697a      	ldr	r2, [r7, #20]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	429a      	cmp	r2, r3
 8001046:	dbf0      	blt.n	800102a <_read+0x12>
  }

  return len;
 8001048:	687b      	ldr	r3, [r7, #4]
}
 800104a:	4618      	mov	r0, r3
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b086      	sub	sp, #24
 8001056:	af00      	add	r7, sp, #0
 8001058:	60f8      	str	r0, [r7, #12]
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
 8001062:	e009      	b.n	8001078 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	1c5a      	adds	r2, r3, #1
 8001068:	60ba      	str	r2, [r7, #8]
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	4618      	mov	r0, r3
 800106e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	3301      	adds	r3, #1
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	697a      	ldr	r2, [r7, #20]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	429a      	cmp	r2, r3
 800107e:	dbf1      	blt.n	8001064 <_write+0x12>
  }
  return len;
 8001080:	687b      	ldr	r3, [r7, #4]
}
 8001082:	4618      	mov	r0, r3
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <_close>:

int _close(int file)
{
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001092:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001096:	4618      	mov	r0, r3
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
 80010aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010b2:	605a      	str	r2, [r3, #4]
  return 0;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <_isatty>:

int _isatty(int file)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010ca:	2301      	movs	r3, #1
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3714      	adds	r7, #20
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
	...

080010f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010fc:	4a14      	ldr	r2, [pc, #80]	@ (8001150 <_sbrk+0x5c>)
 80010fe:	4b15      	ldr	r3, [pc, #84]	@ (8001154 <_sbrk+0x60>)
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001108:	4b13      	ldr	r3, [pc, #76]	@ (8001158 <_sbrk+0x64>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d102      	bne.n	8001116 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001110:	4b11      	ldr	r3, [pc, #68]	@ (8001158 <_sbrk+0x64>)
 8001112:	4a12      	ldr	r2, [pc, #72]	@ (800115c <_sbrk+0x68>)
 8001114:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001116:	4b10      	ldr	r3, [pc, #64]	@ (8001158 <_sbrk+0x64>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4413      	add	r3, r2
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	429a      	cmp	r2, r3
 8001122:	d207      	bcs.n	8001134 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001124:	f005 fc3e 	bl	80069a4 <__errno>
 8001128:	4603      	mov	r3, r0
 800112a:	220c      	movs	r2, #12
 800112c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800112e:	f04f 33ff 	mov.w	r3, #4294967295
 8001132:	e009      	b.n	8001148 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001134:	4b08      	ldr	r3, [pc, #32]	@ (8001158 <_sbrk+0x64>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800113a:	4b07      	ldr	r3, [pc, #28]	@ (8001158 <_sbrk+0x64>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4413      	add	r3, r2
 8001142:	4a05      	ldr	r2, [pc, #20]	@ (8001158 <_sbrk+0x64>)
 8001144:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001146:	68fb      	ldr	r3, [r7, #12]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20020000 	.word	0x20020000
 8001154:	00000400 	.word	0x00000400
 8001158:	200002c8 	.word	0x200002c8
 800115c:	200006a8 	.word	0x200006a8

08001160 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001164:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <SystemInit+0x20>)
 8001166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800116a:	4a05      	ldr	r2, [pc, #20]	@ (8001180 <SystemInit+0x20>)
 800116c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001170:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <HAL_TIM_Base_MspInit>:
//  HAL_TIM_MspPostInit(&htim13);
//
//}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a2c      	ldr	r2, [pc, #176]	@ (8001244 <HAL_TIM_Base_MspInit+0xc0>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d10e      	bne.n	80011b4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
 800119a:	4b2b      	ldr	r3, [pc, #172]	@ (8001248 <HAL_TIM_Base_MspInit+0xc4>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119e:	4a2a      	ldr	r2, [pc, #168]	@ (8001248 <HAL_TIM_Base_MspInit+0xc4>)
 80011a0:	f043 0302 	orr.w	r3, r3, #2
 80011a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011a6:	4b28      	ldr	r3, [pc, #160]	@ (8001248 <HAL_TIM_Base_MspInit+0xc4>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	617b      	str	r3, [r7, #20]
 80011b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 80011b2:	e042      	b.n	800123a <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM10)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a24      	ldr	r2, [pc, #144]	@ (800124c <HAL_TIM_Base_MspInit+0xc8>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d116      	bne.n	80011ec <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	4b21      	ldr	r3, [pc, #132]	@ (8001248 <HAL_TIM_Base_MspInit+0xc4>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011c6:	4a20      	ldr	r2, [pc, #128]	@ (8001248 <HAL_TIM_Base_MspInit+0xc4>)
 80011c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001248 <HAL_TIM_Base_MspInit+0xc4>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	210f      	movs	r1, #15
 80011de:	2019      	movs	r0, #25
 80011e0:	f001 fc60 	bl	8002aa4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80011e4:	2019      	movs	r0, #25
 80011e6:	f001 fc79 	bl	8002adc <HAL_NVIC_EnableIRQ>
}
 80011ea:	e026      	b.n	800123a <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM11)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a17      	ldr	r2, [pc, #92]	@ (8001250 <HAL_TIM_Base_MspInit+0xcc>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d10e      	bne.n	8001214 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	4b13      	ldr	r3, [pc, #76]	@ (8001248 <HAL_TIM_Base_MspInit+0xc4>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011fe:	4a12      	ldr	r2, [pc, #72]	@ (8001248 <HAL_TIM_Base_MspInit+0xc4>)
 8001200:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001204:	6453      	str	r3, [r2, #68]	@ 0x44
 8001206:	4b10      	ldr	r3, [pc, #64]	@ (8001248 <HAL_TIM_Base_MspInit+0xc4>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800120a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
}
 8001212:	e012      	b.n	800123a <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM13)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a0e      	ldr	r2, [pc, #56]	@ (8001254 <HAL_TIM_Base_MspInit+0xd0>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d10d      	bne.n	800123a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	4b09      	ldr	r3, [pc, #36]	@ (8001248 <HAL_TIM_Base_MspInit+0xc4>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001226:	4a08      	ldr	r2, [pc, #32]	@ (8001248 <HAL_TIM_Base_MspInit+0xc4>)
 8001228:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800122c:	6413      	str	r3, [r2, #64]	@ 0x40
 800122e:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <HAL_TIM_Base_MspInit+0xc4>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	68bb      	ldr	r3, [r7, #8]
}
 800123a:	bf00      	nop
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40000400 	.word	0x40000400
 8001248:	40023800 	.word	0x40023800
 800124c:	40014400 	.word	0x40014400
 8001250:	40014800 	.word	0x40014800
 8001254:	40001c00 	.word	0x40001c00

08001258 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM12)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a0b      	ldr	r2, [pc, #44]	@ (8001294 <HAL_TIM_PWM_MspInit+0x3c>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d10d      	bne.n	8001286 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	4b0a      	ldr	r3, [pc, #40]	@ (8001298 <HAL_TIM_PWM_MspInit+0x40>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001272:	4a09      	ldr	r2, [pc, #36]	@ (8001298 <HAL_TIM_PWM_MspInit+0x40>)
 8001274:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001278:	6413      	str	r3, [r2, #64]	@ 0x40
 800127a:	4b07      	ldr	r3, [pc, #28]	@ (8001298 <HAL_TIM_PWM_MspInit+0x40>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001286:	bf00      	nop
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	40001800 	.word	0x40001800
 8001298:	40023800 	.word	0x40023800

0800129c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08e      	sub	sp, #56	@ 0x38
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a6a      	ldr	r2, [pc, #424]	@ (8001464 <HAL_TIM_MspPostInit+0x1c8>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d13c      	bne.n	8001338 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	623b      	str	r3, [r7, #32]
 80012c2:	4b69      	ldr	r3, [pc, #420]	@ (8001468 <HAL_TIM_MspPostInit+0x1cc>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	4a68      	ldr	r2, [pc, #416]	@ (8001468 <HAL_TIM_MspPostInit+0x1cc>)
 80012c8:	f043 0302 	orr.w	r3, r3, #2
 80012cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ce:	4b66      	ldr	r3, [pc, #408]	@ (8001468 <HAL_TIM_MspPostInit+0x1cc>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	623b      	str	r3, [r7, #32]
 80012d8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
 80012de:	4b62      	ldr	r3, [pc, #392]	@ (8001468 <HAL_TIM_MspPostInit+0x1cc>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	4a61      	ldr	r2, [pc, #388]	@ (8001468 <HAL_TIM_MspPostInit+0x1cc>)
 80012e4:	f043 0304 	orr.w	r3, r3, #4
 80012e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ea:	4b5f      	ldr	r3, [pc, #380]	@ (8001468 <HAL_TIM_MspPostInit+0x1cc>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	f003 0304 	and.w	r3, r3, #4
 80012f2:	61fb      	str	r3, [r7, #28]
 80012f4:	69fb      	ldr	r3, [r7, #28]
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012f6:	2303      	movs	r3, #3
 80012f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fa:	2302      	movs	r3, #2
 80012fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001302:	2300      	movs	r3, #0
 8001304:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001306:	2302      	movs	r3, #2
 8001308:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800130e:	4619      	mov	r1, r3
 8001310:	4856      	ldr	r0, [pc, #344]	@ (800146c <HAL_TIM_MspPostInit+0x1d0>)
 8001312:	f001 fedb 	bl	80030cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001316:	23c0      	movs	r3, #192	@ 0xc0
 8001318:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131a:	2302      	movs	r3, #2
 800131c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2300      	movs	r3, #0
 8001324:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001326:	2302      	movs	r3, #2
 8001328:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800132a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800132e:	4619      	mov	r1, r3
 8001330:	484f      	ldr	r0, [pc, #316]	@ (8001470 <HAL_TIM_MspPostInit+0x1d4>)
 8001332:	f001 fecb 	bl	80030cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8001336:	e091      	b.n	800145c <HAL_TIM_MspPostInit+0x1c0>
  else if(timHandle->Instance==TIM10)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a4d      	ldr	r2, [pc, #308]	@ (8001474 <HAL_TIM_MspPostInit+0x1d8>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d11f      	bne.n	8001382 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	61bb      	str	r3, [r7, #24]
 8001346:	4b48      	ldr	r3, [pc, #288]	@ (8001468 <HAL_TIM_MspPostInit+0x1cc>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134a:	4a47      	ldr	r2, [pc, #284]	@ (8001468 <HAL_TIM_MspPostInit+0x1cc>)
 800134c:	f043 0302 	orr.w	r3, r3, #2
 8001350:	6313      	str	r3, [r2, #48]	@ 0x30
 8001352:	4b45      	ldr	r3, [pc, #276]	@ (8001468 <HAL_TIM_MspPostInit+0x1cc>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	61bb      	str	r3, [r7, #24]
 800135c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800135e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001362:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001364:	2302      	movs	r3, #2
 8001366:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136c:	2300      	movs	r3, #0
 800136e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001370:	2303      	movs	r3, #3
 8001372:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001374:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001378:	4619      	mov	r1, r3
 800137a:	483c      	ldr	r0, [pc, #240]	@ (800146c <HAL_TIM_MspPostInit+0x1d0>)
 800137c:	f001 fea6 	bl	80030cc <HAL_GPIO_Init>
}
 8001380:	e06c      	b.n	800145c <HAL_TIM_MspPostInit+0x1c0>
  else if(timHandle->Instance==TIM11)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a3c      	ldr	r2, [pc, #240]	@ (8001478 <HAL_TIM_MspPostInit+0x1dc>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d11f      	bne.n	80013cc <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	4b35      	ldr	r3, [pc, #212]	@ (8001468 <HAL_TIM_MspPostInit+0x1cc>)
 8001392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001394:	4a34      	ldr	r2, [pc, #208]	@ (8001468 <HAL_TIM_MspPostInit+0x1cc>)
 8001396:	f043 0302 	orr.w	r3, r3, #2
 800139a:	6313      	str	r3, [r2, #48]	@ 0x30
 800139c:	4b32      	ldr	r3, [pc, #200]	@ (8001468 <HAL_TIM_MspPostInit+0x1cc>)
 800139e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	617b      	str	r3, [r7, #20]
 80013a6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	2302      	movs	r3, #2
 80013b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80013ba:	2303      	movs	r3, #3
 80013bc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013c2:	4619      	mov	r1, r3
 80013c4:	4829      	ldr	r0, [pc, #164]	@ (800146c <HAL_TIM_MspPostInit+0x1d0>)
 80013c6:	f001 fe81 	bl	80030cc <HAL_GPIO_Init>
}
 80013ca:	e047      	b.n	800145c <HAL_TIM_MspPostInit+0x1c0>
  else if(timHandle->Instance==TIM12)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a2a      	ldr	r2, [pc, #168]	@ (800147c <HAL_TIM_MspPostInit+0x1e0>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d11f      	bne.n	8001416 <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	4b23      	ldr	r3, [pc, #140]	@ (8001468 <HAL_TIM_MspPostInit+0x1cc>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	4a22      	ldr	r2, [pc, #136]	@ (8001468 <HAL_TIM_MspPostInit+0x1cc>)
 80013e0:	f043 0302 	orr.w	r3, r3, #2
 80013e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e6:	4b20      	ldr	r3, [pc, #128]	@ (8001468 <HAL_TIM_MspPostInit+0x1cc>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80013f2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80013f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f8:	2302      	movs	r3, #2
 80013fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001400:	2300      	movs	r3, #0
 8001402:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001404:	2309      	movs	r3, #9
 8001406:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001408:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800140c:	4619      	mov	r1, r3
 800140e:	4817      	ldr	r0, [pc, #92]	@ (800146c <HAL_TIM_MspPostInit+0x1d0>)
 8001410:	f001 fe5c 	bl	80030cc <HAL_GPIO_Init>
}
 8001414:	e022      	b.n	800145c <HAL_TIM_MspPostInit+0x1c0>
  else if(timHandle->Instance==TIM13)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a19      	ldr	r2, [pc, #100]	@ (8001480 <HAL_TIM_MspPostInit+0x1e4>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d11d      	bne.n	800145c <HAL_TIM_MspPostInit+0x1c0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	4b10      	ldr	r3, [pc, #64]	@ (8001468 <HAL_TIM_MspPostInit+0x1cc>)
 8001426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001428:	4a0f      	ldr	r2, [pc, #60]	@ (8001468 <HAL_TIM_MspPostInit+0x1cc>)
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001430:	4b0d      	ldr	r3, [pc, #52]	@ (8001468 <HAL_TIM_MspPostInit+0x1cc>)
 8001432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800143c:	2340      	movs	r3, #64	@ 0x40
 800143e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001440:	2302      	movs	r3, #2
 8001442:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001448:	2300      	movs	r3, #0
 800144a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800144c:	2309      	movs	r3, #9
 800144e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001450:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001454:	4619      	mov	r1, r3
 8001456:	480b      	ldr	r0, [pc, #44]	@ (8001484 <HAL_TIM_MspPostInit+0x1e8>)
 8001458:	f001 fe38 	bl	80030cc <HAL_GPIO_Init>
}
 800145c:	bf00      	nop
 800145e:	3738      	adds	r7, #56	@ 0x38
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40000400 	.word	0x40000400
 8001468:	40023800 	.word	0x40023800
 800146c:	40020400 	.word	0x40020400
 8001470:	40020800 	.word	0x40020800
 8001474:	40014400 	.word	0x40014400
 8001478:	40014800 	.word	0x40014800
 800147c:	40001800 	.word	0x40001800
 8001480:	40001c00 	.word	0x40001c00
 8001484:	40020000 	.word	0x40020000

08001488 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800148c:	4b11      	ldr	r3, [pc, #68]	@ (80014d4 <MX_USART2_UART_Init+0x4c>)
 800148e:	4a12      	ldr	r2, [pc, #72]	@ (80014d8 <MX_USART2_UART_Init+0x50>)
 8001490:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001492:	4b10      	ldr	r3, [pc, #64]	@ (80014d4 <MX_USART2_UART_Init+0x4c>)
 8001494:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001498:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800149a:	4b0e      	ldr	r3, [pc, #56]	@ (80014d4 <MX_USART2_UART_Init+0x4c>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014a0:	4b0c      	ldr	r3, [pc, #48]	@ (80014d4 <MX_USART2_UART_Init+0x4c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014a6:	4b0b      	ldr	r3, [pc, #44]	@ (80014d4 <MX_USART2_UART_Init+0x4c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014ac:	4b09      	ldr	r3, [pc, #36]	@ (80014d4 <MX_USART2_UART_Init+0x4c>)
 80014ae:	220c      	movs	r2, #12
 80014b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b2:	4b08      	ldr	r3, [pc, #32]	@ (80014d4 <MX_USART2_UART_Init+0x4c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b8:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <MX_USART2_UART_Init+0x4c>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014be:	4805      	ldr	r0, [pc, #20]	@ (80014d4 <MX_USART2_UART_Init+0x4c>)
 80014c0:	f004 fb80 	bl	8005bc4 <HAL_UART_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014ca:	f7ff fc4d 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000434 	.word	0x20000434
 80014d8:	40004400 	.word	0x40004400

080014dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08a      	sub	sp, #40	@ 0x28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a19      	ldr	r2, [pc, #100]	@ (8001560 <HAL_UART_MspInit+0x84>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d12b      	bne.n	8001556 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	4b18      	ldr	r3, [pc, #96]	@ (8001564 <HAL_UART_MspInit+0x88>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001506:	4a17      	ldr	r2, [pc, #92]	@ (8001564 <HAL_UART_MspInit+0x88>)
 8001508:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800150c:	6413      	str	r3, [r2, #64]	@ 0x40
 800150e:	4b15      	ldr	r3, [pc, #84]	@ (8001564 <HAL_UART_MspInit+0x88>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001516:	613b      	str	r3, [r7, #16]
 8001518:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	4b11      	ldr	r3, [pc, #68]	@ (8001564 <HAL_UART_MspInit+0x88>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	4a10      	ldr	r2, [pc, #64]	@ (8001564 <HAL_UART_MspInit+0x88>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6313      	str	r3, [r2, #48]	@ 0x30
 800152a:	4b0e      	ldr	r3, [pc, #56]	@ (8001564 <HAL_UART_MspInit+0x88>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001536:	230c      	movs	r3, #12
 8001538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153a:	2302      	movs	r3, #2
 800153c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001542:	2303      	movs	r3, #3
 8001544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001546:	2307      	movs	r3, #7
 8001548:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	4619      	mov	r1, r3
 8001550:	4805      	ldr	r0, [pc, #20]	@ (8001568 <HAL_UART_MspInit+0x8c>)
 8001552:	f001 fdbb 	bl	80030cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001556:	bf00      	nop
 8001558:	3728      	adds	r7, #40	@ 0x28
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40004400 	.word	0x40004400
 8001564:	40023800 	.word	0x40023800
 8001568:	40020000 	.word	0x40020000

0800156c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800156c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015a4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001570:	f7ff fdf6 	bl	8001160 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001574:	480c      	ldr	r0, [pc, #48]	@ (80015a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001576:	490d      	ldr	r1, [pc, #52]	@ (80015ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001578:	4a0d      	ldr	r2, [pc, #52]	@ (80015b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800157a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800157c:	e002      	b.n	8001584 <LoopCopyDataInit>

0800157e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800157e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001582:	3304      	adds	r3, #4

08001584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001588:	d3f9      	bcc.n	800157e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800158a:	4a0a      	ldr	r2, [pc, #40]	@ (80015b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800158c:	4c0a      	ldr	r4, [pc, #40]	@ (80015b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800158e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001590:	e001      	b.n	8001596 <LoopFillZerobss>

08001592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001594:	3204      	adds	r2, #4

08001596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001598:	d3fb      	bcc.n	8001592 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800159a:	f005 fa09 	bl	80069b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800159e:	f7ff fb27 	bl	8000bf0 <main>
  bx  lr    
 80015a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015ac:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80015b0:	0800751c 	.word	0x0800751c
  ldr r2, =_sbss
 80015b4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80015b8:	200006a8 	.word	0x200006a8

080015bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015bc:	e7fe      	b.n	80015bc <ADC_IRQHandler>

080015be <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b084      	sub	sp, #16
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d105      	bne.n	80015d8 <stm32_lock_init+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 80015cc:	b672      	cpsid	i
}
 80015ce:	bf00      	nop
 80015d0:	f7ff fbca 	bl	8000d68 <Error_Handler>
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	e007      	b.n	80015ee <stm32_lock_init+0x30>
  {
    lock->basepri[i] = 0;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	2100      	movs	r1, #0
 80015e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	3301      	adds	r3, #1
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d9f4      	bls.n	80015de <stm32_lock_init+0x20>
  }
  lock->nesting_level = 0;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	721a      	strb	r2, [r3, #8]
}
 80015fa:	bf00      	nop
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b084      	sub	sp, #16
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d105      	bne.n	800161c <stm32_lock_acquire+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001610:	b672      	cpsid	i
}
 8001612:	bf00      	nop
 8001614:	f7ff fba8 	bl	8000d68 <Error_Handler>
 8001618:	bf00      	nop
 800161a:	e7fd      	b.n	8001618 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	7a1b      	ldrb	r3, [r3, #8]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d905      	bls.n	8001630 <stm32_lock_acquire+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8001624:	b672      	cpsid	i
}
 8001626:	bf00      	nop
 8001628:	f7ff fb9e 	bl	8000d68 <Error_Handler>
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <stm32_lock_acquire+0x2a>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	7a1b      	ldrb	r3, [r3, #8]
 8001634:	1c5a      	adds	r2, r3, #1
 8001636:	b2d1      	uxtb	r1, r2
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	7211      	strb	r1, [r2, #8]
 800163c:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800163e:	f3ef 8211 	mrs	r2, BASEPRI
 8001642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001646:	f383 8811 	msr	BASEPRI, r3
 800164a:	f3bf 8f6f 	isb	sy
 800164e:	f3bf 8f4f 	dsb	sy
 8001652:	60fa      	str	r2, [r7, #12]
 8001654:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 800165e:	bf00      	nop
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b084      	sub	sp, #16
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d105      	bne.n	8001680 <stm32_lock_release+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001674:	b672      	cpsid	i
}
 8001676:	bf00      	nop
 8001678:	f7ff fb76 	bl	8000d68 <Error_Handler>
 800167c:	bf00      	nop
 800167e:	e7fd      	b.n	800167c <stm32_lock_release+0x16>
  lock->nesting_level--;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	7a1b      	ldrb	r3, [r3, #8]
 8001684:	3b01      	subs	r3, #1
 8001686:	b2da      	uxtb	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	7a1b      	ldrb	r3, [r3, #8]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d905      	bls.n	80016a0 <stm32_lock_release+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001694:	b672      	cpsid	i
}
 8001696:	bf00      	nop
 8001698:	f7ff fb66 	bl	8000d68 <Error_Handler>
 800169c:	bf00      	nop
 800169e:	e7fd      	b.n	800169c <stm32_lock_release+0x36>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	7a1b      	ldrb	r3, [r3, #8]
 80016a4:	461a      	mov	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ac:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80016b4:	bf00      	nop
}
 80016b6:	bf00      	nop
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d105      	bne.n	80016d8 <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 80016cc:	f005 f96a 	bl	80069a4 <__errno>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2216      	movs	r2, #22
 80016d4:	601a      	str	r2, [r3, #0]
    return;
 80016d6:	e016      	b.n	8001706 <__retarget_lock_init_recursive+0x48>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 80016d8:	200c      	movs	r0, #12
 80016da:	f004 ff2f 	bl	800653c <malloc>
 80016de:	4603      	mov	r3, r0
 80016e0:	461a      	mov	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d005      	beq.n	80016fa <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff ff63 	bl	80015be <stm32_lock_init>
    return;
 80016f8:	e005      	b.n	8001706 <__retarget_lock_init_recursive+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 80016fa:	b672      	cpsid	i
}
 80016fc:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 80016fe:	f7ff fb33 	bl	8000d68 <Error_Handler>
 8001702:	bf00      	nop
 8001704:	e7fd      	b.n	8001702 <__retarget_lock_init_recursive+0x44>
}
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d105      	bne.n	8001726 <__retarget_lock_acquire_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 800171a:	b672      	cpsid	i
}
 800171c:	bf00      	nop
 800171e:	f7ff fb23 	bl	8000d68 <Error_Handler>
 8001722:	bf00      	nop
 8001724:	e7fd      	b.n	8001722 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff ff6a 	bl	8001602 <stm32_lock_acquire>
}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d105      	bne.n	8001750 <__retarget_lock_release_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001744:	b672      	cpsid	i
}
 8001746:	bf00      	nop
 8001748:	f7ff fb0e 	bl	8000d68 <Error_Handler>
 800174c:	bf00      	nop
 800174e:	e7fd      	b.n	800174c <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff ff87 	bl	8001666 <stm32_lock_release>
}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <drv8833_init>:

#define MAX_SPEED 255
#define TURN_SPEED 150

HAL_StatusTypeDef drv8833_init()
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
    //GPIO_InitStruct.Pin = DRV8833_EN_Pin;
    //GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    //GPIO_InitStruct.Pull = GPIO_NOPULL;
    //GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    //HAL_GPIO_Init(DRV8833_EN_GPIO_Port, &GPIO_InitStruct);
    HAL_GPIO_WritePin(DRV8833_EN_GPIO_Port, DRV8833_EN_Pin, GPIO_PIN_SET);
 8001764:	2201      	movs	r2, #1
 8001766:	2104      	movs	r1, #4
 8001768:	4803      	ldr	r0, [pc, #12]	@ (8001778 <drv8833_init+0x18>)
 800176a:	f001 fe4b 	bl	8003404 <HAL_GPIO_WritePin>
    return pwm_init();
 800176e:	f000 fac7 	bl	8001d00 <pwm_init>
 8001772:	4603      	mov	r3, r0
}
 8001774:	4618      	mov	r0, r3
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40020400 	.word	0x40020400

0800177c <set_duty_cycle>:

void set_duty_cycle(MOTOR motor, MOTION motion, uint8_t duty_cycle)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	71fb      	strb	r3, [r7, #7]
 8001786:	460b      	mov	r3, r1
 8001788:	71bb      	strb	r3, [r7, #6]
 800178a:	4613      	mov	r3, r2
 800178c:	717b      	strb	r3, [r7, #5]
    switch (motor) {
 800178e:	79fb      	ldrb	r3, [r7, #7]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d002      	beq.n	800179a <set_duty_cycle+0x1e>
 8001794:	2b01      	cmp	r3, #1
 8001796:	d02f      	beq.n	80017f8 <set_duty_cycle+0x7c>
                default:
                    break;
            }
            break;
        default:
            break;
 8001798:	e05d      	b.n	8001856 <set_duty_cycle+0xda>
            switch (motion) {
 800179a:	79bb      	ldrb	r3, [r7, #6]
 800179c:	2b02      	cmp	r3, #2
 800179e:	d01e      	beq.n	80017de <set_duty_cycle+0x62>
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	dc27      	bgt.n	80017f4 <set_duty_cycle+0x78>
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d002      	beq.n	80017ae <set_duty_cycle+0x32>
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d00c      	beq.n	80017c6 <set_duty_cycle+0x4a>
                    break;
 80017ac:	e022      	b.n	80017f4 <set_duty_cycle+0x78>
                    pwm_set_duty_cycle(TIM10, TIM_CHANNEL_1, duty_cycle);
 80017ae:	797b      	ldrb	r3, [r7, #5]
 80017b0:	461a      	mov	r2, r3
 80017b2:	2100      	movs	r1, #0
 80017b4:	482c      	ldr	r0, [pc, #176]	@ (8001868 <set_duty_cycle+0xec>)
 80017b6:	f000 fad3 	bl	8001d60 <pwm_set_duty_cycle>
                    pwm_set_duty_cycle(TIM3, TIM_CHANNEL_3, 0);
 80017ba:	2200      	movs	r2, #0
 80017bc:	2108      	movs	r1, #8
 80017be:	482b      	ldr	r0, [pc, #172]	@ (800186c <set_duty_cycle+0xf0>)
 80017c0:	f000 face 	bl	8001d60 <pwm_set_duty_cycle>
                    break;
 80017c4:	e017      	b.n	80017f6 <set_duty_cycle+0x7a>
                    pwm_set_duty_cycle(TIM10, TIM_CHANNEL_1, 0);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2100      	movs	r1, #0
 80017ca:	4827      	ldr	r0, [pc, #156]	@ (8001868 <set_duty_cycle+0xec>)
 80017cc:	f000 fac8 	bl	8001d60 <pwm_set_duty_cycle>
                    pwm_set_duty_cycle(TIM3, TIM_CHANNEL_3, duty_cycle);
 80017d0:	797b      	ldrb	r3, [r7, #5]
 80017d2:	461a      	mov	r2, r3
 80017d4:	2108      	movs	r1, #8
 80017d6:	4825      	ldr	r0, [pc, #148]	@ (800186c <set_duty_cycle+0xf0>)
 80017d8:	f000 fac2 	bl	8001d60 <pwm_set_duty_cycle>
                    break;
 80017dc:	e00b      	b.n	80017f6 <set_duty_cycle+0x7a>
                    pwm_set_duty_cycle(TIM10, TIM_CHANNEL_1, 0);
 80017de:	2200      	movs	r2, #0
 80017e0:	2100      	movs	r1, #0
 80017e2:	4821      	ldr	r0, [pc, #132]	@ (8001868 <set_duty_cycle+0xec>)
 80017e4:	f000 fabc 	bl	8001d60 <pwm_set_duty_cycle>
                    pwm_set_duty_cycle(TIM3, TIM_CHANNEL_3, 0);
 80017e8:	2200      	movs	r2, #0
 80017ea:	2108      	movs	r1, #8
 80017ec:	481f      	ldr	r0, [pc, #124]	@ (800186c <set_duty_cycle+0xf0>)
 80017ee:	f000 fab7 	bl	8001d60 <pwm_set_duty_cycle>
                    break;
 80017f2:	e000      	b.n	80017f6 <set_duty_cycle+0x7a>
                    break;
 80017f4:	bf00      	nop
            break;
 80017f6:	e02e      	b.n	8001856 <set_duty_cycle+0xda>
            switch (motion) {
 80017f8:	79bb      	ldrb	r3, [r7, #6]
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d01e      	beq.n	800183c <set_duty_cycle+0xc0>
 80017fe:	2b02      	cmp	r3, #2
 8001800:	dc27      	bgt.n	8001852 <set_duty_cycle+0xd6>
 8001802:	2b00      	cmp	r3, #0
 8001804:	d002      	beq.n	800180c <set_duty_cycle+0x90>
 8001806:	2b01      	cmp	r3, #1
 8001808:	d00c      	beq.n	8001824 <set_duty_cycle+0xa8>
                    break;
 800180a:	e022      	b.n	8001852 <set_duty_cycle+0xd6>
                    pwm_set_duty_cycle(TIM3, TIM_CHANNEL_4, duty_cycle);
 800180c:	797b      	ldrb	r3, [r7, #5]
 800180e:	461a      	mov	r2, r3
 8001810:	210c      	movs	r1, #12
 8001812:	4816      	ldr	r0, [pc, #88]	@ (800186c <set_duty_cycle+0xf0>)
 8001814:	f000 faa4 	bl	8001d60 <pwm_set_duty_cycle>
                    pwm_set_duty_cycle(TIM13, TIM_CHANNEL_1, 0);
 8001818:	2200      	movs	r2, #0
 800181a:	2100      	movs	r1, #0
 800181c:	4814      	ldr	r0, [pc, #80]	@ (8001870 <set_duty_cycle+0xf4>)
 800181e:	f000 fa9f 	bl	8001d60 <pwm_set_duty_cycle>
                    break;
 8001822:	e017      	b.n	8001854 <set_duty_cycle+0xd8>
                    pwm_set_duty_cycle(TIM3, TIM_CHANNEL_4, 0);
 8001824:	2200      	movs	r2, #0
 8001826:	210c      	movs	r1, #12
 8001828:	4810      	ldr	r0, [pc, #64]	@ (800186c <set_duty_cycle+0xf0>)
 800182a:	f000 fa99 	bl	8001d60 <pwm_set_duty_cycle>
                    pwm_set_duty_cycle(TIM13, TIM_CHANNEL_1, duty_cycle);
 800182e:	797b      	ldrb	r3, [r7, #5]
 8001830:	461a      	mov	r2, r3
 8001832:	2100      	movs	r1, #0
 8001834:	480e      	ldr	r0, [pc, #56]	@ (8001870 <set_duty_cycle+0xf4>)
 8001836:	f000 fa93 	bl	8001d60 <pwm_set_duty_cycle>
                    break;
 800183a:	e00b      	b.n	8001854 <set_duty_cycle+0xd8>
                    pwm_set_duty_cycle(TIM3, TIM_CHANNEL_4, 0);
 800183c:	2200      	movs	r2, #0
 800183e:	210c      	movs	r1, #12
 8001840:	480a      	ldr	r0, [pc, #40]	@ (800186c <set_duty_cycle+0xf0>)
 8001842:	f000 fa8d 	bl	8001d60 <pwm_set_duty_cycle>
                    pwm_set_duty_cycle(TIM13, TIM_CHANNEL_1, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2100      	movs	r1, #0
 800184a:	4809      	ldr	r0, [pc, #36]	@ (8001870 <set_duty_cycle+0xf4>)
 800184c:	f000 fa88 	bl	8001d60 <pwm_set_duty_cycle>
                    break;
 8001850:	e000      	b.n	8001854 <set_duty_cycle+0xd8>
                    break;
 8001852:	bf00      	nop
            break;
 8001854:	bf00      	nop
    }
    HAL_GPIO_WritePin(DRV8833_EN_GPIO_Port, DRV8833_EN_Pin, GPIO_PIN_SET);
 8001856:	2201      	movs	r2, #1
 8001858:	2104      	movs	r1, #4
 800185a:	4806      	ldr	r0, [pc, #24]	@ (8001874 <set_duty_cycle+0xf8>)
 800185c:	f001 fdd2 	bl	8003404 <HAL_GPIO_WritePin>
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40014400 	.word	0x40014400
 800186c:	40000400 	.word	0x40000400
 8001870:	40001c00 	.word	0x40001c00
 8001874:	40020400 	.word	0x40020400

08001878 <stop_motors>:

void stop_motors()
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DRV8833_EN_GPIO_Port, DRV8833_EN_Pin, GPIO_PIN_RESET);
 800187c:	2200      	movs	r2, #0
 800187e:	2104      	movs	r1, #4
 8001880:	4802      	ldr	r0, [pc, #8]	@ (800188c <stop_motors+0x14>)
 8001882:	f001 fdbf 	bl	8003404 <HAL_GPIO_WritePin>
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40020400 	.word	0x40020400

08001890 <move_forward>:

void move_forward(uint8_t speed){
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	71fb      	strb	r3, [r7, #7]
    set_duty_cycle(MOTOR_L, FORWARD, speed);
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	461a      	mov	r2, r3
 800189e:	2101      	movs	r1, #1
 80018a0:	2000      	movs	r0, #0
 80018a2:	f7ff ff6b 	bl	800177c <set_duty_cycle>
    set_duty_cycle(MOTOR_R, FORWARD, speed);
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	461a      	mov	r2, r3
 80018aa:	2101      	movs	r1, #1
 80018ac:	2001      	movs	r0, #1
 80018ae:	f7ff ff65 	bl	800177c <set_duty_cycle>
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <move_backward>:
        move_forward(speed);
        HAL_Delay(step_delay); // Delay between each speed step
    }
}

void move_backward(uint8_t speed){
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	4603      	mov	r3, r0
 80018c2:	71fb      	strb	r3, [r7, #7]
    set_duty_cycle(MOTOR_L, BACKWARD, speed);
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	461a      	mov	r2, r3
 80018c8:	2100      	movs	r1, #0
 80018ca:	2000      	movs	r0, #0
 80018cc:	f7ff ff56 	bl	800177c <set_duty_cycle>
    set_duty_cycle(MOTOR_R, BACKWARD, speed);
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	461a      	mov	r2, r3
 80018d4:	2100      	movs	r1, #0
 80018d6:	2001      	movs	r0, #1
 80018d8:	f7ff ff50 	bl	800177c <set_duty_cycle>
}
 80018dc:	bf00      	nop
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <MX_USART2_UART_Init>:

extern UART_HandleTypeDef huart2;
static bool logger_initialised = false;

static void MX_USART2_UART_Init(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 80018e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001924 <MX_USART2_UART_Init+0x40>)
 80018ea:	4a0f      	ldr	r2, [pc, #60]	@ (8001928 <MX_USART2_UART_Init+0x44>)
 80018ec:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 80018ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001924 <MX_USART2_UART_Init+0x40>)
 80018f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018f4:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001924 <MX_USART2_UART_Init+0x40>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 80018fc:	4b09      	ldr	r3, [pc, #36]	@ (8001924 <MX_USART2_UART_Init+0x40>)
 80018fe:	2200      	movs	r2, #0
 8001900:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8001902:	4b08      	ldr	r3, [pc, #32]	@ (8001924 <MX_USART2_UART_Init+0x40>)
 8001904:	2200      	movs	r2, #0
 8001906:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8001908:	4b06      	ldr	r3, [pc, #24]	@ (8001924 <MX_USART2_UART_Init+0x40>)
 800190a:	220c      	movs	r2, #12
 800190c:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800190e:	4b05      	ldr	r3, [pc, #20]	@ (8001924 <MX_USART2_UART_Init+0x40>)
 8001910:	2200      	movs	r2, #0
 8001912:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001914:	4b03      	ldr	r3, [pc, #12]	@ (8001924 <MX_USART2_UART_Init+0x40>)
 8001916:	2200      	movs	r2, #0
 8001918:	61da      	str	r2, [r3, #28]
    // if (HAL_UART_Init(&huart2) != HAL_OK)
    // {
    //   Error_Handler();
    // }
}
 800191a:	bf00      	nop
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	20000434 	.word	0x20000434
 8001928:	40004400 	.word	0x40004400

0800192c <set_log_level>:

void set_log_level(stm32_log_level_t log_level) {
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	71fb      	strb	r3, [r7, #7]
    if (!logger_initialised) {
 8001936:	4b1b      	ldr	r3, [pc, #108]	@ (80019a4 <set_log_level+0x78>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	f083 0301 	eor.w	r3, r3, #1
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b00      	cmp	r3, #0
 8001942:	d004      	beq.n	800194e <set_log_level+0x22>
#ifdef SEMIHOSTING
        initialise_monitor_handles();
#else
        MX_USART2_UART_Init();
 8001944:	f7ff ffce 	bl	80018e4 <MX_USART2_UART_Init>
#endif
        logger_initialised = true; 
 8001948:	4b16      	ldr	r3, [pc, #88]	@ (80019a4 <set_log_level+0x78>)
 800194a:	2201      	movs	r2, #1
 800194c:	701a      	strb	r2, [r3, #0]
    }
    switch(log_level) {
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	3b01      	subs	r3, #1
 8001952:	2b04      	cmp	r3, #4
 8001954:	d820      	bhi.n	8001998 <set_log_level+0x6c>
 8001956:	a201      	add	r2, pc, #4	@ (adr r2, 800195c <set_log_level+0x30>)
 8001958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800195c:	08001971 	.word	0x08001971
 8001960:	08001979 	.word	0x08001979
 8001964:	08001981 	.word	0x08001981
 8001968:	08001989 	.word	0x08001989
 800196c:	08001991 	.word	0x08001991
        case LOG_ERROR:
            printf(LOG_COLOR_E);
 8001970:	480d      	ldr	r0, [pc, #52]	@ (80019a8 <set_log_level+0x7c>)
 8001972:	f004 ff5b 	bl	800682c <iprintf>
            break;
 8001976:	e010      	b.n	800199a <set_log_level+0x6e>
        case LOG_WARN:
            printf(LOG_COLOR_W);
 8001978:	480c      	ldr	r0, [pc, #48]	@ (80019ac <set_log_level+0x80>)
 800197a:	f004 ff57 	bl	800682c <iprintf>
            break;
 800197e:	e00c      	b.n	800199a <set_log_level+0x6e>
        case LOG_INFO:
            printf(LOG_COLOR_I);
 8001980:	480b      	ldr	r0, [pc, #44]	@ (80019b0 <set_log_level+0x84>)
 8001982:	f004 ff53 	bl	800682c <iprintf>
            break;
 8001986:	e008      	b.n	800199a <set_log_level+0x6e>
        case LOG_DEBUG:
            printf(LOG_COLOR_D);
 8001988:	480a      	ldr	r0, [pc, #40]	@ (80019b4 <set_log_level+0x88>)
 800198a:	f004 ff4f 	bl	800682c <iprintf>
            break;
 800198e:	e004      	b.n	800199a <set_log_level+0x6e>
        case LOG_VERBOSE:
            printf(LOG_COLOR_V);
 8001990:	4809      	ldr	r0, [pc, #36]	@ (80019b8 <set_log_level+0x8c>)
 8001992:	f004 ff4b 	bl	800682c <iprintf>
            break;
 8001996:	e000      	b.n	800199a <set_log_level+0x6e>
        default:
            break; 
 8001998:	bf00      	nop
    }
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000494 	.word	0x20000494
 80019a8:	08007434 	.word	0x08007434
 80019ac:	0800743c 	.word	0x0800743c
 80019b0:	08007444 	.word	0x08007444
 80019b4:	0800744c 	.word	0x0800744c
 80019b8:	08007454 	.word	0x08007454

080019bc <MPU6500_OnActivate>:
// TODO: Remove this buffer, instead return
static uint8_t _buffer[14];
// static uint8_t _mag_adjust[3];

__weak void MPU6500_OnActivate()
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <MPU6500_Activate>:

static inline void MPU6500_Activate()
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
    MPU6500_OnActivate();
 80019d0:	f7ff fff4 	bl	80019bc <MPU6500_OnActivate>
    HAL_GPIO_WritePin(MPU6500_CS_GPIO, MPU6500_CS_PIN, GPIO_PIN_RESET);
 80019d4:	2200      	movs	r2, #0
 80019d6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80019da:	4802      	ldr	r0, [pc, #8]	@ (80019e4 <MPU6500_Activate+0x18>)
 80019dc:	f001 fd12 	bl	8003404 <HAL_GPIO_WritePin>
}
 80019e0:	bf00      	nop
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40020000 	.word	0x40020000

080019e8 <MPU6500_Deactivate>:

static inline void MPU6500_Deactivate()
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MPU6500_CS_GPIO, MPU6500_CS_PIN, GPIO_PIN_SET);
 80019ec:	2201      	movs	r2, #1
 80019ee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80019f2:	4802      	ldr	r0, [pc, #8]	@ (80019fc <MPU6500_Deactivate+0x14>)
 80019f4:	f001 fd06 	bl	8003404 <HAL_GPIO_WritePin>
}
 80019f8:	bf00      	nop
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40020000 	.word	0x40020000

08001a00 <SPIx_WriteRead>:

uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af02      	add	r7, sp, #8
 8001a06:	4603      	mov	r3, r0
 8001a08:	71fb      	strb	r3, [r7, #7]
    uint8_t receivedbyte = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	73fb      	strb	r3, [r7, #15]
    if (HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)&Byte, (uint8_t *)&receivedbyte, 1, 0x1000) != HAL_OK)
 8001a0e:	f107 020f 	add.w	r2, r7, #15
 8001a12:	1df9      	adds	r1, r7, #7
 8001a14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	4806      	ldr	r0, [pc, #24]	@ (8001a38 <SPIx_WriteRead+0x38>)
 8001a1e:	f002 fdbf 	bl	80045a0 <HAL_SPI_TransmitReceive>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <SPIx_WriteRead+0x2c>
    {
        return -1;
 8001a28:	23ff      	movs	r3, #255	@ 0xff
 8001a2a:	e000      	b.n	8001a2e <SPIx_WriteRead+0x2e>
    }
    else
    {
    }
    return receivedbyte;
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000228 	.word	0x20000228

08001a3c <MPU_SPI_Write>:

void MPU_SPI_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	70fb      	strb	r3, [r7, #3]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	803b      	strh	r3, [r7, #0]
    MPU6500_Activate();
 8001a4c:	f7ff ffbe 	bl	80019cc <MPU6500_Activate>
    SPIx_WriteRead(WriteAddr);
 8001a50:	78fb      	ldrb	r3, [r7, #3]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff ffd4 	bl	8001a00 <SPIx_WriteRead>
    while (NumByteToWrite >= 0x01)
 8001a58:	e00a      	b.n	8001a70 <MPU_SPI_Write+0x34>
    {
        SPIx_WriteRead(*pBuffer);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff ffce 	bl	8001a00 <SPIx_WriteRead>
        NumByteToWrite--;
 8001a64:	883b      	ldrh	r3, [r7, #0]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	803b      	strh	r3, [r7, #0]
        pBuffer++;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	607b      	str	r3, [r7, #4]
    while (NumByteToWrite >= 0x01)
 8001a70:	883b      	ldrh	r3, [r7, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f1      	bne.n	8001a5a <MPU_SPI_Write+0x1e>
    }
    MPU6500_Deactivate();
 8001a76:	f7ff ffb7 	bl	80019e8 <MPU6500_Deactivate>
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <MPU_SPI_Read>:

void MPU_SPI_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	70fb      	strb	r3, [r7, #3]
 8001a90:	4613      	mov	r3, r2
 8001a92:	803b      	strh	r3, [r7, #0]
    MPU6500_Activate();
 8001a94:	f7ff ff9a 	bl	80019cc <MPU6500_Activate>
    uint8_t data = ReadAddr | READWRITE_CMD;
 8001a98:	2280      	movs	r2, #128	@ 0x80
 8001a9a:	78fb      	ldrb	r3, [r7, #3]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	73fb      	strb	r3, [r7, #15]
    HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 8001aa2:	f107 010f 	add.w	r1, r7, #15
 8001aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aaa:	2201      	movs	r2, #1
 8001aac:	4807      	ldr	r0, [pc, #28]	@ (8001acc <MPU_SPI_Read+0x48>)
 8001aae:	f002 fb1a 	bl	80040e6 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, pBuffer, NumByteToRead, HAL_MAX_DELAY);
 8001ab2:	883a      	ldrh	r2, [r7, #0]
 8001ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab8:	6879      	ldr	r1, [r7, #4]
 8001aba:	4804      	ldr	r0, [pc, #16]	@ (8001acc <MPU_SPI_Read+0x48>)
 8001abc:	f002 fc57 	bl	800436e <HAL_SPI_Receive>
    MPU6500_Deactivate();
 8001ac0:	f7ff ff92 	bl	80019e8 <MPU6500_Deactivate>
}
 8001ac4:	bf00      	nop
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20000228 	.word	0x20000228

08001ad0 <mpu6500_write_register>:

/* writes a byte to MPU6500 register given a register address and data */
void mpu6500_write_register(uint8_t subAddress, uint8_t data)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	460a      	mov	r2, r1
 8001ada:	71fb      	strb	r3, [r7, #7]
 8001adc:	4613      	mov	r3, r2
 8001ade:	71bb      	strb	r3, [r7, #6]
    MPU_SPI_Write(&data, subAddress, 1);
 8001ae0:	79f9      	ldrb	r1, [r7, #7]
 8001ae2:	1dbb      	adds	r3, r7, #6
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff ffa8 	bl	8001a3c <MPU_SPI_Write>
    HAL_Delay(10);
 8001aec:	200a      	movs	r0, #10
 8001aee:	f000 fc9b 	bl	8002428 <HAL_Delay>
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <mpu6500_read_registers>:

/* reads registers from MPU6500 given a starting register address, number of bytes, and a pointer to store data */
void mpu6500_read_registers(uint8_t subAddress, uint8_t count, uint8_t *dest)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b082      	sub	sp, #8
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	4603      	mov	r3, r0
 8001b02:	603a      	str	r2, [r7, #0]
 8001b04:	71fb      	strb	r3, [r7, #7]
 8001b06:	460b      	mov	r3, r1
 8001b08:	71bb      	strb	r3, [r7, #6]
    MPU_SPI_Read(dest, subAddress, count);
 8001b0a:	79bb      	ldrb	r3, [r7, #6]
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	79fb      	ldrb	r3, [r7, #7]
 8001b10:	4619      	mov	r1, r3
 8001b12:	6838      	ldr	r0, [r7, #0]
 8001b14:	f7ff ffb6 	bl	8001a84 <MPU_SPI_Read>
}
 8001b18:	bf00      	nop
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <whoAmI>:

/* gets the MPU6500 WHO_AM_I register value, expected to be 0x71 */
static uint8_t whoAmI()
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
    uint8_t data;
    // read the WHO AM I register
    mpu6500_read_registers(WHO_AM_I, 1, &data);
 8001b26:	2075      	movs	r0, #117	@ 0x75
 8001b28:	1dfb      	adds	r3, r7, #7
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	f7ff ffe4 	bl	8001afa <mpu6500_read_registers>

    // return the register value
    return data;
 8001b32:	79fb      	ldrb	r3, [r7, #7]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <mpu6500_init>:

/* starts communication with the MP6500 */
HAL_StatusTypeDef mpu6500_init() //Careful with this, don't use it since Im p sure other things cover it
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b088      	sub	sp, #32
 8001b40:	af02      	add	r7, sp, #8
    /* Initialising the GPIO of Chip select */
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b42:	463b      	mov	r3, r7
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
    HAL_StatusTypeDef err = HAL_SPI_Init(&hspi1);
    HAL_ERROR_CHECK(err == HAL_OK, "Failed to initialise the SPI Driver", err);
    */

    // select clock source to gyro
    mpu6500_write_register(PWR_MGMNT_1, 0x1);
 8001b50:	236b      	movs	r3, #107	@ 0x6b
 8001b52:	2101      	movs	r1, #1
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ffbb 	bl	8001ad0 <mpu6500_write_register>
    // enable I2C master mode
    mpu6500_write_register(USER_CTRL, I2C_MST_EN);
 8001b5a:	236a      	movs	r3, #106	@ 0x6a
 8001b5c:	2220      	movs	r2, #32
 8001b5e:	4611      	mov	r1, r2
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff ffb5 	bl	8001ad0 <mpu6500_write_register>
    // set the I2C bus speed to 400 kHz
    mpu6500_write_register(I2C_MST_CTRL, I2C_MST_CLK);
 8001b66:	2324      	movs	r3, #36	@ 0x24
 8001b68:	220d      	movs	r2, #13
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ffaf 	bl	8001ad0 <mpu6500_write_register>

    // reset the MPU6500
    mpu6500_write_register(PWR_MGMNT_1, PWR_RESET);
 8001b72:	236b      	movs	r3, #107	@ 0x6b
 8001b74:	2280      	movs	r2, #128	@ 0x80
 8001b76:	4611      	mov	r1, r2
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ffa9 	bl	8001ad0 <mpu6500_write_register>
    // wait for MPU-6500 to come back up
    HAL_Delay(10);
 8001b7e:	200a      	movs	r0, #10
 8001b80:	f000 fc52 	bl	8002428 <HAL_Delay>
    
    // select clock source to gyro
    mpu6500_write_register(PWR_MGMNT_1, CLOCK_SEL_PLL);
 8001b84:	236b      	movs	r3, #107	@ 0x6b
 8001b86:	2201      	movs	r2, #1
 8001b88:	4611      	mov	r1, r2
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff ffa0 	bl	8001ad0 <mpu6500_write_register>

    // check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
    uint8_t who = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	75fb      	strb	r3, [r7, #23]
    who = whoAmI();
 8001b94:	f7ff ffc4 	bl	8001b20 <whoAmI>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	75fb      	strb	r3, [r7, #23]
    HAL_ERROR_CHECK(who == 0x70, "Unable to verify the address of whoami register", HAL_ERROR);
 8001b9c:	7dfb      	ldrb	r3, [r7, #23]
 8001b9e:	2b70      	cmp	r3, #112	@ 0x70
 8001ba0:	d013      	beq.n	8001bca <mpu6500_init+0x8e>
 8001ba2:	2001      	movs	r0, #1
 8001ba4:	f7ff fec2 	bl	800192c <set_log_level>
 8001ba8:	f000 fc32 	bl	8002410 <HAL_GetTick>
 8001bac:	4601      	mov	r1, r0
 8001bae:	4b24      	ldr	r3, [pc, #144]	@ (8001c40 <mpu6500_init+0x104>)
 8001bb0:	9301      	str	r3, [sp, #4]
 8001bb2:	2387      	movs	r3, #135	@ 0x87
 8001bb4:	9300      	str	r3, [sp, #0]
 8001bb6:	4b23      	ldr	r3, [pc, #140]	@ (8001c44 <mpu6500_init+0x108>)
 8001bb8:	4a23      	ldr	r2, [pc, #140]	@ (8001c48 <mpu6500_init+0x10c>)
 8001bba:	4824      	ldr	r0, [pc, #144]	@ (8001c4c <mpu6500_init+0x110>)
 8001bbc:	f004 fe36 	bl	800682c <iprintf>
 8001bc0:	200a      	movs	r0, #10
 8001bc2:	f004 fe45 	bl	8006850 <putchar>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e035      	b.n	8001c36 <mpu6500_init+0xfa>

    // enable accelerometer and gyro
    mpu6500_write_register(PWR_MGMNT_2, SEN_ENABLE);
 8001bca:	236c      	movs	r3, #108	@ 0x6c
 8001bcc:	2200      	movs	r2, #0
 8001bce:	4611      	mov	r1, r2
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff ff7d 	bl	8001ad0 <mpu6500_write_register>

    // setting accel range to 16G as default
    mpu6500_write_register(ACCEL_CONFIG, ACCEL_FS_SEL_16G);
 8001bd6:	231c      	movs	r3, #28
 8001bd8:	2218      	movs	r2, #24
 8001bda:	4611      	mov	r1, r2
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff ff77 	bl	8001ad0 <mpu6500_write_register>

    // setting the gyro range to 2000DPS as default
    mpu6500_write_register(GYRO_CONFIG, GYRO_FS_SEL_250DPS);
 8001be2:	231b      	movs	r3, #27
 8001be4:	2200      	movs	r2, #0
 8001be6:	4611      	mov	r1, r2
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff ff71 	bl	8001ad0 <mpu6500_write_register>

    // setting bandwidth to 184Hz as default
    mpu6500_write_register(ACCEL_CONFIG2, DLPF_184);
 8001bee:	231d      	movs	r3, #29
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff ff6b 	bl	8001ad0 <mpu6500_write_register>

    // setting gyro bandwidth to 184Hz
    mpu6500_write_register(CONFIG, DLPF_184);
 8001bfa:	231a      	movs	r3, #26
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	4611      	mov	r1, r2
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ff65 	bl	8001ad0 <mpu6500_write_register>

    // setting the sample rate divider to 0 as default
    mpu6500_write_register(SMPDIV, 0x00);
 8001c06:	2319      	movs	r3, #25
 8001c08:	2100      	movs	r1, #0
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff ff60 	bl	8001ad0 <mpu6500_write_register>

    // enable I2C master mode
    mpu6500_write_register(USER_CTRL, I2C_MST_EN);
 8001c10:	236a      	movs	r3, #106	@ 0x6a
 8001c12:	2220      	movs	r2, #32
 8001c14:	4611      	mov	r1, r2
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff ff5a 	bl	8001ad0 <mpu6500_write_register>

    // set the I2C bus speed to 400 kHz
    mpu6500_write_register(I2C_MST_CTRL, I2C_MST_CLK);
 8001c1c:	2324      	movs	r3, #36	@ 0x24
 8001c1e:	220d      	movs	r2, #13
 8001c20:	4611      	mov	r1, r2
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff ff54 	bl	8001ad0 <mpu6500_write_register>

    // select clock source to gyro
    mpu6500_write_register(PWR_MGMNT_1, CLOCK_SEL_PLL);
 8001c28:	236b      	movs	r3, #107	@ 0x6b
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	4611      	mov	r1, r2
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff ff4e 	bl	8001ad0 <mpu6500_write_register>

    // successful init, return 0
    return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	08007478 	.word	0x08007478
 8001c44:	080074c0 	.word	0x080074c0
 8001c48:	0800745c 	.word	0x0800745c
 8001c4c:	08007464 	.word	0x08007464

08001c50 <mpu6500_get_data>:
    mpu6500_write_register(ACCEL_CONFIG2, bandwidth);
    mpu6500_write_register(CONFIG, bandwidth);
}
/* read the data, each argiment should point to a array for x, y, and x */
void mpu6500_get_data(int16_t *AccData, int16_t *GyroData)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
    // grab the data from the MPU6500
    mpu6500_read_registers(ACCEL_OUT, 14, _buffer);
 8001c5a:	233b      	movs	r3, #59	@ 0x3b
 8001c5c:	4a27      	ldr	r2, [pc, #156]	@ (8001cfc <mpu6500_get_data+0xac>)
 8001c5e:	210e      	movs	r1, #14
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ff4a 	bl	8001afa <mpu6500_read_registers>

    // combine into 16 bit values
    AccData[0] = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 8001c66:	4b25      	ldr	r3, [pc, #148]	@ (8001cfc <mpu6500_get_data+0xac>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	021b      	lsls	r3, r3, #8
 8001c6c:	b21a      	sxth	r2, r3
 8001c6e:	4b23      	ldr	r3, [pc, #140]	@ (8001cfc <mpu6500_get_data+0xac>)
 8001c70:	785b      	ldrb	r3, [r3, #1]
 8001c72:	b21b      	sxth	r3, r3
 8001c74:	4313      	orrs	r3, r2
 8001c76:	b21a      	sxth	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	801a      	strh	r2, [r3, #0]
    AccData[1] = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 8001c7c:	4b1f      	ldr	r3, [pc, #124]	@ (8001cfc <mpu6500_get_data+0xac>)
 8001c7e:	789b      	ldrb	r3, [r3, #2]
 8001c80:	021b      	lsls	r3, r3, #8
 8001c82:	b219      	sxth	r1, r3
 8001c84:	4b1d      	ldr	r3, [pc, #116]	@ (8001cfc <mpu6500_get_data+0xac>)
 8001c86:	78db      	ldrb	r3, [r3, #3]
 8001c88:	b21a      	sxth	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	3302      	adds	r3, #2
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	b212      	sxth	r2, r2
 8001c92:	801a      	strh	r2, [r3, #0]
    AccData[2] = (((int16_t)_buffer[4]) << 8) | _buffer[5];
 8001c94:	4b19      	ldr	r3, [pc, #100]	@ (8001cfc <mpu6500_get_data+0xac>)
 8001c96:	791b      	ldrb	r3, [r3, #4]
 8001c98:	021b      	lsls	r3, r3, #8
 8001c9a:	b219      	sxth	r1, r3
 8001c9c:	4b17      	ldr	r3, [pc, #92]	@ (8001cfc <mpu6500_get_data+0xac>)
 8001c9e:	795b      	ldrb	r3, [r3, #5]
 8001ca0:	b21a      	sxth	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	b212      	sxth	r2, r2
 8001caa:	801a      	strh	r2, [r3, #0]
    GyroData[0] = (((int16_t)_buffer[8]) << 8) | _buffer[9];
 8001cac:	4b13      	ldr	r3, [pc, #76]	@ (8001cfc <mpu6500_get_data+0xac>)
 8001cae:	7a1b      	ldrb	r3, [r3, #8]
 8001cb0:	021b      	lsls	r3, r3, #8
 8001cb2:	b21a      	sxth	r2, r3
 8001cb4:	4b11      	ldr	r3, [pc, #68]	@ (8001cfc <mpu6500_get_data+0xac>)
 8001cb6:	7a5b      	ldrb	r3, [r3, #9]
 8001cb8:	b21b      	sxth	r3, r3
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	b21a      	sxth	r2, r3
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	801a      	strh	r2, [r3, #0]
    GyroData[1] = (((int16_t)_buffer[10]) << 8) | _buffer[11];
 8001cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8001cfc <mpu6500_get_data+0xac>)
 8001cc4:	7a9b      	ldrb	r3, [r3, #10]
 8001cc6:	021b      	lsls	r3, r3, #8
 8001cc8:	b219      	sxth	r1, r3
 8001cca:	4b0c      	ldr	r3, [pc, #48]	@ (8001cfc <mpu6500_get_data+0xac>)
 8001ccc:	7adb      	ldrb	r3, [r3, #11]
 8001cce:	b21a      	sxth	r2, r3
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	3302      	adds	r3, #2
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	b212      	sxth	r2, r2
 8001cd8:	801a      	strh	r2, [r3, #0]
    GyroData[2] = (((int16_t)_buffer[12]) << 8) | _buffer[13];
 8001cda:	4b08      	ldr	r3, [pc, #32]	@ (8001cfc <mpu6500_get_data+0xac>)
 8001cdc:	7b1b      	ldrb	r3, [r3, #12]
 8001cde:	021b      	lsls	r3, r3, #8
 8001ce0:	b219      	sxth	r1, r3
 8001ce2:	4b06      	ldr	r3, [pc, #24]	@ (8001cfc <mpu6500_get_data+0xac>)
 8001ce4:	7b5b      	ldrb	r3, [r3, #13]
 8001ce6:	b21a      	sxth	r2, r3
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	3304      	adds	r3, #4
 8001cec:	430a      	orrs	r2, r1
 8001cee:	b212      	sxth	r2, r2
 8001cf0:	801a      	strh	r2, [r3, #0]
}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000498 	.word	0x20000498

08001d00 <pwm_init>:
static HAL_StatusTypeDef MX_TIM12_Init(void);
static HAL_StatusTypeDef MX_TIM13_Init(void);

// TODO: Make it inline
HAL_StatusTypeDef pwm_init()
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
    if (is_initialised)
 8001d06:	4b15      	ldr	r3, [pc, #84]	@ (8001d5c <pwm_init+0x5c>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <pwm_init+0x12>
    {
        return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	e020      	b.n	8001d54 <pwm_init+0x54>
    }
    HAL_StatusTypeDef err = MX_TIM3_Init();
 8001d12:	f000 f911 	bl	8001f38 <MX_TIM3_Init>
 8001d16:	4603      	mov	r3, r0
 8001d18:	71fb      	strb	r3, [r7, #7]
    err |= MX_TIM10_Init();
 8001d1a:	f000 f9e7 	bl	80020ec <MX_TIM10_Init>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	461a      	mov	r2, r3
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	71fb      	strb	r3, [r7, #7]
    err |= MX_TIM11_Init();
 8001d28:	f000 fa34 	bl	8002194 <MX_TIM11_Init>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	461a      	mov	r2, r3
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	71fb      	strb	r3, [r7, #7]
    err |= MX_TIM12_Init();
 8001d36:	f000 fa81 	bl	800223c <MX_TIM12_Init>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	71fb      	strb	r3, [r7, #7]
    err |= MX_TIM13_Init();
 8001d44:	f000 fada 	bl	80022fc <MX_TIM13_Init>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	71fb      	strb	r3, [r7, #7]
    return err;
 8001d52:	79fb      	ldrb	r3, [r7, #7]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	200004a6 	.word	0x200004a6

08001d60 <pwm_set_duty_cycle>:

void pwm_set_duty_cycle(TIM_TypeDef *instance, uint32_t channel, uint8_t duty_cycle)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b08b      	sub	sp, #44	@ 0x2c
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	71fb      	strb	r3, [r7, #7]
    duty_cycle = duty_cycle > 100 ? 100 : (duty_cycle < 0) ? 0 : duty_cycle;
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	2b64      	cmp	r3, #100	@ 0x64
 8001d72:	bf28      	it	cs
 8001d74:	2364      	movcs	r3, #100	@ 0x64
 8001d76:	71fb      	strb	r3, [r7, #7]

    if (instance == TIM3) {
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4a64      	ldr	r2, [pc, #400]	@ (8001f0c <pwm_set_duty_cycle+0x1ac>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d151      	bne.n	8001e24 <pwm_set_duty_cycle+0xc4>
        unsigned int ARR = __HAL_TIM_GET_AUTORELOAD(&htim3);
 8001d80:	4b63      	ldr	r3, [pc, #396]	@ (8001f10 <pwm_set_duty_cycle+0x1b0>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d86:	617b      	str	r3, [r7, #20]
        switch (channel)
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	2b0c      	cmp	r3, #12
 8001d8c:	f200 80b1 	bhi.w	8001ef2 <pwm_set_duty_cycle+0x192>
 8001d90:	a201      	add	r2, pc, #4	@ (adr r2, 8001d98 <pwm_set_duty_cycle+0x38>)
 8001d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d96:	bf00      	nop
 8001d98:	08001dcd 	.word	0x08001dcd
 8001d9c:	08001ef3 	.word	0x08001ef3
 8001da0:	08001ef3 	.word	0x08001ef3
 8001da4:	08001ef3 	.word	0x08001ef3
 8001da8:	08001de3 	.word	0x08001de3
 8001dac:	08001ef3 	.word	0x08001ef3
 8001db0:	08001ef3 	.word	0x08001ef3
 8001db4:	08001ef3 	.word	0x08001ef3
 8001db8:	08001df9 	.word	0x08001df9
 8001dbc:	08001ef3 	.word	0x08001ef3
 8001dc0:	08001ef3 	.word	0x08001ef3
 8001dc4:	08001ef3 	.word	0x08001ef3
 8001dc8:	08001e0f 	.word	0x08001e0f
        {
            case TIM_CHANNEL_1:
                TIM3->CCR1 = (uint32_t)((ARR * duty_cycle) / 100);
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	fb02 f303 	mul.w	r3, r2, r3
 8001dd4:	4a4d      	ldr	r2, [pc, #308]	@ (8001f0c <pwm_set_duty_cycle+0x1ac>)
 8001dd6:	494f      	ldr	r1, [pc, #316]	@ (8001f14 <pwm_set_duty_cycle+0x1b4>)
 8001dd8:	fba1 1303 	umull	r1, r3, r1, r3
 8001ddc:	095b      	lsrs	r3, r3, #5
 8001dde:	6353      	str	r3, [r2, #52]	@ 0x34
                break;
 8001de0:	e08e      	b.n	8001f00 <pwm_set_duty_cycle+0x1a0>
            case TIM_CHANNEL_2:
                TIM3->CCR2 = (uint32_t)((ARR * duty_cycle) / 100);
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	fb02 f303 	mul.w	r3, r2, r3
 8001dea:	4a48      	ldr	r2, [pc, #288]	@ (8001f0c <pwm_set_duty_cycle+0x1ac>)
 8001dec:	4949      	ldr	r1, [pc, #292]	@ (8001f14 <pwm_set_duty_cycle+0x1b4>)
 8001dee:	fba1 1303 	umull	r1, r3, r1, r3
 8001df2:	095b      	lsrs	r3, r3, #5
 8001df4:	6393      	str	r3, [r2, #56]	@ 0x38
                break;
 8001df6:	e083      	b.n	8001f00 <pwm_set_duty_cycle+0x1a0>
            case TIM_CHANNEL_3:
                TIM3->CCR3 = (uint32_t)((ARR * duty_cycle) / 100);
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	fb02 f303 	mul.w	r3, r2, r3
 8001e00:	4a42      	ldr	r2, [pc, #264]	@ (8001f0c <pwm_set_duty_cycle+0x1ac>)
 8001e02:	4944      	ldr	r1, [pc, #272]	@ (8001f14 <pwm_set_duty_cycle+0x1b4>)
 8001e04:	fba1 1303 	umull	r1, r3, r1, r3
 8001e08:	095b      	lsrs	r3, r3, #5
 8001e0a:	63d3      	str	r3, [r2, #60]	@ 0x3c
                break;
 8001e0c:	e078      	b.n	8001f00 <pwm_set_duty_cycle+0x1a0>
            case TIM_CHANNEL_4:
                TIM3->CCR4 = (uint32_t)((ARR * duty_cycle) / 100);
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	fb02 f303 	mul.w	r3, r2, r3
 8001e16:	4a3d      	ldr	r2, [pc, #244]	@ (8001f0c <pwm_set_duty_cycle+0x1ac>)
 8001e18:	493e      	ldr	r1, [pc, #248]	@ (8001f14 <pwm_set_duty_cycle+0x1b4>)
 8001e1a:	fba1 1303 	umull	r1, r3, r1, r3
 8001e1e:	095b      	lsrs	r3, r3, #5
 8001e20:	6413      	str	r3, [r2, #64]	@ 0x40
                break;
 8001e22:	e06d      	b.n	8001f00 <pwm_set_duty_cycle+0x1a0>
            default:
                break;
        }
    }
    else if (instance == TIM10) {
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4a3c      	ldr	r2, [pc, #240]	@ (8001f18 <pwm_set_duty_cycle+0x1b8>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d111      	bne.n	8001e50 <pwm_set_duty_cycle+0xf0>
        unsigned int ARR = __HAL_TIM_GET_AUTORELOAD(&htim10);
 8001e2c:	4b3b      	ldr	r3, [pc, #236]	@ (8001f1c <pwm_set_duty_cycle+0x1bc>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e32:	61bb      	str	r3, [r7, #24]
        switch (channel)
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d15d      	bne.n	8001ef6 <pwm_set_duty_cycle+0x196>
        {
            case TIM_CHANNEL_1:
                TIM10->CCR1 = (uint32_t)((ARR * duty_cycle) / 100);
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	fb02 f303 	mul.w	r3, r2, r3
 8001e42:	4a35      	ldr	r2, [pc, #212]	@ (8001f18 <pwm_set_duty_cycle+0x1b8>)
 8001e44:	4933      	ldr	r1, [pc, #204]	@ (8001f14 <pwm_set_duty_cycle+0x1b4>)
 8001e46:	fba1 1303 	umull	r1, r3, r1, r3
 8001e4a:	095b      	lsrs	r3, r3, #5
 8001e4c:	6353      	str	r3, [r2, #52]	@ 0x34
                break;
 8001e4e:	e057      	b.n	8001f00 <pwm_set_duty_cycle+0x1a0>
            default:
                break;
        }
    }
    else if (instance == TIM11) {
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	4a33      	ldr	r2, [pc, #204]	@ (8001f20 <pwm_set_duty_cycle+0x1c0>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d111      	bne.n	8001e7c <pwm_set_duty_cycle+0x11c>

        unsigned int ARR = __HAL_TIM_GET_AUTORELOAD(&htim11);
 8001e58:	4b32      	ldr	r3, [pc, #200]	@ (8001f24 <pwm_set_duty_cycle+0x1c4>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e5e:	61fb      	str	r3, [r7, #28]
        switch (channel)
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d149      	bne.n	8001efa <pwm_set_duty_cycle+0x19a>
        {
            case TIM_CHANNEL_1:
                TIM11->CCR1 = (uint32_t)((ARR * duty_cycle) / 100);
 8001e66:	79fb      	ldrb	r3, [r7, #7]
 8001e68:	69fa      	ldr	r2, [r7, #28]
 8001e6a:	fb02 f303 	mul.w	r3, r2, r3
 8001e6e:	4a2c      	ldr	r2, [pc, #176]	@ (8001f20 <pwm_set_duty_cycle+0x1c0>)
 8001e70:	4928      	ldr	r1, [pc, #160]	@ (8001f14 <pwm_set_duty_cycle+0x1b4>)
 8001e72:	fba1 1303 	umull	r1, r3, r1, r3
 8001e76:	095b      	lsrs	r3, r3, #5
 8001e78:	6353      	str	r3, [r2, #52]	@ 0x34
                break;
 8001e7a:	e041      	b.n	8001f00 <pwm_set_duty_cycle+0x1a0>
            default:
                break;
        }
    }
    else if (instance == TIM12) {
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4a2a      	ldr	r2, [pc, #168]	@ (8001f28 <pwm_set_duty_cycle+0x1c8>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d120      	bne.n	8001ec6 <pwm_set_duty_cycle+0x166>
        unsigned int ARR = __HAL_TIM_GET_AUTORELOAD(&htim12);
 8001e84:	4b29      	ldr	r3, [pc, #164]	@ (8001f2c <pwm_set_duty_cycle+0x1cc>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e8a:	623b      	str	r3, [r7, #32]
        switch (channel)
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <pwm_set_duty_cycle+0x13a>
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	2b04      	cmp	r3, #4
 8001e96:	d00b      	beq.n	8001eb0 <pwm_set_duty_cycle+0x150>
                break;
            case TIM_CHANNEL_2:
                TIM12->CCR2 = (uint32_t)((ARR * duty_cycle) / 100);
                break;
            default:
                break;
 8001e98:	e032      	b.n	8001f00 <pwm_set_duty_cycle+0x1a0>
                TIM12->CCR1 = (uint32_t)((ARR * duty_cycle) / 100);
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	6a3a      	ldr	r2, [r7, #32]
 8001e9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ea2:	4a21      	ldr	r2, [pc, #132]	@ (8001f28 <pwm_set_duty_cycle+0x1c8>)
 8001ea4:	491b      	ldr	r1, [pc, #108]	@ (8001f14 <pwm_set_duty_cycle+0x1b4>)
 8001ea6:	fba1 1303 	umull	r1, r3, r1, r3
 8001eaa:	095b      	lsrs	r3, r3, #5
 8001eac:	6353      	str	r3, [r2, #52]	@ 0x34
                break;
 8001eae:	e027      	b.n	8001f00 <pwm_set_duty_cycle+0x1a0>
                TIM12->CCR2 = (uint32_t)((ARR * duty_cycle) / 100);
 8001eb0:	79fb      	ldrb	r3, [r7, #7]
 8001eb2:	6a3a      	ldr	r2, [r7, #32]
 8001eb4:	fb02 f303 	mul.w	r3, r2, r3
 8001eb8:	4a1b      	ldr	r2, [pc, #108]	@ (8001f28 <pwm_set_duty_cycle+0x1c8>)
 8001eba:	4916      	ldr	r1, [pc, #88]	@ (8001f14 <pwm_set_duty_cycle+0x1b4>)
 8001ebc:	fba1 1303 	umull	r1, r3, r1, r3
 8001ec0:	095b      	lsrs	r3, r3, #5
 8001ec2:	6393      	str	r3, [r2, #56]	@ 0x38
                break;
 8001ec4:	e01c      	b.n	8001f00 <pwm_set_duty_cycle+0x1a0>
        }
    }
    else if (instance == TIM13) {
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	4a19      	ldr	r2, [pc, #100]	@ (8001f30 <pwm_set_duty_cycle+0x1d0>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d118      	bne.n	8001f00 <pwm_set_duty_cycle+0x1a0>

        unsigned int ARR = __HAL_TIM_GET_AUTORELOAD(&htim13);
 8001ece:	4b19      	ldr	r3, [pc, #100]	@ (8001f34 <pwm_set_duty_cycle+0x1d4>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed4:	627b      	str	r3, [r7, #36]	@ 0x24
        switch (channel)
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d110      	bne.n	8001efe <pwm_set_duty_cycle+0x19e>
        {
            case TIM_CHANNEL_1:
                TIM13->CCR1 = (uint32_t)((ARR * duty_cycle) / 100);
 8001edc:	79fb      	ldrb	r3, [r7, #7]
 8001ede:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ee0:	fb02 f303 	mul.w	r3, r2, r3
 8001ee4:	4a12      	ldr	r2, [pc, #72]	@ (8001f30 <pwm_set_duty_cycle+0x1d0>)
 8001ee6:	490b      	ldr	r1, [pc, #44]	@ (8001f14 <pwm_set_duty_cycle+0x1b4>)
 8001ee8:	fba1 1303 	umull	r1, r3, r1, r3
 8001eec:	095b      	lsrs	r3, r3, #5
 8001eee:	6353      	str	r3, [r2, #52]	@ 0x34
                break;
 8001ef0:	e006      	b.n	8001f00 <pwm_set_duty_cycle+0x1a0>
                break;
 8001ef2:	bf00      	nop
 8001ef4:	e004      	b.n	8001f00 <pwm_set_duty_cycle+0x1a0>
                break;
 8001ef6:	bf00      	nop
 8001ef8:	e002      	b.n	8001f00 <pwm_set_duty_cycle+0x1a0>
                break;
 8001efa:	bf00      	nop
 8001efc:	e000      	b.n	8001f00 <pwm_set_duty_cycle+0x1a0>
            default:
                break;
 8001efe:	bf00      	nop
        }
    }
}
 8001f00:	bf00      	nop
 8001f02:	372c      	adds	r7, #44	@ 0x2c
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	40000400 	.word	0x40000400
 8001f10:	200002cc 	.word	0x200002cc
 8001f14:	51eb851f 	.word	0x51eb851f
 8001f18:	40014400 	.word	0x40014400
 8001f1c:	20000314 	.word	0x20000314
 8001f20:	40014800 	.word	0x40014800
 8001f24:	2000035c 	.word	0x2000035c
 8001f28:	40001800 	.word	0x40001800
 8001f2c:	200003a4 	.word	0x200003a4
 8001f30:	40001c00 	.word	0x40001c00
 8001f34:	200003ec 	.word	0x200003ec

08001f38 <MX_TIM3_Init>:

/* TIM3 init function */
static HAL_StatusTypeDef MX_TIM3_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08e      	sub	sp, #56	@ 0x38
 8001f3c:	af00      	add	r7, sp, #0
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	605a      	str	r2, [r3, #4]
 8001f48:	609a      	str	r2, [r3, #8]
 8001f4a:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f4c:	f107 031c 	add.w	r3, r7, #28
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8001f56:	463b      	mov	r3, r7
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	60da      	str	r2, [r3, #12]
 8001f62:	611a      	str	r2, [r3, #16]
 8001f64:	615a      	str	r2, [r3, #20]
 8001f66:	619a      	str	r2, [r3, #24]

    htim3.Instance = TIM3;
 8001f68:	4b5e      	ldr	r3, [pc, #376]	@ (80020e4 <MX_TIM3_Init+0x1ac>)
 8001f6a:	4a5f      	ldr	r2, [pc, #380]	@ (80020e8 <MX_TIM3_Init+0x1b0>)
 8001f6c:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 4 - 1;
 8001f6e:	4b5d      	ldr	r3, [pc, #372]	@ (80020e4 <MX_TIM3_Init+0x1ac>)
 8001f70:	2203      	movs	r2, #3
 8001f72:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f74:	4b5b      	ldr	r3, [pc, #364]	@ (80020e4 <MX_TIM3_Init+0x1ac>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 100 - 1;
 8001f7a:	4b5a      	ldr	r3, [pc, #360]	@ (80020e4 <MX_TIM3_Init+0x1ac>)
 8001f7c:	2263      	movs	r2, #99	@ 0x63
 8001f7e:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f80:	4b58      	ldr	r3, [pc, #352]	@ (80020e4 <MX_TIM3_Init+0x1ac>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f86:	4b57      	ldr	r3, [pc, #348]	@ (80020e4 <MX_TIM3_Init+0x1ac>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	619a      	str	r2, [r3, #24]
    HAL_StatusTypeDef err = HAL_TIM_Base_Init(&htim3);
 8001f8c:	4855      	ldr	r0, [pc, #340]	@ (80020e4 <MX_TIM3_Init+0x1ac>)
 8001f8e:	f002 fdf3 	bl	8004b78 <HAL_TIM_Base_Init>
 8001f92:	4603      	mov	r3, r0
 8001f94:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f9c:	627b      	str	r3, [r7, #36]	@ 0x24

    err |= HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 8001f9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	484f      	ldr	r0, [pc, #316]	@ (80020e4 <MX_TIM3_Init+0x1ac>)
 8001fa6:	f003 f971 	bl	800528c <HAL_TIM_ConfigClockSource>
 8001faa:	4603      	mov	r3, r0
 8001fac:	461a      	mov	r2, r3
 8001fae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    err |= HAL_TIM_PWM_Init(&htim3);
 8001fb8:	484a      	ldr	r0, [pc, #296]	@ (80020e4 <MX_TIM3_Init+0x1ac>)
 8001fba:	f002 fe9d 	bl	8004cf8 <HAL_TIM_PWM_Init>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    err |= HAL_TIM_PWM_Init(&htim3);
 8001fcc:	4845      	ldr	r0, [pc, #276]	@ (80020e4 <MX_TIM3_Init+0x1ac>)
 8001fce:	f002 fe93 	bl	8004cf8 <HAL_TIM_PWM_Init>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61fb      	str	r3, [r7, #28]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	623b      	str	r3, [r7, #32]

    err |= HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 8001fe8:	f107 031c 	add.w	r3, r7, #28
 8001fec:	4619      	mov	r1, r3
 8001fee:	483d      	ldr	r0, [pc, #244]	@ (80020e4 <MX_TIM3_Init+0x1ac>)
 8001ff0:	f003 fd58 	bl	8005aa4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002002:	2360      	movs	r3, #96	@ 0x60
 8002004:	603b      	str	r3, [r7, #0]
    sConfigOC.Pulse = 0;
 8002006:	2300      	movs	r3, #0
 8002008:	607b      	str	r3, [r7, #4]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800200a:	2300      	movs	r3, #0
 800200c:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800200e:	2300      	movs	r3, #0
 8002010:	613b      	str	r3, [r7, #16]

    err |= HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 8002012:	463b      	mov	r3, r7
 8002014:	2200      	movs	r2, #0
 8002016:	4619      	mov	r1, r3
 8002018:	4832      	ldr	r0, [pc, #200]	@ (80020e4 <MX_TIM3_Init+0x1ac>)
 800201a:	f003 f875 	bl	8005108 <HAL_TIM_PWM_ConfigChannel>
 800201e:	4603      	mov	r3, r0
 8002020:	461a      	mov	r2, r3
 8002022:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002026:	4313      	orrs	r3, r2
 8002028:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    err |= HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2);
 800202c:	463b      	mov	r3, r7
 800202e:	2204      	movs	r2, #4
 8002030:	4619      	mov	r1, r3
 8002032:	482c      	ldr	r0, [pc, #176]	@ (80020e4 <MX_TIM3_Init+0x1ac>)
 8002034:	f003 f868 	bl	8005108 <HAL_TIM_PWM_ConfigChannel>
 8002038:	4603      	mov	r3, r0
 800203a:	461a      	mov	r2, r3
 800203c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002040:	4313      	orrs	r3, r2
 8002042:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    err |= HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3);
 8002046:	463b      	mov	r3, r7
 8002048:	2208      	movs	r2, #8
 800204a:	4619      	mov	r1, r3
 800204c:	4825      	ldr	r0, [pc, #148]	@ (80020e4 <MX_TIM3_Init+0x1ac>)
 800204e:	f003 f85b 	bl	8005108 <HAL_TIM_PWM_ConfigChannel>
 8002052:	4603      	mov	r3, r0
 8002054:	461a      	mov	r2, r3
 8002056:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800205a:	4313      	orrs	r3, r2
 800205c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    err |= HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4);
 8002060:	463b      	mov	r3, r7
 8002062:	220c      	movs	r2, #12
 8002064:	4619      	mov	r1, r3
 8002066:	481f      	ldr	r0, [pc, #124]	@ (80020e4 <MX_TIM3_Init+0x1ac>)
 8002068:	f003 f84e 	bl	8005108 <HAL_TIM_PWM_ConfigChannel>
 800206c:	4603      	mov	r3, r0
 800206e:	461a      	mov	r2, r3
 8002070:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002074:	4313      	orrs	r3, r2
 8002076:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    HAL_TIM_MspPostInit(&htim3);
 800207a:	481a      	ldr	r0, [pc, #104]	@ (80020e4 <MX_TIM3_Init+0x1ac>)
 800207c:	f7ff f90e 	bl	800129c <HAL_TIM_MspPostInit>

    err |= HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002080:	2100      	movs	r1, #0
 8002082:	4818      	ldr	r0, [pc, #96]	@ (80020e4 <MX_TIM3_Init+0x1ac>)
 8002084:	f002 fe88 	bl	8004d98 <HAL_TIM_PWM_Start>
 8002088:	4603      	mov	r3, r0
 800208a:	461a      	mov	r2, r3
 800208c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002090:	4313      	orrs	r3, r2
 8002092:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    err |= HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002096:	2104      	movs	r1, #4
 8002098:	4812      	ldr	r0, [pc, #72]	@ (80020e4 <MX_TIM3_Init+0x1ac>)
 800209a:	f002 fe7d 	bl	8004d98 <HAL_TIM_PWM_Start>
 800209e:	4603      	mov	r3, r0
 80020a0:	461a      	mov	r2, r3
 80020a2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80020a6:	4313      	orrs	r3, r2
 80020a8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    err |= HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80020ac:	2108      	movs	r1, #8
 80020ae:	480d      	ldr	r0, [pc, #52]	@ (80020e4 <MX_TIM3_Init+0x1ac>)
 80020b0:	f002 fe72 	bl	8004d98 <HAL_TIM_PWM_Start>
 80020b4:	4603      	mov	r3, r0
 80020b6:	461a      	mov	r2, r3
 80020b8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80020bc:	4313      	orrs	r3, r2
 80020be:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    err |= HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80020c2:	210c      	movs	r1, #12
 80020c4:	4807      	ldr	r0, [pc, #28]	@ (80020e4 <MX_TIM3_Init+0x1ac>)
 80020c6:	f002 fe67 	bl	8004d98 <HAL_TIM_PWM_Start>
 80020ca:	4603      	mov	r3, r0
 80020cc:	461a      	mov	r2, r3
 80020ce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80020d2:	4313      	orrs	r3, r2
 80020d4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    return err;
 80020d8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3738      	adds	r7, #56	@ 0x38
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	200002cc 	.word	0x200002cc
 80020e8:	40000400 	.word	0x40000400

080020ec <MX_TIM10_Init>:

/* TIM10 init function */
static HAL_StatusTypeDef MX_TIM10_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af00      	add	r7, sp, #0

    TIM_OC_InitTypeDef sConfigOC = {0};
 80020f2:	463b      	mov	r3, r7
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	611a      	str	r2, [r3, #16]
 8002100:	615a      	str	r2, [r3, #20]
 8002102:	619a      	str	r2, [r3, #24]

    htim10.Instance = TIM10;
 8002104:	4b21      	ldr	r3, [pc, #132]	@ (800218c <MX_TIM10_Init+0xa0>)
 8002106:	4a22      	ldr	r2, [pc, #136]	@ (8002190 <MX_TIM10_Init+0xa4>)
 8002108:	601a      	str	r2, [r3, #0]
    htim10.Init.Prescaler = 8 - 1;
 800210a:	4b20      	ldr	r3, [pc, #128]	@ (800218c <MX_TIM10_Init+0xa0>)
 800210c:	2207      	movs	r2, #7
 800210e:	605a      	str	r2, [r3, #4]
    htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002110:	4b1e      	ldr	r3, [pc, #120]	@ (800218c <MX_TIM10_Init+0xa0>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]
    htim10.Init.Period = 100 - 1;
 8002116:	4b1d      	ldr	r3, [pc, #116]	@ (800218c <MX_TIM10_Init+0xa0>)
 8002118:	2263      	movs	r2, #99	@ 0x63
 800211a:	60da      	str	r2, [r3, #12]
    htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800211c:	4b1b      	ldr	r3, [pc, #108]	@ (800218c <MX_TIM10_Init+0xa0>)
 800211e:	2200      	movs	r2, #0
 8002120:	611a      	str	r2, [r3, #16]
    htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002122:	4b1a      	ldr	r3, [pc, #104]	@ (800218c <MX_TIM10_Init+0xa0>)
 8002124:	2200      	movs	r2, #0
 8002126:	619a      	str	r2, [r3, #24]

    HAL_StatusTypeDef err = HAL_TIM_Base_Init(&htim10);
 8002128:	4818      	ldr	r0, [pc, #96]	@ (800218c <MX_TIM10_Init+0xa0>)
 800212a:	f002 fd25 	bl	8004b78 <HAL_TIM_Base_Init>
 800212e:	4603      	mov	r3, r0
 8002130:	77fb      	strb	r3, [r7, #31]
    err |= HAL_TIM_PWM_Init(&htim10);
 8002132:	4816      	ldr	r0, [pc, #88]	@ (800218c <MX_TIM10_Init+0xa0>)
 8002134:	f002 fde0 	bl	8004cf8 <HAL_TIM_PWM_Init>
 8002138:	4603      	mov	r3, r0
 800213a:	461a      	mov	r2, r3
 800213c:	7ffb      	ldrb	r3, [r7, #31]
 800213e:	4313      	orrs	r3, r2
 8002140:	77fb      	strb	r3, [r7, #31]
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002142:	2360      	movs	r3, #96	@ 0x60
 8002144:	603b      	str	r3, [r7, #0]
    sConfigOC.Pulse = 0;
 8002146:	2300      	movs	r3, #0
 8002148:	607b      	str	r3, [r7, #4]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800214a:	2300      	movs	r3, #0
 800214c:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800214e:	2300      	movs	r3, #0
 8002150:	613b      	str	r3, [r7, #16]

    err |= HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1);
 8002152:	463b      	mov	r3, r7
 8002154:	2200      	movs	r2, #0
 8002156:	4619      	mov	r1, r3
 8002158:	480c      	ldr	r0, [pc, #48]	@ (800218c <MX_TIM10_Init+0xa0>)
 800215a:	f002 ffd5 	bl	8005108 <HAL_TIM_PWM_ConfigChannel>
 800215e:	4603      	mov	r3, r0
 8002160:	461a      	mov	r2, r3
 8002162:	7ffb      	ldrb	r3, [r7, #31]
 8002164:	4313      	orrs	r3, r2
 8002166:	77fb      	strb	r3, [r7, #31]
    HAL_TIM_MspPostInit(&htim10);
 8002168:	4808      	ldr	r0, [pc, #32]	@ (800218c <MX_TIM10_Init+0xa0>)
 800216a:	f7ff f897 	bl	800129c <HAL_TIM_MspPostInit>
    err |= HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 800216e:	2100      	movs	r1, #0
 8002170:	4806      	ldr	r0, [pc, #24]	@ (800218c <MX_TIM10_Init+0xa0>)
 8002172:	f002 fe11 	bl	8004d98 <HAL_TIM_PWM_Start>
 8002176:	4603      	mov	r3, r0
 8002178:	461a      	mov	r2, r3
 800217a:	7ffb      	ldrb	r3, [r7, #31]
 800217c:	4313      	orrs	r3, r2
 800217e:	77fb      	strb	r3, [r7, #31]

    return err;
 8002180:	7ffb      	ldrb	r3, [r7, #31]
}
 8002182:	4618      	mov	r0, r3
 8002184:	3720      	adds	r7, #32
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000314 	.word	0x20000314
 8002190:	40014400 	.word	0x40014400

08002194 <MX_TIM11_Init>:

/* TIM11 init function */
static HAL_StatusTypeDef MX_TIM11_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b088      	sub	sp, #32
 8002198:	af00      	add	r7, sp, #0
    TIM_OC_InitTypeDef sConfigOC = {0};
 800219a:	463b      	mov	r3, r7
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	611a      	str	r2, [r3, #16]
 80021a8:	615a      	str	r2, [r3, #20]
 80021aa:	619a      	str	r2, [r3, #24]

    htim11.Instance = TIM11;
 80021ac:	4b21      	ldr	r3, [pc, #132]	@ (8002234 <MX_TIM11_Init+0xa0>)
 80021ae:	4a22      	ldr	r2, [pc, #136]	@ (8002238 <MX_TIM11_Init+0xa4>)
 80021b0:	601a      	str	r2, [r3, #0]
    htim11.Init.Prescaler = 0;
 80021b2:	4b20      	ldr	r3, [pc, #128]	@ (8002234 <MX_TIM11_Init+0xa0>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	605a      	str	r2, [r3, #4]
    htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002234 <MX_TIM11_Init+0xa0>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	609a      	str	r2, [r3, #8]
    htim11.Init.Period = 65535;
 80021be:	4b1d      	ldr	r3, [pc, #116]	@ (8002234 <MX_TIM11_Init+0xa0>)
 80021c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021c4:	60da      	str	r2, [r3, #12]
    htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002234 <MX_TIM11_Init+0xa0>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	611a      	str	r2, [r3, #16]
    htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021cc:	4b19      	ldr	r3, [pc, #100]	@ (8002234 <MX_TIM11_Init+0xa0>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	619a      	str	r2, [r3, #24]
    HAL_StatusTypeDef err = HAL_TIM_Base_Init(&htim11);
 80021d2:	4818      	ldr	r0, [pc, #96]	@ (8002234 <MX_TIM11_Init+0xa0>)
 80021d4:	f002 fcd0 	bl	8004b78 <HAL_TIM_Base_Init>
 80021d8:	4603      	mov	r3, r0
 80021da:	77fb      	strb	r3, [r7, #31]
    err |= HAL_TIM_PWM_Init(&htim11);
 80021dc:	4815      	ldr	r0, [pc, #84]	@ (8002234 <MX_TIM11_Init+0xa0>)
 80021de:	f002 fd8b 	bl	8004cf8 <HAL_TIM_PWM_Init>
 80021e2:	4603      	mov	r3, r0
 80021e4:	461a      	mov	r2, r3
 80021e6:	7ffb      	ldrb	r3, [r7, #31]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	77fb      	strb	r3, [r7, #31]
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021ec:	2360      	movs	r3, #96	@ 0x60
 80021ee:	603b      	str	r3, [r7, #0]
    sConfigOC.Pulse = 0;
 80021f0:	2300      	movs	r3, #0
 80021f2:	607b      	str	r3, [r7, #4]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021f4:	2300      	movs	r3, #0
 80021f6:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021f8:	2300      	movs	r3, #0
 80021fa:	613b      	str	r3, [r7, #16]
    err |= HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1);
 80021fc:	463b      	mov	r3, r7
 80021fe:	2200      	movs	r2, #0
 8002200:	4619      	mov	r1, r3
 8002202:	480c      	ldr	r0, [pc, #48]	@ (8002234 <MX_TIM11_Init+0xa0>)
 8002204:	f002 ff80 	bl	8005108 <HAL_TIM_PWM_ConfigChannel>
 8002208:	4603      	mov	r3, r0
 800220a:	461a      	mov	r2, r3
 800220c:	7ffb      	ldrb	r3, [r7, #31]
 800220e:	4313      	orrs	r3, r2
 8002210:	77fb      	strb	r3, [r7, #31]
    HAL_TIM_MspPostInit(&htim11);
 8002212:	4808      	ldr	r0, [pc, #32]	@ (8002234 <MX_TIM11_Init+0xa0>)
 8002214:	f7ff f842 	bl	800129c <HAL_TIM_MspPostInit>
    err |= HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8002218:	2100      	movs	r1, #0
 800221a:	4806      	ldr	r0, [pc, #24]	@ (8002234 <MX_TIM11_Init+0xa0>)
 800221c:	f002 fdbc 	bl	8004d98 <HAL_TIM_PWM_Start>
 8002220:	4603      	mov	r3, r0
 8002222:	461a      	mov	r2, r3
 8002224:	7ffb      	ldrb	r3, [r7, #31]
 8002226:	4313      	orrs	r3, r2
 8002228:	77fb      	strb	r3, [r7, #31]
    return err;
 800222a:	7ffb      	ldrb	r3, [r7, #31]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3720      	adds	r7, #32
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	2000035c 	.word	0x2000035c
 8002238:	40014800 	.word	0x40014800

0800223c <MX_TIM12_Init>:
/* TIM12 init function */
static HAL_StatusTypeDef MX_TIM12_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b088      	sub	sp, #32
 8002240:	af00      	add	r7, sp, #0
    TIM_OC_InitTypeDef sConfigOC = {0};
 8002242:	463b      	mov	r3, r7
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	611a      	str	r2, [r3, #16]
 8002250:	615a      	str	r2, [r3, #20]
 8002252:	619a      	str	r2, [r3, #24]

    htim12.Instance = TIM12;
 8002254:	4b27      	ldr	r3, [pc, #156]	@ (80022f4 <MX_TIM12_Init+0xb8>)
 8002256:	4a28      	ldr	r2, [pc, #160]	@ (80022f8 <MX_TIM12_Init+0xbc>)
 8002258:	601a      	str	r2, [r3, #0]
    htim12.Init.Prescaler = 4 - 2;
 800225a:	4b26      	ldr	r3, [pc, #152]	@ (80022f4 <MX_TIM12_Init+0xb8>)
 800225c:	2202      	movs	r2, #2
 800225e:	605a      	str	r2, [r3, #4]
    htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002260:	4b24      	ldr	r3, [pc, #144]	@ (80022f4 <MX_TIM12_Init+0xb8>)
 8002262:	2200      	movs	r2, #0
 8002264:	609a      	str	r2, [r3, #8]
    htim12.Init.Period = 100 - 1;
 8002266:	4b23      	ldr	r3, [pc, #140]	@ (80022f4 <MX_TIM12_Init+0xb8>)
 8002268:	2263      	movs	r2, #99	@ 0x63
 800226a:	60da      	str	r2, [r3, #12]
    htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800226c:	4b21      	ldr	r3, [pc, #132]	@ (80022f4 <MX_TIM12_Init+0xb8>)
 800226e:	2200      	movs	r2, #0
 8002270:	611a      	str	r2, [r3, #16]
    htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002272:	4b20      	ldr	r3, [pc, #128]	@ (80022f4 <MX_TIM12_Init+0xb8>)
 8002274:	2200      	movs	r2, #0
 8002276:	619a      	str	r2, [r3, #24]
    HAL_StatusTypeDef err = HAL_TIM_PWM_Init(&htim12);
 8002278:	481e      	ldr	r0, [pc, #120]	@ (80022f4 <MX_TIM12_Init+0xb8>)
 800227a:	f002 fd3d 	bl	8004cf8 <HAL_TIM_PWM_Init>
 800227e:	4603      	mov	r3, r0
 8002280:	77fb      	strb	r3, [r7, #31]
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002282:	2360      	movs	r3, #96	@ 0x60
 8002284:	603b      	str	r3, [r7, #0]
    sConfigOC.Pulse = 0;
 8002286:	2300      	movs	r3, #0
 8002288:	607b      	str	r3, [r7, #4]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800228a:	2300      	movs	r3, #0
 800228c:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800228e:	2300      	movs	r3, #0
 8002290:	613b      	str	r3, [r7, #16]

    err |= HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1);
 8002292:	463b      	mov	r3, r7
 8002294:	2200      	movs	r2, #0
 8002296:	4619      	mov	r1, r3
 8002298:	4816      	ldr	r0, [pc, #88]	@ (80022f4 <MX_TIM12_Init+0xb8>)
 800229a:	f002 ff35 	bl	8005108 <HAL_TIM_PWM_ConfigChannel>
 800229e:	4603      	mov	r3, r0
 80022a0:	461a      	mov	r2, r3
 80022a2:	7ffb      	ldrb	r3, [r7, #31]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	77fb      	strb	r3, [r7, #31]
    err |= HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2);
 80022a8:	463b      	mov	r3, r7
 80022aa:	2204      	movs	r2, #4
 80022ac:	4619      	mov	r1, r3
 80022ae:	4811      	ldr	r0, [pc, #68]	@ (80022f4 <MX_TIM12_Init+0xb8>)
 80022b0:	f002 ff2a 	bl	8005108 <HAL_TIM_PWM_ConfigChannel>
 80022b4:	4603      	mov	r3, r0
 80022b6:	461a      	mov	r2, r3
 80022b8:	7ffb      	ldrb	r3, [r7, #31]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	77fb      	strb	r3, [r7, #31]

    HAL_TIM_MspPostInit(&htim12);
 80022be:	480d      	ldr	r0, [pc, #52]	@ (80022f4 <MX_TIM12_Init+0xb8>)
 80022c0:	f7fe ffec 	bl	800129c <HAL_TIM_MspPostInit>
    err |= HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 80022c4:	2100      	movs	r1, #0
 80022c6:	480b      	ldr	r0, [pc, #44]	@ (80022f4 <MX_TIM12_Init+0xb8>)
 80022c8:	f002 fd66 	bl	8004d98 <HAL_TIM_PWM_Start>
 80022cc:	4603      	mov	r3, r0
 80022ce:	461a      	mov	r2, r3
 80022d0:	7ffb      	ldrb	r3, [r7, #31]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	77fb      	strb	r3, [r7, #31]
    err |= HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 80022d6:	2104      	movs	r1, #4
 80022d8:	4806      	ldr	r0, [pc, #24]	@ (80022f4 <MX_TIM12_Init+0xb8>)
 80022da:	f002 fd5d 	bl	8004d98 <HAL_TIM_PWM_Start>
 80022de:	4603      	mov	r3, r0
 80022e0:	461a      	mov	r2, r3
 80022e2:	7ffb      	ldrb	r3, [r7, #31]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	77fb      	strb	r3, [r7, #31]
    return err;
 80022e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3720      	adds	r7, #32
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	200003a4 	.word	0x200003a4
 80022f8:	40001800 	.word	0x40001800

080022fc <MX_TIM13_Init>:
/* TIM13 init function */
static HAL_StatusTypeDef MX_TIM13_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b088      	sub	sp, #32
 8002300:	af00      	add	r7, sp, #0
    TIM_OC_InitTypeDef sConfigOC = {0};
 8002302:	463b      	mov	r3, r7
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	609a      	str	r2, [r3, #8]
 800230c:	60da      	str	r2, [r3, #12]
 800230e:	611a      	str	r2, [r3, #16]
 8002310:	615a      	str	r2, [r3, #20]
 8002312:	619a      	str	r2, [r3, #24]

    htim13.Instance = TIM13;
 8002314:	4b21      	ldr	r3, [pc, #132]	@ (800239c <MX_TIM13_Init+0xa0>)
 8002316:	4a22      	ldr	r2, [pc, #136]	@ (80023a0 <MX_TIM13_Init+0xa4>)
 8002318:	601a      	str	r2, [r3, #0]
    htim13.Init.Prescaler = 4 - 1;
 800231a:	4b20      	ldr	r3, [pc, #128]	@ (800239c <MX_TIM13_Init+0xa0>)
 800231c:	2203      	movs	r2, #3
 800231e:	605a      	str	r2, [r3, #4]
    htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002320:	4b1e      	ldr	r3, [pc, #120]	@ (800239c <MX_TIM13_Init+0xa0>)
 8002322:	2200      	movs	r2, #0
 8002324:	609a      	str	r2, [r3, #8]
    htim13.Init.Period = 100 - 1;
 8002326:	4b1d      	ldr	r3, [pc, #116]	@ (800239c <MX_TIM13_Init+0xa0>)
 8002328:	2263      	movs	r2, #99	@ 0x63
 800232a:	60da      	str	r2, [r3, #12]
    htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800232c:	4b1b      	ldr	r3, [pc, #108]	@ (800239c <MX_TIM13_Init+0xa0>)
 800232e:	2200      	movs	r2, #0
 8002330:	611a      	str	r2, [r3, #16]
    htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002332:	4b1a      	ldr	r3, [pc, #104]	@ (800239c <MX_TIM13_Init+0xa0>)
 8002334:	2200      	movs	r2, #0
 8002336:	619a      	str	r2, [r3, #24]

    HAL_StatusTypeDef err = HAL_TIM_Base_Init(&htim13);
 8002338:	4818      	ldr	r0, [pc, #96]	@ (800239c <MX_TIM13_Init+0xa0>)
 800233a:	f002 fc1d 	bl	8004b78 <HAL_TIM_Base_Init>
 800233e:	4603      	mov	r3, r0
 8002340:	77fb      	strb	r3, [r7, #31]
    err |= HAL_TIM_PWM_Init(&htim13);
 8002342:	4816      	ldr	r0, [pc, #88]	@ (800239c <MX_TIM13_Init+0xa0>)
 8002344:	f002 fcd8 	bl	8004cf8 <HAL_TIM_PWM_Init>
 8002348:	4603      	mov	r3, r0
 800234a:	461a      	mov	r2, r3
 800234c:	7ffb      	ldrb	r3, [r7, #31]
 800234e:	4313      	orrs	r3, r2
 8002350:	77fb      	strb	r3, [r7, #31]

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002352:	2360      	movs	r3, #96	@ 0x60
 8002354:	603b      	str	r3, [r7, #0]
    sConfigOC.Pulse = 0;
 8002356:	2300      	movs	r3, #0
 8002358:	607b      	str	r3, [r7, #4]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800235a:	2300      	movs	r3, #0
 800235c:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800235e:	2300      	movs	r3, #0
 8002360:	613b      	str	r3, [r7, #16]

    err |= HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1);
 8002362:	463b      	mov	r3, r7
 8002364:	2200      	movs	r2, #0
 8002366:	4619      	mov	r1, r3
 8002368:	480c      	ldr	r0, [pc, #48]	@ (800239c <MX_TIM13_Init+0xa0>)
 800236a:	f002 fecd 	bl	8005108 <HAL_TIM_PWM_ConfigChannel>
 800236e:	4603      	mov	r3, r0
 8002370:	461a      	mov	r2, r3
 8002372:	7ffb      	ldrb	r3, [r7, #31]
 8002374:	4313      	orrs	r3, r2
 8002376:	77fb      	strb	r3, [r7, #31]

    HAL_TIM_MspPostInit(&htim13);
 8002378:	4808      	ldr	r0, [pc, #32]	@ (800239c <MX_TIM13_Init+0xa0>)
 800237a:	f7fe ff8f 	bl	800129c <HAL_TIM_MspPostInit>
    err |= HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 800237e:	2100      	movs	r1, #0
 8002380:	4806      	ldr	r0, [pc, #24]	@ (800239c <MX_TIM13_Init+0xa0>)
 8002382:	f002 fd09 	bl	8004d98 <HAL_TIM_PWM_Start>
 8002386:	4603      	mov	r3, r0
 8002388:	461a      	mov	r2, r3
 800238a:	7ffb      	ldrb	r3, [r7, #31]
 800238c:	4313      	orrs	r3, r2
 800238e:	77fb      	strb	r3, [r7, #31]
    return err;
 8002390:	7ffb      	ldrb	r3, [r7, #31]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3720      	adds	r7, #32
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	200003ec 	.word	0x200003ec
 80023a0:	40001c00 	.word	0x40001c00

080023a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023a8:	4b0e      	ldr	r3, [pc, #56]	@ (80023e4 <HAL_Init+0x40>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a0d      	ldr	r2, [pc, #52]	@ (80023e4 <HAL_Init+0x40>)
 80023ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023b4:	4b0b      	ldr	r3, [pc, #44]	@ (80023e4 <HAL_Init+0x40>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a0a      	ldr	r2, [pc, #40]	@ (80023e4 <HAL_Init+0x40>)
 80023ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023c0:	4b08      	ldr	r3, [pc, #32]	@ (80023e4 <HAL_Init+0x40>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a07      	ldr	r2, [pc, #28]	@ (80023e4 <HAL_Init+0x40>)
 80023c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023cc:	2003      	movs	r0, #3
 80023ce:	f000 fb5e 	bl	8002a8e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023d2:	200f      	movs	r0, #15
 80023d4:	f7fe fd78 	bl	8000ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023d8:	f7fe fd4a 	bl	8000e70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40023c00 	.word	0x40023c00

080023e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023ec:	4b06      	ldr	r3, [pc, #24]	@ (8002408 <HAL_IncTick+0x20>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	461a      	mov	r2, r3
 80023f2:	4b06      	ldr	r3, [pc, #24]	@ (800240c <HAL_IncTick+0x24>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4413      	add	r3, r2
 80023f8:	4a04      	ldr	r2, [pc, #16]	@ (800240c <HAL_IncTick+0x24>)
 80023fa:	6013      	str	r3, [r2, #0]
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	20000008 	.word	0x20000008
 800240c:	200004a8 	.word	0x200004a8

08002410 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  return uwTick;
 8002414:	4b03      	ldr	r3, [pc, #12]	@ (8002424 <HAL_GetTick+0x14>)
 8002416:	681b      	ldr	r3, [r3, #0]
}
 8002418:	4618      	mov	r0, r3
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	200004a8 	.word	0x200004a8

08002428 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002430:	f7ff ffee 	bl	8002410 <HAL_GetTick>
 8002434:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002440:	d005      	beq.n	800244e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002442:	4b0a      	ldr	r3, [pc, #40]	@ (800246c <HAL_Delay+0x44>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	461a      	mov	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	4413      	add	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800244e:	bf00      	nop
 8002450:	f7ff ffde 	bl	8002410 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	429a      	cmp	r2, r3
 800245e:	d8f7      	bhi.n	8002450 <HAL_Delay+0x28>
  {
  }
}
 8002460:	bf00      	nop
 8002462:	bf00      	nop
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20000008 	.word	0x20000008

08002470 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002478:	2300      	movs	r3, #0
 800247a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e033      	b.n	80024ee <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248a:	2b00      	cmp	r3, #0
 800248c:	d109      	bne.n	80024a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7fe f8f0 	bl	8000674 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a6:	f003 0310 	and.w	r3, r3, #16
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d118      	bne.n	80024e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80024b6:	f023 0302 	bic.w	r3, r3, #2
 80024ba:	f043 0202 	orr.w	r2, r3, #2
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f93a 	bl	800273c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d2:	f023 0303 	bic.w	r3, r3, #3
 80024d6:	f043 0201 	orr.w	r2, r3, #1
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	641a      	str	r2, [r3, #64]	@ 0x40
 80024de:	e001      	b.n	80024e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80024ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
	...

080024f8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002502:	2300      	movs	r3, #0
 8002504:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800250c:	2b01      	cmp	r3, #1
 800250e:	d101      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x1c>
 8002510:	2302      	movs	r3, #2
 8002512:	e105      	b.n	8002720 <HAL_ADC_ConfigChannel+0x228>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2b09      	cmp	r3, #9
 8002522:	d925      	bls.n	8002570 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68d9      	ldr	r1, [r3, #12]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	b29b      	uxth	r3, r3
 8002530:	461a      	mov	r2, r3
 8002532:	4613      	mov	r3, r2
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	4413      	add	r3, r2
 8002538:	3b1e      	subs	r3, #30
 800253a:	2207      	movs	r2, #7
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	43da      	mvns	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	400a      	ands	r2, r1
 8002548:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68d9      	ldr	r1, [r3, #12]
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	b29b      	uxth	r3, r3
 800255a:	4618      	mov	r0, r3
 800255c:	4603      	mov	r3, r0
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	4403      	add	r3, r0
 8002562:	3b1e      	subs	r3, #30
 8002564:	409a      	lsls	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	60da      	str	r2, [r3, #12]
 800256e:	e022      	b.n	80025b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6919      	ldr	r1, [r3, #16]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	b29b      	uxth	r3, r3
 800257c:	461a      	mov	r2, r3
 800257e:	4613      	mov	r3, r2
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	4413      	add	r3, r2
 8002584:	2207      	movs	r2, #7
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43da      	mvns	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	400a      	ands	r2, r1
 8002592:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6919      	ldr	r1, [r3, #16]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	4618      	mov	r0, r3
 80025a6:	4603      	mov	r3, r0
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	4403      	add	r3, r0
 80025ac:	409a      	lsls	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2b06      	cmp	r3, #6
 80025bc:	d824      	bhi.n	8002608 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	4613      	mov	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	3b05      	subs	r3, #5
 80025d0:	221f      	movs	r2, #31
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43da      	mvns	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	400a      	ands	r2, r1
 80025de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	4618      	mov	r0, r3
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	4613      	mov	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	3b05      	subs	r3, #5
 80025fa:	fa00 f203 	lsl.w	r2, r0, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	635a      	str	r2, [r3, #52]	@ 0x34
 8002606:	e04c      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	2b0c      	cmp	r3, #12
 800260e:	d824      	bhi.n	800265a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	4613      	mov	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	3b23      	subs	r3, #35	@ 0x23
 8002622:	221f      	movs	r2, #31
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	43da      	mvns	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	400a      	ands	r2, r1
 8002630:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	b29b      	uxth	r3, r3
 800263e:	4618      	mov	r0, r3
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	3b23      	subs	r3, #35	@ 0x23
 800264c:	fa00 f203 	lsl.w	r2, r0, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	430a      	orrs	r2, r1
 8002656:	631a      	str	r2, [r3, #48]	@ 0x30
 8002658:	e023      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	3b41      	subs	r3, #65	@ 0x41
 800266c:	221f      	movs	r2, #31
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43da      	mvns	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	400a      	ands	r2, r1
 800267a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	b29b      	uxth	r3, r3
 8002688:	4618      	mov	r0, r3
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	4613      	mov	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	3b41      	subs	r3, #65	@ 0x41
 8002696:	fa00 f203 	lsl.w	r2, r0, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	430a      	orrs	r2, r1
 80026a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026a2:	4b22      	ldr	r3, [pc, #136]	@ (800272c <HAL_ADC_ConfigChannel+0x234>)
 80026a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a21      	ldr	r2, [pc, #132]	@ (8002730 <HAL_ADC_ConfigChannel+0x238>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d109      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x1cc>
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2b12      	cmp	r3, #18
 80026b6:	d105      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a19      	ldr	r2, [pc, #100]	@ (8002730 <HAL_ADC_ConfigChannel+0x238>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d123      	bne.n	8002716 <HAL_ADC_ConfigChannel+0x21e>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2b10      	cmp	r3, #16
 80026d4:	d003      	beq.n	80026de <HAL_ADC_ConfigChannel+0x1e6>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2b11      	cmp	r3, #17
 80026dc:	d11b      	bne.n	8002716 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2b10      	cmp	r3, #16
 80026f0:	d111      	bne.n	8002716 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026f2:	4b10      	ldr	r3, [pc, #64]	@ (8002734 <HAL_ADC_ConfigChannel+0x23c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a10      	ldr	r2, [pc, #64]	@ (8002738 <HAL_ADC_ConfigChannel+0x240>)
 80026f8:	fba2 2303 	umull	r2, r3, r2, r3
 80026fc:	0c9a      	lsrs	r2, r3, #18
 80026fe:	4613      	mov	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002708:	e002      	b.n	8002710 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	3b01      	subs	r3, #1
 800270e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1f9      	bne.n	800270a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	40012300 	.word	0x40012300
 8002730:	40012000 	.word	0x40012000
 8002734:	20000000 	.word	0x20000000
 8002738:	431bde83 	.word	0x431bde83

0800273c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002744:	4b79      	ldr	r3, [pc, #484]	@ (800292c <ADC_Init+0x1f0>)
 8002746:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	431a      	orrs	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002770:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6859      	ldr	r1, [r3, #4]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	021a      	lsls	r2, r3, #8
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002794:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6859      	ldr	r1, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689a      	ldr	r2, [r3, #8]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6899      	ldr	r1, [r3, #8]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68da      	ldr	r2, [r3, #12]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ce:	4a58      	ldr	r2, [pc, #352]	@ (8002930 <ADC_Init+0x1f4>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d022      	beq.n	800281a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689a      	ldr	r2, [r3, #8]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6899      	ldr	r1, [r3, #8]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002804:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6899      	ldr	r1, [r3, #8]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	430a      	orrs	r2, r1
 8002816:	609a      	str	r2, [r3, #8]
 8002818:	e00f      	b.n	800283a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002828:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002838:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 0202 	bic.w	r2, r2, #2
 8002848:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6899      	ldr	r1, [r3, #8]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	7e1b      	ldrb	r3, [r3, #24]
 8002854:	005a      	lsls	r2, r3, #1
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	430a      	orrs	r2, r1
 800285c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d01b      	beq.n	80028a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002876:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002886:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6859      	ldr	r1, [r3, #4]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002892:	3b01      	subs	r3, #1
 8002894:	035a      	lsls	r2, r3, #13
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	e007      	b.n	80028b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028ae:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80028be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	3b01      	subs	r3, #1
 80028cc:	051a      	lsls	r2, r3, #20
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80028e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6899      	ldr	r1, [r3, #8]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80028f2:	025a      	lsls	r2, r3, #9
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689a      	ldr	r2, [r3, #8]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800290a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6899      	ldr	r1, [r3, #8]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	029a      	lsls	r2, r3, #10
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	609a      	str	r2, [r3, #8]
}
 8002920:	bf00      	nop
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	40012300 	.word	0x40012300
 8002930:	0f000001 	.word	0x0f000001

08002934 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f003 0307 	and.w	r3, r3, #7
 8002942:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002944:	4b0c      	ldr	r3, [pc, #48]	@ (8002978 <__NVIC_SetPriorityGrouping+0x44>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002950:	4013      	ands	r3, r2
 8002952:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800295c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002960:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002964:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002966:	4a04      	ldr	r2, [pc, #16]	@ (8002978 <__NVIC_SetPriorityGrouping+0x44>)
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	60d3      	str	r3, [r2, #12]
}
 800296c:	bf00      	nop
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	e000ed00 	.word	0xe000ed00

0800297c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002980:	4b04      	ldr	r3, [pc, #16]	@ (8002994 <__NVIC_GetPriorityGrouping+0x18>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	0a1b      	lsrs	r3, r3, #8
 8002986:	f003 0307 	and.w	r3, r3, #7
}
 800298a:	4618      	mov	r0, r3
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	e000ed00 	.word	0xe000ed00

08002998 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	4603      	mov	r3, r0
 80029a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	db0b      	blt.n	80029c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029aa:	79fb      	ldrb	r3, [r7, #7]
 80029ac:	f003 021f 	and.w	r2, r3, #31
 80029b0:	4907      	ldr	r1, [pc, #28]	@ (80029d0 <__NVIC_EnableIRQ+0x38>)
 80029b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b6:	095b      	lsrs	r3, r3, #5
 80029b8:	2001      	movs	r0, #1
 80029ba:	fa00 f202 	lsl.w	r2, r0, r2
 80029be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	e000e100 	.word	0xe000e100

080029d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	4603      	mov	r3, r0
 80029dc:	6039      	str	r1, [r7, #0]
 80029de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	db0a      	blt.n	80029fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	490c      	ldr	r1, [pc, #48]	@ (8002a20 <__NVIC_SetPriority+0x4c>)
 80029ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f2:	0112      	lsls	r2, r2, #4
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	440b      	add	r3, r1
 80029f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029fc:	e00a      	b.n	8002a14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	4908      	ldr	r1, [pc, #32]	@ (8002a24 <__NVIC_SetPriority+0x50>)
 8002a04:	79fb      	ldrb	r3, [r7, #7]
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	3b04      	subs	r3, #4
 8002a0c:	0112      	lsls	r2, r2, #4
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	440b      	add	r3, r1
 8002a12:	761a      	strb	r2, [r3, #24]
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	e000e100 	.word	0xe000e100
 8002a24:	e000ed00 	.word	0xe000ed00

08002a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b089      	sub	sp, #36	@ 0x24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	f1c3 0307 	rsb	r3, r3, #7
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	bf28      	it	cs
 8002a46:	2304      	movcs	r3, #4
 8002a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	2b06      	cmp	r3, #6
 8002a50:	d902      	bls.n	8002a58 <NVIC_EncodePriority+0x30>
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	3b03      	subs	r3, #3
 8002a56:	e000      	b.n	8002a5a <NVIC_EncodePriority+0x32>
 8002a58:	2300      	movs	r3, #0
 8002a5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	43da      	mvns	r2, r3
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	401a      	ands	r2, r3
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a70:	f04f 31ff 	mov.w	r1, #4294967295
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7a:	43d9      	mvns	r1, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a80:	4313      	orrs	r3, r2
         );
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3724      	adds	r7, #36	@ 0x24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr

08002a8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b082      	sub	sp, #8
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7ff ff4c 	bl	8002934 <__NVIC_SetPriorityGrouping>
}
 8002a9c:	bf00      	nop
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4603      	mov	r3, r0
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
 8002ab0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ab6:	f7ff ff61 	bl	800297c <__NVIC_GetPriorityGrouping>
 8002aba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	68b9      	ldr	r1, [r7, #8]
 8002ac0:	6978      	ldr	r0, [r7, #20]
 8002ac2:	f7ff ffb1 	bl	8002a28 <NVIC_EncodePriority>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002acc:	4611      	mov	r1, r2
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff ff80 	bl	80029d4 <__NVIC_SetPriority>
}
 8002ad4:	bf00      	nop
 8002ad6:	3718      	adds	r7, #24
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff ff54 	bl	8002998 <__NVIC_EnableIRQ>
}
 8002af0:	bf00      	nop
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b00:	2300      	movs	r3, #0
 8002b02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b04:	f7ff fc84 	bl	8002410 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e099      	b.n	8002c48 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2202      	movs	r2, #2
 8002b18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 0201 	bic.w	r2, r2, #1
 8002b32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b34:	e00f      	b.n	8002b56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b36:	f7ff fc6b 	bl	8002410 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b05      	cmp	r3, #5
 8002b42:	d908      	bls.n	8002b56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2220      	movs	r2, #32
 8002b48:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2203      	movs	r2, #3
 8002b4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e078      	b.n	8002c48 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1e8      	bne.n	8002b36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	4b38      	ldr	r3, [pc, #224]	@ (8002c50 <HAL_DMA_Init+0x158>)
 8002b70:	4013      	ands	r3, r2
 8002b72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bac:	2b04      	cmp	r3, #4
 8002bae:	d107      	bne.n	8002bc0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	f023 0307 	bic.w	r3, r3, #7
 8002bd6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d117      	bne.n	8002c1a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00e      	beq.n	8002c1a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 f9e9 	bl	8002fd4 <DMA_CheckFifoParam>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d008      	beq.n	8002c1a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2240      	movs	r2, #64	@ 0x40
 8002c0c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002c16:	2301      	movs	r3, #1
 8002c18:	e016      	b.n	8002c48 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f9a0 	bl	8002f68 <DMA_CalcBaseAndBitshift>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c30:	223f      	movs	r2, #63	@ 0x3f
 8002c32:	409a      	lsls	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3718      	adds	r7, #24
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	f010803f 	.word	0xf010803f

08002c54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c60:	4b8e      	ldr	r3, [pc, #568]	@ (8002e9c <HAL_DMA_IRQHandler+0x248>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a8e      	ldr	r2, [pc, #568]	@ (8002ea0 <HAL_DMA_IRQHandler+0x24c>)
 8002c66:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6a:	0a9b      	lsrs	r3, r3, #10
 8002c6c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c72:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c7e:	2208      	movs	r2, #8
 8002c80:	409a      	lsls	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	4013      	ands	r3, r2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d01a      	beq.n	8002cc0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d013      	beq.n	8002cc0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0204 	bic.w	r2, r2, #4
 8002ca6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cac:	2208      	movs	r2, #8
 8002cae:	409a      	lsls	r2, r3
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb8:	f043 0201 	orr.w	r2, r3, #1
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	409a      	lsls	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d012      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00b      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	409a      	lsls	r2, r3
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cee:	f043 0202 	orr.w	r2, r3, #2
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cfa:	2204      	movs	r2, #4
 8002cfc:	409a      	lsls	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	4013      	ands	r3, r2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d012      	beq.n	8002d2c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00b      	beq.n	8002d2c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d18:	2204      	movs	r2, #4
 8002d1a:	409a      	lsls	r2, r3
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d24:	f043 0204 	orr.w	r2, r3, #4
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d30:	2210      	movs	r2, #16
 8002d32:	409a      	lsls	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	4013      	ands	r3, r2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d043      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0308 	and.w	r3, r3, #8
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d03c      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d4e:	2210      	movs	r2, #16
 8002d50:	409a      	lsls	r2, r3
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d018      	beq.n	8002d96 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d108      	bne.n	8002d84 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d024      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	4798      	blx	r3
 8002d82:	e01f      	b.n	8002dc4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d01b      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	4798      	blx	r3
 8002d94:	e016      	b.n	8002dc4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d107      	bne.n	8002db4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 0208 	bic.w	r2, r2, #8
 8002db2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc8:	2220      	movs	r2, #32
 8002dca:	409a      	lsls	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 808f 	beq.w	8002ef4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0310 	and.w	r3, r3, #16
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 8087 	beq.w	8002ef4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dea:	2220      	movs	r2, #32
 8002dec:	409a      	lsls	r2, r3
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b05      	cmp	r3, #5
 8002dfc:	d136      	bne.n	8002e6c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0216 	bic.w	r2, r2, #22
 8002e0c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	695a      	ldr	r2, [r3, #20]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e1c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d103      	bne.n	8002e2e <HAL_DMA_IRQHandler+0x1da>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d007      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0208 	bic.w	r2, r2, #8
 8002e3c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e42:	223f      	movs	r2, #63	@ 0x3f
 8002e44:	409a      	lsls	r2, r3
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d07e      	beq.n	8002f60 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	4798      	blx	r3
        }
        return;
 8002e6a:	e079      	b.n	8002f60 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d01d      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10d      	bne.n	8002ea4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d031      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	4798      	blx	r3
 8002e98:	e02c      	b.n	8002ef4 <HAL_DMA_IRQHandler+0x2a0>
 8002e9a:	bf00      	nop
 8002e9c:	20000000 	.word	0x20000000
 8002ea0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d023      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	4798      	blx	r3
 8002eb4:	e01e      	b.n	8002ef4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10f      	bne.n	8002ee4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0210 	bic.w	r2, r2, #16
 8002ed2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d003      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d032      	beq.n	8002f62 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d022      	beq.n	8002f4e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2205      	movs	r2, #5
 8002f0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 0201 	bic.w	r2, r2, #1
 8002f1e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	3301      	adds	r3, #1
 8002f24:	60bb      	str	r3, [r7, #8]
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d307      	bcc.n	8002f3c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f2      	bne.n	8002f20 <HAL_DMA_IRQHandler+0x2cc>
 8002f3a:	e000      	b.n	8002f3e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f3c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d005      	beq.n	8002f62 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	4798      	blx	r3
 8002f5e:	e000      	b.n	8002f62 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f60:	bf00      	nop
    }
  }
}
 8002f62:	3718      	adds	r7, #24
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	3b10      	subs	r3, #16
 8002f78:	4a14      	ldr	r2, [pc, #80]	@ (8002fcc <DMA_CalcBaseAndBitshift+0x64>)
 8002f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7e:	091b      	lsrs	r3, r3, #4
 8002f80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f82:	4a13      	ldr	r2, [pc, #76]	@ (8002fd0 <DMA_CalcBaseAndBitshift+0x68>)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4413      	add	r3, r2
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2b03      	cmp	r3, #3
 8002f94:	d909      	bls.n	8002faa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002f9e:	f023 0303 	bic.w	r3, r3, #3
 8002fa2:	1d1a      	adds	r2, r3, #4
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	659a      	str	r2, [r3, #88]	@ 0x58
 8002fa8:	e007      	b.n	8002fba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002fb2:	f023 0303 	bic.w	r3, r3, #3
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	aaaaaaab 	.word	0xaaaaaaab
 8002fd0:	080074d0 	.word	0x080074d0

08002fd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d11f      	bne.n	800302e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2b03      	cmp	r3, #3
 8002ff2:	d856      	bhi.n	80030a2 <DMA_CheckFifoParam+0xce>
 8002ff4:	a201      	add	r2, pc, #4	@ (adr r2, 8002ffc <DMA_CheckFifoParam+0x28>)
 8002ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ffa:	bf00      	nop
 8002ffc:	0800300d 	.word	0x0800300d
 8003000:	0800301f 	.word	0x0800301f
 8003004:	0800300d 	.word	0x0800300d
 8003008:	080030a3 	.word	0x080030a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003010:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d046      	beq.n	80030a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800301c:	e043      	b.n	80030a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003022:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003026:	d140      	bne.n	80030aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800302c:	e03d      	b.n	80030aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003036:	d121      	bne.n	800307c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	2b03      	cmp	r3, #3
 800303c:	d837      	bhi.n	80030ae <DMA_CheckFifoParam+0xda>
 800303e:	a201      	add	r2, pc, #4	@ (adr r2, 8003044 <DMA_CheckFifoParam+0x70>)
 8003040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003044:	08003055 	.word	0x08003055
 8003048:	0800305b 	.word	0x0800305b
 800304c:	08003055 	.word	0x08003055
 8003050:	0800306d 	.word	0x0800306d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	73fb      	strb	r3, [r7, #15]
      break;
 8003058:	e030      	b.n	80030bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800305e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d025      	beq.n	80030b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800306a:	e022      	b.n	80030b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003070:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003074:	d11f      	bne.n	80030b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800307a:	e01c      	b.n	80030b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2b02      	cmp	r3, #2
 8003080:	d903      	bls.n	800308a <DMA_CheckFifoParam+0xb6>
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2b03      	cmp	r3, #3
 8003086:	d003      	beq.n	8003090 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003088:	e018      	b.n	80030bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	73fb      	strb	r3, [r7, #15]
      break;
 800308e:	e015      	b.n	80030bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003094:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00e      	beq.n	80030ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	73fb      	strb	r3, [r7, #15]
      break;
 80030a0:	e00b      	b.n	80030ba <DMA_CheckFifoParam+0xe6>
      break;
 80030a2:	bf00      	nop
 80030a4:	e00a      	b.n	80030bc <DMA_CheckFifoParam+0xe8>
      break;
 80030a6:	bf00      	nop
 80030a8:	e008      	b.n	80030bc <DMA_CheckFifoParam+0xe8>
      break;
 80030aa:	bf00      	nop
 80030ac:	e006      	b.n	80030bc <DMA_CheckFifoParam+0xe8>
      break;
 80030ae:	bf00      	nop
 80030b0:	e004      	b.n	80030bc <DMA_CheckFifoParam+0xe8>
      break;
 80030b2:	bf00      	nop
 80030b4:	e002      	b.n	80030bc <DMA_CheckFifoParam+0xe8>
      break;   
 80030b6:	bf00      	nop
 80030b8:	e000      	b.n	80030bc <DMA_CheckFifoParam+0xe8>
      break;
 80030ba:	bf00      	nop
    }
  } 
  
  return status; 
 80030bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3714      	adds	r7, #20
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop

080030cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b089      	sub	sp, #36	@ 0x24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030da:	2300      	movs	r3, #0
 80030dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030de:	2300      	movs	r3, #0
 80030e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030e2:	2300      	movs	r3, #0
 80030e4:	61fb      	str	r3, [r7, #28]
 80030e6:	e16b      	b.n	80033c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030e8:	2201      	movs	r2, #1
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	4013      	ands	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	429a      	cmp	r2, r3
 8003102:	f040 815a 	bne.w	80033ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	2b01      	cmp	r3, #1
 8003110:	d005      	beq.n	800311e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800311a:	2b02      	cmp	r3, #2
 800311c:	d130      	bne.n	8003180 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	2203      	movs	r2, #3
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	43db      	mvns	r3, r3
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	4013      	ands	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	68da      	ldr	r2, [r3, #12]
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	4313      	orrs	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003154:	2201      	movs	r2, #1
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	43db      	mvns	r3, r3
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	4013      	ands	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	091b      	lsrs	r3, r3, #4
 800316a:	f003 0201 	and.w	r2, r3, #1
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4313      	orrs	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f003 0303 	and.w	r3, r3, #3
 8003188:	2b03      	cmp	r3, #3
 800318a:	d017      	beq.n	80031bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	2203      	movs	r2, #3
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	43db      	mvns	r3, r3
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	4013      	ands	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f003 0303 	and.w	r3, r3, #3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d123      	bne.n	8003210 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	08da      	lsrs	r2, r3, #3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	3208      	adds	r2, #8
 80031d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	220f      	movs	r2, #15
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	43db      	mvns	r3, r3
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	4013      	ands	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	691a      	ldr	r2, [r3, #16]
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	4313      	orrs	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	08da      	lsrs	r2, r3, #3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	3208      	adds	r2, #8
 800320a:	69b9      	ldr	r1, [r7, #24]
 800320c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	2203      	movs	r2, #3
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	43db      	mvns	r3, r3
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	4013      	ands	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f003 0203 	and.w	r2, r3, #3
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	4313      	orrs	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 80b4 	beq.w	80033ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003252:	2300      	movs	r3, #0
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	4b60      	ldr	r3, [pc, #384]	@ (80033d8 <HAL_GPIO_Init+0x30c>)
 8003258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800325a:	4a5f      	ldr	r2, [pc, #380]	@ (80033d8 <HAL_GPIO_Init+0x30c>)
 800325c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003260:	6453      	str	r3, [r2, #68]	@ 0x44
 8003262:	4b5d      	ldr	r3, [pc, #372]	@ (80033d8 <HAL_GPIO_Init+0x30c>)
 8003264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003266:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800326e:	4a5b      	ldr	r2, [pc, #364]	@ (80033dc <HAL_GPIO_Init+0x310>)
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	089b      	lsrs	r3, r3, #2
 8003274:	3302      	adds	r3, #2
 8003276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800327a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	f003 0303 	and.w	r3, r3, #3
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	220f      	movs	r2, #15
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	43db      	mvns	r3, r3
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	4013      	ands	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a52      	ldr	r2, [pc, #328]	@ (80033e0 <HAL_GPIO_Init+0x314>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d02b      	beq.n	80032f2 <HAL_GPIO_Init+0x226>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a51      	ldr	r2, [pc, #324]	@ (80033e4 <HAL_GPIO_Init+0x318>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d025      	beq.n	80032ee <HAL_GPIO_Init+0x222>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a50      	ldr	r2, [pc, #320]	@ (80033e8 <HAL_GPIO_Init+0x31c>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d01f      	beq.n	80032ea <HAL_GPIO_Init+0x21e>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a4f      	ldr	r2, [pc, #316]	@ (80033ec <HAL_GPIO_Init+0x320>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d019      	beq.n	80032e6 <HAL_GPIO_Init+0x21a>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a4e      	ldr	r2, [pc, #312]	@ (80033f0 <HAL_GPIO_Init+0x324>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d013      	beq.n	80032e2 <HAL_GPIO_Init+0x216>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a4d      	ldr	r2, [pc, #308]	@ (80033f4 <HAL_GPIO_Init+0x328>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d00d      	beq.n	80032de <HAL_GPIO_Init+0x212>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a4c      	ldr	r2, [pc, #304]	@ (80033f8 <HAL_GPIO_Init+0x32c>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d007      	beq.n	80032da <HAL_GPIO_Init+0x20e>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a4b      	ldr	r2, [pc, #300]	@ (80033fc <HAL_GPIO_Init+0x330>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d101      	bne.n	80032d6 <HAL_GPIO_Init+0x20a>
 80032d2:	2307      	movs	r3, #7
 80032d4:	e00e      	b.n	80032f4 <HAL_GPIO_Init+0x228>
 80032d6:	2308      	movs	r3, #8
 80032d8:	e00c      	b.n	80032f4 <HAL_GPIO_Init+0x228>
 80032da:	2306      	movs	r3, #6
 80032dc:	e00a      	b.n	80032f4 <HAL_GPIO_Init+0x228>
 80032de:	2305      	movs	r3, #5
 80032e0:	e008      	b.n	80032f4 <HAL_GPIO_Init+0x228>
 80032e2:	2304      	movs	r3, #4
 80032e4:	e006      	b.n	80032f4 <HAL_GPIO_Init+0x228>
 80032e6:	2303      	movs	r3, #3
 80032e8:	e004      	b.n	80032f4 <HAL_GPIO_Init+0x228>
 80032ea:	2302      	movs	r3, #2
 80032ec:	e002      	b.n	80032f4 <HAL_GPIO_Init+0x228>
 80032ee:	2301      	movs	r3, #1
 80032f0:	e000      	b.n	80032f4 <HAL_GPIO_Init+0x228>
 80032f2:	2300      	movs	r3, #0
 80032f4:	69fa      	ldr	r2, [r7, #28]
 80032f6:	f002 0203 	and.w	r2, r2, #3
 80032fa:	0092      	lsls	r2, r2, #2
 80032fc:	4093      	lsls	r3, r2
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	4313      	orrs	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003304:	4935      	ldr	r1, [pc, #212]	@ (80033dc <HAL_GPIO_Init+0x310>)
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	089b      	lsrs	r3, r3, #2
 800330a:	3302      	adds	r3, #2
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003312:	4b3b      	ldr	r3, [pc, #236]	@ (8003400 <HAL_GPIO_Init+0x334>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	43db      	mvns	r3, r3
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	4013      	ands	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	4313      	orrs	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003336:	4a32      	ldr	r2, [pc, #200]	@ (8003400 <HAL_GPIO_Init+0x334>)
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800333c:	4b30      	ldr	r3, [pc, #192]	@ (8003400 <HAL_GPIO_Init+0x334>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	43db      	mvns	r3, r3
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	4013      	ands	r3, r2
 800334a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d003      	beq.n	8003360 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	4313      	orrs	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003360:	4a27      	ldr	r2, [pc, #156]	@ (8003400 <HAL_GPIO_Init+0x334>)
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003366:	4b26      	ldr	r3, [pc, #152]	@ (8003400 <HAL_GPIO_Init+0x334>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	43db      	mvns	r3, r3
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	4013      	ands	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	4313      	orrs	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800338a:	4a1d      	ldr	r2, [pc, #116]	@ (8003400 <HAL_GPIO_Init+0x334>)
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003390:	4b1b      	ldr	r3, [pc, #108]	@ (8003400 <HAL_GPIO_Init+0x334>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	43db      	mvns	r3, r3
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	4013      	ands	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d003      	beq.n	80033b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033b4:	4a12      	ldr	r2, [pc, #72]	@ (8003400 <HAL_GPIO_Init+0x334>)
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	3301      	adds	r3, #1
 80033be:	61fb      	str	r3, [r7, #28]
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	2b0f      	cmp	r3, #15
 80033c4:	f67f ae90 	bls.w	80030e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033c8:	bf00      	nop
 80033ca:	bf00      	nop
 80033cc:	3724      	adds	r7, #36	@ 0x24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	40023800 	.word	0x40023800
 80033dc:	40013800 	.word	0x40013800
 80033e0:	40020000 	.word	0x40020000
 80033e4:	40020400 	.word	0x40020400
 80033e8:	40020800 	.word	0x40020800
 80033ec:	40020c00 	.word	0x40020c00
 80033f0:	40021000 	.word	0x40021000
 80033f4:	40021400 	.word	0x40021400
 80033f8:	40021800 	.word	0x40021800
 80033fc:	40021c00 	.word	0x40021c00
 8003400:	40013c00 	.word	0x40013c00

08003404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	460b      	mov	r3, r1
 800340e:	807b      	strh	r3, [r7, #2]
 8003410:	4613      	mov	r3, r2
 8003412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003414:	787b      	ldrb	r3, [r7, #1]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800341a:	887a      	ldrh	r2, [r7, #2]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003420:	e003      	b.n	800342a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003422:	887b      	ldrh	r3, [r7, #2]
 8003424:	041a      	lsls	r2, r3, #16
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	619a      	str	r2, [r3, #24]
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
	...

08003438 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e12b      	b.n	80036a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d106      	bne.n	8003464 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7fd faf2 	bl	8000a48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2224      	movs	r2, #36	@ 0x24
 8003468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0201 	bic.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800348a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800349a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800349c:	f000 fd40 	bl	8003f20 <HAL_RCC_GetPCLK1Freq>
 80034a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	4a81      	ldr	r2, [pc, #516]	@ (80036ac <HAL_I2C_Init+0x274>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d807      	bhi.n	80034bc <HAL_I2C_Init+0x84>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4a80      	ldr	r2, [pc, #512]	@ (80036b0 <HAL_I2C_Init+0x278>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	bf94      	ite	ls
 80034b4:	2301      	movls	r3, #1
 80034b6:	2300      	movhi	r3, #0
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	e006      	b.n	80034ca <HAL_I2C_Init+0x92>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4a7d      	ldr	r2, [pc, #500]	@ (80036b4 <HAL_I2C_Init+0x27c>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	bf94      	ite	ls
 80034c4:	2301      	movls	r3, #1
 80034c6:	2300      	movhi	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e0e7      	b.n	80036a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	4a78      	ldr	r2, [pc, #480]	@ (80036b8 <HAL_I2C_Init+0x280>)
 80034d6:	fba2 2303 	umull	r2, r3, r2, r3
 80034da:	0c9b      	lsrs	r3, r3, #18
 80034dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	4a6a      	ldr	r2, [pc, #424]	@ (80036ac <HAL_I2C_Init+0x274>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d802      	bhi.n	800350c <HAL_I2C_Init+0xd4>
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	3301      	adds	r3, #1
 800350a:	e009      	b.n	8003520 <HAL_I2C_Init+0xe8>
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003512:	fb02 f303 	mul.w	r3, r2, r3
 8003516:	4a69      	ldr	r2, [pc, #420]	@ (80036bc <HAL_I2C_Init+0x284>)
 8003518:	fba2 2303 	umull	r2, r3, r2, r3
 800351c:	099b      	lsrs	r3, r3, #6
 800351e:	3301      	adds	r3, #1
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	6812      	ldr	r2, [r2, #0]
 8003524:	430b      	orrs	r3, r1
 8003526:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003532:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	495c      	ldr	r1, [pc, #368]	@ (80036ac <HAL_I2C_Init+0x274>)
 800353c:	428b      	cmp	r3, r1
 800353e:	d819      	bhi.n	8003574 <HAL_I2C_Init+0x13c>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	1e59      	subs	r1, r3, #1
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	fbb1 f3f3 	udiv	r3, r1, r3
 800354e:	1c59      	adds	r1, r3, #1
 8003550:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003554:	400b      	ands	r3, r1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00a      	beq.n	8003570 <HAL_I2C_Init+0x138>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	1e59      	subs	r1, r3, #1
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	fbb1 f3f3 	udiv	r3, r1, r3
 8003568:	3301      	adds	r3, #1
 800356a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800356e:	e051      	b.n	8003614 <HAL_I2C_Init+0x1dc>
 8003570:	2304      	movs	r3, #4
 8003572:	e04f      	b.n	8003614 <HAL_I2C_Init+0x1dc>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d111      	bne.n	80035a0 <HAL_I2C_Init+0x168>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	1e58      	subs	r0, r3, #1
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6859      	ldr	r1, [r3, #4]
 8003584:	460b      	mov	r3, r1
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	440b      	add	r3, r1
 800358a:	fbb0 f3f3 	udiv	r3, r0, r3
 800358e:	3301      	adds	r3, #1
 8003590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003594:	2b00      	cmp	r3, #0
 8003596:	bf0c      	ite	eq
 8003598:	2301      	moveq	r3, #1
 800359a:	2300      	movne	r3, #0
 800359c:	b2db      	uxtb	r3, r3
 800359e:	e012      	b.n	80035c6 <HAL_I2C_Init+0x18e>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	1e58      	subs	r0, r3, #1
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6859      	ldr	r1, [r3, #4]
 80035a8:	460b      	mov	r3, r1
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	440b      	add	r3, r1
 80035ae:	0099      	lsls	r1, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035b6:	3301      	adds	r3, #1
 80035b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035bc:	2b00      	cmp	r3, #0
 80035be:	bf0c      	ite	eq
 80035c0:	2301      	moveq	r3, #1
 80035c2:	2300      	movne	r3, #0
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <HAL_I2C_Init+0x196>
 80035ca:	2301      	movs	r3, #1
 80035cc:	e022      	b.n	8003614 <HAL_I2C_Init+0x1dc>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10e      	bne.n	80035f4 <HAL_I2C_Init+0x1bc>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	1e58      	subs	r0, r3, #1
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6859      	ldr	r1, [r3, #4]
 80035de:	460b      	mov	r3, r1
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	440b      	add	r3, r1
 80035e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80035e8:	3301      	adds	r3, #1
 80035ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035f2:	e00f      	b.n	8003614 <HAL_I2C_Init+0x1dc>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	1e58      	subs	r0, r3, #1
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6859      	ldr	r1, [r3, #4]
 80035fc:	460b      	mov	r3, r1
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	0099      	lsls	r1, r3, #2
 8003604:	440b      	add	r3, r1
 8003606:	fbb0 f3f3 	udiv	r3, r0, r3
 800360a:	3301      	adds	r3, #1
 800360c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003610:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	6809      	ldr	r1, [r1, #0]
 8003618:	4313      	orrs	r3, r2
 800361a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	69da      	ldr	r2, [r3, #28]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003642:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6911      	ldr	r1, [r2, #16]
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	68d2      	ldr	r2, [r2, #12]
 800364e:	4311      	orrs	r1, r2
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6812      	ldr	r2, [r2, #0]
 8003654:	430b      	orrs	r3, r1
 8003656:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	695a      	ldr	r2, [r3, #20]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	431a      	orrs	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0201 	orr.w	r2, r2, #1
 8003682:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2220      	movs	r2, #32
 800368e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	000186a0 	.word	0x000186a0
 80036b0:	001e847f 	.word	0x001e847f
 80036b4:	003d08ff 	.word	0x003d08ff
 80036b8:	431bde83 	.word	0x431bde83
 80036bc:	10624dd3 	.word	0x10624dd3

080036c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e267      	b.n	8003ba2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d075      	beq.n	80037ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80036de:	4b88      	ldr	r3, [pc, #544]	@ (8003900 <HAL_RCC_OscConfig+0x240>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f003 030c 	and.w	r3, r3, #12
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	d00c      	beq.n	8003704 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036ea:	4b85      	ldr	r3, [pc, #532]	@ (8003900 <HAL_RCC_OscConfig+0x240>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80036f2:	2b08      	cmp	r3, #8
 80036f4:	d112      	bne.n	800371c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036f6:	4b82      	ldr	r3, [pc, #520]	@ (8003900 <HAL_RCC_OscConfig+0x240>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003702:	d10b      	bne.n	800371c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003704:	4b7e      	ldr	r3, [pc, #504]	@ (8003900 <HAL_RCC_OscConfig+0x240>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d05b      	beq.n	80037c8 <HAL_RCC_OscConfig+0x108>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d157      	bne.n	80037c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e242      	b.n	8003ba2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003724:	d106      	bne.n	8003734 <HAL_RCC_OscConfig+0x74>
 8003726:	4b76      	ldr	r3, [pc, #472]	@ (8003900 <HAL_RCC_OscConfig+0x240>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a75      	ldr	r2, [pc, #468]	@ (8003900 <HAL_RCC_OscConfig+0x240>)
 800372c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	e01d      	b.n	8003770 <HAL_RCC_OscConfig+0xb0>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800373c:	d10c      	bne.n	8003758 <HAL_RCC_OscConfig+0x98>
 800373e:	4b70      	ldr	r3, [pc, #448]	@ (8003900 <HAL_RCC_OscConfig+0x240>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a6f      	ldr	r2, [pc, #444]	@ (8003900 <HAL_RCC_OscConfig+0x240>)
 8003744:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003748:	6013      	str	r3, [r2, #0]
 800374a:	4b6d      	ldr	r3, [pc, #436]	@ (8003900 <HAL_RCC_OscConfig+0x240>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a6c      	ldr	r2, [pc, #432]	@ (8003900 <HAL_RCC_OscConfig+0x240>)
 8003750:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003754:	6013      	str	r3, [r2, #0]
 8003756:	e00b      	b.n	8003770 <HAL_RCC_OscConfig+0xb0>
 8003758:	4b69      	ldr	r3, [pc, #420]	@ (8003900 <HAL_RCC_OscConfig+0x240>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a68      	ldr	r2, [pc, #416]	@ (8003900 <HAL_RCC_OscConfig+0x240>)
 800375e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003762:	6013      	str	r3, [r2, #0]
 8003764:	4b66      	ldr	r3, [pc, #408]	@ (8003900 <HAL_RCC_OscConfig+0x240>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a65      	ldr	r2, [pc, #404]	@ (8003900 <HAL_RCC_OscConfig+0x240>)
 800376a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800376e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d013      	beq.n	80037a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003778:	f7fe fe4a 	bl	8002410 <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003780:	f7fe fe46 	bl	8002410 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b64      	cmp	r3, #100	@ 0x64
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e207      	b.n	8003ba2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003792:	4b5b      	ldr	r3, [pc, #364]	@ (8003900 <HAL_RCC_OscConfig+0x240>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0f0      	beq.n	8003780 <HAL_RCC_OscConfig+0xc0>
 800379e:	e014      	b.n	80037ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a0:	f7fe fe36 	bl	8002410 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037a8:	f7fe fe32 	bl	8002410 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b64      	cmp	r3, #100	@ 0x64
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e1f3      	b.n	8003ba2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ba:	4b51      	ldr	r3, [pc, #324]	@ (8003900 <HAL_RCC_OscConfig+0x240>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1f0      	bne.n	80037a8 <HAL_RCC_OscConfig+0xe8>
 80037c6:	e000      	b.n	80037ca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d063      	beq.n	800389e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80037d6:	4b4a      	ldr	r3, [pc, #296]	@ (8003900 <HAL_RCC_OscConfig+0x240>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 030c 	and.w	r3, r3, #12
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00b      	beq.n	80037fa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037e2:	4b47      	ldr	r3, [pc, #284]	@ (8003900 <HAL_RCC_OscConfig+0x240>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80037ea:	2b08      	cmp	r3, #8
 80037ec:	d11c      	bne.n	8003828 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037ee:	4b44      	ldr	r3, [pc, #272]	@ (8003900 <HAL_RCC_OscConfig+0x240>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d116      	bne.n	8003828 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037fa:	4b41      	ldr	r3, [pc, #260]	@ (8003900 <HAL_RCC_OscConfig+0x240>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d005      	beq.n	8003812 <HAL_RCC_OscConfig+0x152>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d001      	beq.n	8003812 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e1c7      	b.n	8003ba2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003812:	4b3b      	ldr	r3, [pc, #236]	@ (8003900 <HAL_RCC_OscConfig+0x240>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	4937      	ldr	r1, [pc, #220]	@ (8003900 <HAL_RCC_OscConfig+0x240>)
 8003822:	4313      	orrs	r3, r2
 8003824:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003826:	e03a      	b.n	800389e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d020      	beq.n	8003872 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003830:	4b34      	ldr	r3, [pc, #208]	@ (8003904 <HAL_RCC_OscConfig+0x244>)
 8003832:	2201      	movs	r2, #1
 8003834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003836:	f7fe fdeb 	bl	8002410 <HAL_GetTick>
 800383a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800383c:	e008      	b.n	8003850 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800383e:	f7fe fde7 	bl	8002410 <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d901      	bls.n	8003850 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e1a8      	b.n	8003ba2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003850:	4b2b      	ldr	r3, [pc, #172]	@ (8003900 <HAL_RCC_OscConfig+0x240>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0f0      	beq.n	800383e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800385c:	4b28      	ldr	r3, [pc, #160]	@ (8003900 <HAL_RCC_OscConfig+0x240>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	4925      	ldr	r1, [pc, #148]	@ (8003900 <HAL_RCC_OscConfig+0x240>)
 800386c:	4313      	orrs	r3, r2
 800386e:	600b      	str	r3, [r1, #0]
 8003870:	e015      	b.n	800389e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003872:	4b24      	ldr	r3, [pc, #144]	@ (8003904 <HAL_RCC_OscConfig+0x244>)
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003878:	f7fe fdca 	bl	8002410 <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003880:	f7fe fdc6 	bl	8002410 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e187      	b.n	8003ba2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003892:	4b1b      	ldr	r3, [pc, #108]	@ (8003900 <HAL_RCC_OscConfig+0x240>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1f0      	bne.n	8003880 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0308 	and.w	r3, r3, #8
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d036      	beq.n	8003918 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d016      	beq.n	80038e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038b2:	4b15      	ldr	r3, [pc, #84]	@ (8003908 <HAL_RCC_OscConfig+0x248>)
 80038b4:	2201      	movs	r2, #1
 80038b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b8:	f7fe fdaa 	bl	8002410 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038c0:	f7fe fda6 	bl	8002410 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e167      	b.n	8003ba2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003900 <HAL_RCC_OscConfig+0x240>)
 80038d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d0f0      	beq.n	80038c0 <HAL_RCC_OscConfig+0x200>
 80038de:	e01b      	b.n	8003918 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038e0:	4b09      	ldr	r3, [pc, #36]	@ (8003908 <HAL_RCC_OscConfig+0x248>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038e6:	f7fe fd93 	bl	8002410 <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038ec:	e00e      	b.n	800390c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038ee:	f7fe fd8f 	bl	8002410 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d907      	bls.n	800390c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e150      	b.n	8003ba2 <HAL_RCC_OscConfig+0x4e2>
 8003900:	40023800 	.word	0x40023800
 8003904:	42470000 	.word	0x42470000
 8003908:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800390c:	4b88      	ldr	r3, [pc, #544]	@ (8003b30 <HAL_RCC_OscConfig+0x470>)
 800390e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1ea      	bne.n	80038ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0304 	and.w	r3, r3, #4
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 8097 	beq.w	8003a54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003926:	2300      	movs	r3, #0
 8003928:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800392a:	4b81      	ldr	r3, [pc, #516]	@ (8003b30 <HAL_RCC_OscConfig+0x470>)
 800392c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10f      	bne.n	8003956 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003936:	2300      	movs	r3, #0
 8003938:	60bb      	str	r3, [r7, #8]
 800393a:	4b7d      	ldr	r3, [pc, #500]	@ (8003b30 <HAL_RCC_OscConfig+0x470>)
 800393c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393e:	4a7c      	ldr	r2, [pc, #496]	@ (8003b30 <HAL_RCC_OscConfig+0x470>)
 8003940:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003944:	6413      	str	r3, [r2, #64]	@ 0x40
 8003946:	4b7a      	ldr	r3, [pc, #488]	@ (8003b30 <HAL_RCC_OscConfig+0x470>)
 8003948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800394e:	60bb      	str	r3, [r7, #8]
 8003950:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003952:	2301      	movs	r3, #1
 8003954:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003956:	4b77      	ldr	r3, [pc, #476]	@ (8003b34 <HAL_RCC_OscConfig+0x474>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800395e:	2b00      	cmp	r3, #0
 8003960:	d118      	bne.n	8003994 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003962:	4b74      	ldr	r3, [pc, #464]	@ (8003b34 <HAL_RCC_OscConfig+0x474>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a73      	ldr	r2, [pc, #460]	@ (8003b34 <HAL_RCC_OscConfig+0x474>)
 8003968:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800396c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800396e:	f7fe fd4f 	bl	8002410 <HAL_GetTick>
 8003972:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003974:	e008      	b.n	8003988 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003976:	f7fe fd4b 	bl	8002410 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d901      	bls.n	8003988 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e10c      	b.n	8003ba2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003988:	4b6a      	ldr	r3, [pc, #424]	@ (8003b34 <HAL_RCC_OscConfig+0x474>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003990:	2b00      	cmp	r3, #0
 8003992:	d0f0      	beq.n	8003976 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d106      	bne.n	80039aa <HAL_RCC_OscConfig+0x2ea>
 800399c:	4b64      	ldr	r3, [pc, #400]	@ (8003b30 <HAL_RCC_OscConfig+0x470>)
 800399e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039a0:	4a63      	ldr	r2, [pc, #396]	@ (8003b30 <HAL_RCC_OscConfig+0x470>)
 80039a2:	f043 0301 	orr.w	r3, r3, #1
 80039a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80039a8:	e01c      	b.n	80039e4 <HAL_RCC_OscConfig+0x324>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	2b05      	cmp	r3, #5
 80039b0:	d10c      	bne.n	80039cc <HAL_RCC_OscConfig+0x30c>
 80039b2:	4b5f      	ldr	r3, [pc, #380]	@ (8003b30 <HAL_RCC_OscConfig+0x470>)
 80039b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039b6:	4a5e      	ldr	r2, [pc, #376]	@ (8003b30 <HAL_RCC_OscConfig+0x470>)
 80039b8:	f043 0304 	orr.w	r3, r3, #4
 80039bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80039be:	4b5c      	ldr	r3, [pc, #368]	@ (8003b30 <HAL_RCC_OscConfig+0x470>)
 80039c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039c2:	4a5b      	ldr	r2, [pc, #364]	@ (8003b30 <HAL_RCC_OscConfig+0x470>)
 80039c4:	f043 0301 	orr.w	r3, r3, #1
 80039c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80039ca:	e00b      	b.n	80039e4 <HAL_RCC_OscConfig+0x324>
 80039cc:	4b58      	ldr	r3, [pc, #352]	@ (8003b30 <HAL_RCC_OscConfig+0x470>)
 80039ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039d0:	4a57      	ldr	r2, [pc, #348]	@ (8003b30 <HAL_RCC_OscConfig+0x470>)
 80039d2:	f023 0301 	bic.w	r3, r3, #1
 80039d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80039d8:	4b55      	ldr	r3, [pc, #340]	@ (8003b30 <HAL_RCC_OscConfig+0x470>)
 80039da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039dc:	4a54      	ldr	r2, [pc, #336]	@ (8003b30 <HAL_RCC_OscConfig+0x470>)
 80039de:	f023 0304 	bic.w	r3, r3, #4
 80039e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d015      	beq.n	8003a18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ec:	f7fe fd10 	bl	8002410 <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f2:	e00a      	b.n	8003a0a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039f4:	f7fe fd0c 	bl	8002410 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e0cb      	b.n	8003ba2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a0a:	4b49      	ldr	r3, [pc, #292]	@ (8003b30 <HAL_RCC_OscConfig+0x470>)
 8003a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0ee      	beq.n	80039f4 <HAL_RCC_OscConfig+0x334>
 8003a16:	e014      	b.n	8003a42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a18:	f7fe fcfa 	bl	8002410 <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a1e:	e00a      	b.n	8003a36 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a20:	f7fe fcf6 	bl	8002410 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e0b5      	b.n	8003ba2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a36:	4b3e      	ldr	r3, [pc, #248]	@ (8003b30 <HAL_RCC_OscConfig+0x470>)
 8003a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1ee      	bne.n	8003a20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a42:	7dfb      	ldrb	r3, [r7, #23]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d105      	bne.n	8003a54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a48:	4b39      	ldr	r3, [pc, #228]	@ (8003b30 <HAL_RCC_OscConfig+0x470>)
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4c:	4a38      	ldr	r2, [pc, #224]	@ (8003b30 <HAL_RCC_OscConfig+0x470>)
 8003a4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a52:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 80a1 	beq.w	8003ba0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a5e:	4b34      	ldr	r3, [pc, #208]	@ (8003b30 <HAL_RCC_OscConfig+0x470>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 030c 	and.w	r3, r3, #12
 8003a66:	2b08      	cmp	r3, #8
 8003a68:	d05c      	beq.n	8003b24 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d141      	bne.n	8003af6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a72:	4b31      	ldr	r3, [pc, #196]	@ (8003b38 <HAL_RCC_OscConfig+0x478>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a78:	f7fe fcca 	bl	8002410 <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a7e:	e008      	b.n	8003a92 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a80:	f7fe fcc6 	bl	8002410 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e087      	b.n	8003ba2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a92:	4b27      	ldr	r3, [pc, #156]	@ (8003b30 <HAL_RCC_OscConfig+0x470>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1f0      	bne.n	8003a80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	69da      	ldr	r2, [r3, #28]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aac:	019b      	lsls	r3, r3, #6
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ab4:	085b      	lsrs	r3, r3, #1
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	041b      	lsls	r3, r3, #16
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac0:	061b      	lsls	r3, r3, #24
 8003ac2:	491b      	ldr	r1, [pc, #108]	@ (8003b30 <HAL_RCC_OscConfig+0x470>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8003b38 <HAL_RCC_OscConfig+0x478>)
 8003aca:	2201      	movs	r2, #1
 8003acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ace:	f7fe fc9f 	bl	8002410 <HAL_GetTick>
 8003ad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ad4:	e008      	b.n	8003ae8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad6:	f7fe fc9b 	bl	8002410 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e05c      	b.n	8003ba2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ae8:	4b11      	ldr	r3, [pc, #68]	@ (8003b30 <HAL_RCC_OscConfig+0x470>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0f0      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x416>
 8003af4:	e054      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af6:	4b10      	ldr	r3, [pc, #64]	@ (8003b38 <HAL_RCC_OscConfig+0x478>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003afc:	f7fe fc88 	bl	8002410 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b04:	f7fe fc84 	bl	8002410 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e045      	b.n	8003ba2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b16:	4b06      	ldr	r3, [pc, #24]	@ (8003b30 <HAL_RCC_OscConfig+0x470>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1f0      	bne.n	8003b04 <HAL_RCC_OscConfig+0x444>
 8003b22:	e03d      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d107      	bne.n	8003b3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e038      	b.n	8003ba2 <HAL_RCC_OscConfig+0x4e2>
 8003b30:	40023800 	.word	0x40023800
 8003b34:	40007000 	.word	0x40007000
 8003b38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8003bac <HAL_RCC_OscConfig+0x4ec>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d028      	beq.n	8003b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d121      	bne.n	8003b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d11a      	bne.n	8003b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d111      	bne.n	8003b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b82:	085b      	lsrs	r3, r3, #1
 8003b84:	3b01      	subs	r3, #1
 8003b86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d107      	bne.n	8003b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d001      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e000      	b.n	8003ba2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3718      	adds	r7, #24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	40023800 	.word	0x40023800

08003bb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e0cc      	b.n	8003d5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bc4:	4b68      	ldr	r3, [pc, #416]	@ (8003d68 <HAL_RCC_ClockConfig+0x1b8>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0307 	and.w	r3, r3, #7
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d90c      	bls.n	8003bec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd2:	4b65      	ldr	r3, [pc, #404]	@ (8003d68 <HAL_RCC_ClockConfig+0x1b8>)
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	b2d2      	uxtb	r2, r2
 8003bd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bda:	4b63      	ldr	r3, [pc, #396]	@ (8003d68 <HAL_RCC_ClockConfig+0x1b8>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0307 	and.w	r3, r3, #7
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d001      	beq.n	8003bec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e0b8      	b.n	8003d5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d020      	beq.n	8003c3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0304 	and.w	r3, r3, #4
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d005      	beq.n	8003c10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c04:	4b59      	ldr	r3, [pc, #356]	@ (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	4a58      	ldr	r2, [pc, #352]	@ (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c0a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003c0e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0308 	and.w	r3, r3, #8
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d005      	beq.n	8003c28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c1c:	4b53      	ldr	r3, [pc, #332]	@ (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	4a52      	ldr	r2, [pc, #328]	@ (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c22:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003c26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c28:	4b50      	ldr	r3, [pc, #320]	@ (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	494d      	ldr	r1, [pc, #308]	@ (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d044      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d107      	bne.n	8003c5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c4e:	4b47      	ldr	r3, [pc, #284]	@ (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d119      	bne.n	8003c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e07f      	b.n	8003d5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d003      	beq.n	8003c6e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c6a:	2b03      	cmp	r3, #3
 8003c6c:	d107      	bne.n	8003c7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c6e:	4b3f      	ldr	r3, [pc, #252]	@ (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d109      	bne.n	8003c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e06f      	b.n	8003d5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c7e:	4b3b      	ldr	r3, [pc, #236]	@ (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e067      	b.n	8003d5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c8e:	4b37      	ldr	r3, [pc, #220]	@ (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f023 0203 	bic.w	r2, r3, #3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	4934      	ldr	r1, [pc, #208]	@ (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ca0:	f7fe fbb6 	bl	8002410 <HAL_GetTick>
 8003ca4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ca6:	e00a      	b.n	8003cbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ca8:	f7fe fbb2 	bl	8002410 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e04f      	b.n	8003d5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cbe:	4b2b      	ldr	r3, [pc, #172]	@ (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f003 020c 	and.w	r2, r3, #12
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d1eb      	bne.n	8003ca8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cd0:	4b25      	ldr	r3, [pc, #148]	@ (8003d68 <HAL_RCC_ClockConfig+0x1b8>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	683a      	ldr	r2, [r7, #0]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d20c      	bcs.n	8003cf8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cde:	4b22      	ldr	r3, [pc, #136]	@ (8003d68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ce0:	683a      	ldr	r2, [r7, #0]
 8003ce2:	b2d2      	uxtb	r2, r2
 8003ce4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ce6:	4b20      	ldr	r3, [pc, #128]	@ (8003d68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0307 	and.w	r3, r3, #7
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d001      	beq.n	8003cf8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e032      	b.n	8003d5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d008      	beq.n	8003d16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d04:	4b19      	ldr	r3, [pc, #100]	@ (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	4916      	ldr	r1, [pc, #88]	@ (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0308 	and.w	r3, r3, #8
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d009      	beq.n	8003d36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d22:	4b12      	ldr	r3, [pc, #72]	@ (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	490e      	ldr	r1, [pc, #56]	@ (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d36:	f000 f821 	bl	8003d7c <HAL_RCC_GetSysClockFreq>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	091b      	lsrs	r3, r3, #4
 8003d42:	f003 030f 	and.w	r3, r3, #15
 8003d46:	490a      	ldr	r1, [pc, #40]	@ (8003d70 <HAL_RCC_ClockConfig+0x1c0>)
 8003d48:	5ccb      	ldrb	r3, [r1, r3]
 8003d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d4e:	4a09      	ldr	r2, [pc, #36]	@ (8003d74 <HAL_RCC_ClockConfig+0x1c4>)
 8003d50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003d52:	4b09      	ldr	r3, [pc, #36]	@ (8003d78 <HAL_RCC_ClockConfig+0x1c8>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7fd f8b6 	bl	8000ec8 <HAL_InitTick>

  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	40023c00 	.word	0x40023c00
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	080074a8 	.word	0x080074a8
 8003d74:	20000000 	.word	0x20000000
 8003d78:	20000004 	.word	0x20000004

08003d7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d80:	b090      	sub	sp, #64	@ 0x40
 8003d82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003d84:	2300      	movs	r3, #0
 8003d86:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003d90:	2300      	movs	r3, #0
 8003d92:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d94:	4b59      	ldr	r3, [pc, #356]	@ (8003efc <HAL_RCC_GetSysClockFreq+0x180>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f003 030c 	and.w	r3, r3, #12
 8003d9c:	2b08      	cmp	r3, #8
 8003d9e:	d00d      	beq.n	8003dbc <HAL_RCC_GetSysClockFreq+0x40>
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	f200 80a1 	bhi.w	8003ee8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d002      	beq.n	8003db0 <HAL_RCC_GetSysClockFreq+0x34>
 8003daa:	2b04      	cmp	r3, #4
 8003dac:	d003      	beq.n	8003db6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003dae:	e09b      	b.n	8003ee8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003db0:	4b53      	ldr	r3, [pc, #332]	@ (8003f00 <HAL_RCC_GetSysClockFreq+0x184>)
 8003db2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003db4:	e09b      	b.n	8003eee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003db6:	4b53      	ldr	r3, [pc, #332]	@ (8003f04 <HAL_RCC_GetSysClockFreq+0x188>)
 8003db8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003dba:	e098      	b.n	8003eee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dbc:	4b4f      	ldr	r3, [pc, #316]	@ (8003efc <HAL_RCC_GetSysClockFreq+0x180>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003dc4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dc6:	4b4d      	ldr	r3, [pc, #308]	@ (8003efc <HAL_RCC_GetSysClockFreq+0x180>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d028      	beq.n	8003e24 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dd2:	4b4a      	ldr	r3, [pc, #296]	@ (8003efc <HAL_RCC_GetSysClockFreq+0x180>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	099b      	lsrs	r3, r3, #6
 8003dd8:	2200      	movs	r2, #0
 8003dda:	623b      	str	r3, [r7, #32]
 8003ddc:	627a      	str	r2, [r7, #36]	@ 0x24
 8003dde:	6a3b      	ldr	r3, [r7, #32]
 8003de0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003de4:	2100      	movs	r1, #0
 8003de6:	4b47      	ldr	r3, [pc, #284]	@ (8003f04 <HAL_RCC_GetSysClockFreq+0x188>)
 8003de8:	fb03 f201 	mul.w	r2, r3, r1
 8003dec:	2300      	movs	r3, #0
 8003dee:	fb00 f303 	mul.w	r3, r0, r3
 8003df2:	4413      	add	r3, r2
 8003df4:	4a43      	ldr	r2, [pc, #268]	@ (8003f04 <HAL_RCC_GetSysClockFreq+0x188>)
 8003df6:	fba0 1202 	umull	r1, r2, r0, r2
 8003dfa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003dfc:	460a      	mov	r2, r1
 8003dfe:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003e00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e02:	4413      	add	r3, r2
 8003e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e08:	2200      	movs	r2, #0
 8003e0a:	61bb      	str	r3, [r7, #24]
 8003e0c:	61fa      	str	r2, [r7, #28]
 8003e0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e12:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003e16:	f7fc fa2b 	bl	8000270 <__aeabi_uldivmod>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	4613      	mov	r3, r2
 8003e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e22:	e053      	b.n	8003ecc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e24:	4b35      	ldr	r3, [pc, #212]	@ (8003efc <HAL_RCC_GetSysClockFreq+0x180>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	099b      	lsrs	r3, r3, #6
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	613b      	str	r3, [r7, #16]
 8003e2e:	617a      	str	r2, [r7, #20]
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003e36:	f04f 0b00 	mov.w	fp, #0
 8003e3a:	4652      	mov	r2, sl
 8003e3c:	465b      	mov	r3, fp
 8003e3e:	f04f 0000 	mov.w	r0, #0
 8003e42:	f04f 0100 	mov.w	r1, #0
 8003e46:	0159      	lsls	r1, r3, #5
 8003e48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e4c:	0150      	lsls	r0, r2, #5
 8003e4e:	4602      	mov	r2, r0
 8003e50:	460b      	mov	r3, r1
 8003e52:	ebb2 080a 	subs.w	r8, r2, sl
 8003e56:	eb63 090b 	sbc.w	r9, r3, fp
 8003e5a:	f04f 0200 	mov.w	r2, #0
 8003e5e:	f04f 0300 	mov.w	r3, #0
 8003e62:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003e66:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003e6a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003e6e:	ebb2 0408 	subs.w	r4, r2, r8
 8003e72:	eb63 0509 	sbc.w	r5, r3, r9
 8003e76:	f04f 0200 	mov.w	r2, #0
 8003e7a:	f04f 0300 	mov.w	r3, #0
 8003e7e:	00eb      	lsls	r3, r5, #3
 8003e80:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e84:	00e2      	lsls	r2, r4, #3
 8003e86:	4614      	mov	r4, r2
 8003e88:	461d      	mov	r5, r3
 8003e8a:	eb14 030a 	adds.w	r3, r4, sl
 8003e8e:	603b      	str	r3, [r7, #0]
 8003e90:	eb45 030b 	adc.w	r3, r5, fp
 8003e94:	607b      	str	r3, [r7, #4]
 8003e96:	f04f 0200 	mov.w	r2, #0
 8003e9a:	f04f 0300 	mov.w	r3, #0
 8003e9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ea2:	4629      	mov	r1, r5
 8003ea4:	028b      	lsls	r3, r1, #10
 8003ea6:	4621      	mov	r1, r4
 8003ea8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003eac:	4621      	mov	r1, r4
 8003eae:	028a      	lsls	r2, r1, #10
 8003eb0:	4610      	mov	r0, r2
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	60bb      	str	r3, [r7, #8]
 8003eba:	60fa      	str	r2, [r7, #12]
 8003ebc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ec0:	f7fc f9d6 	bl	8000270 <__aeabi_uldivmod>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	4613      	mov	r3, r2
 8003eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8003efc <HAL_RCC_GetSysClockFreq+0x180>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	0c1b      	lsrs	r3, r3, #16
 8003ed2:	f003 0303 	and.w	r3, r3, #3
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003edc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ee6:	e002      	b.n	8003eee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ee8:	4b05      	ldr	r3, [pc, #20]	@ (8003f00 <HAL_RCC_GetSysClockFreq+0x184>)
 8003eea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003eec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3740      	adds	r7, #64	@ 0x40
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003efa:	bf00      	nop
 8003efc:	40023800 	.word	0x40023800
 8003f00:	00f42400 	.word	0x00f42400
 8003f04:	017d7840 	.word	0x017d7840

08003f08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f0c:	4b03      	ldr	r3, [pc, #12]	@ (8003f1c <HAL_RCC_GetHCLKFreq+0x14>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	20000000 	.word	0x20000000

08003f20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f24:	f7ff fff0 	bl	8003f08 <HAL_RCC_GetHCLKFreq>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	4b05      	ldr	r3, [pc, #20]	@ (8003f40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	0a9b      	lsrs	r3, r3, #10
 8003f30:	f003 0307 	and.w	r3, r3, #7
 8003f34:	4903      	ldr	r1, [pc, #12]	@ (8003f44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f36:	5ccb      	ldrb	r3, [r1, r3]
 8003f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	40023800 	.word	0x40023800
 8003f44:	080074b8 	.word	0x080074b8

08003f48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f4c:	f7ff ffdc 	bl	8003f08 <HAL_RCC_GetHCLKFreq>
 8003f50:	4602      	mov	r2, r0
 8003f52:	4b05      	ldr	r3, [pc, #20]	@ (8003f68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	0b5b      	lsrs	r3, r3, #13
 8003f58:	f003 0307 	and.w	r3, r3, #7
 8003f5c:	4903      	ldr	r1, [pc, #12]	@ (8003f6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f5e:	5ccb      	ldrb	r3, [r1, r3]
 8003f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	40023800 	.word	0x40023800
 8003f6c:	080074b8 	.word	0x080074b8

08003f70 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	220f      	movs	r2, #15
 8003f7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f80:	4b12      	ldr	r3, [pc, #72]	@ (8003fcc <HAL_RCC_GetClockConfig+0x5c>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f003 0203 	and.w	r2, r3, #3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8003fcc <HAL_RCC_GetClockConfig+0x5c>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003f98:	4b0c      	ldr	r3, [pc, #48]	@ (8003fcc <HAL_RCC_GetClockConfig+0x5c>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003fa4:	4b09      	ldr	r3, [pc, #36]	@ (8003fcc <HAL_RCC_GetClockConfig+0x5c>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	08db      	lsrs	r3, r3, #3
 8003faa:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003fb2:	4b07      	ldr	r3, [pc, #28]	@ (8003fd0 <HAL_RCC_GetClockConfig+0x60>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0207 	and.w	r2, r3, #7
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	601a      	str	r2, [r3, #0]
}
 8003fbe:	bf00      	nop
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	40023800 	.word	0x40023800
 8003fd0:	40023c00 	.word	0x40023c00

08003fd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e07b      	b.n	80040de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d108      	bne.n	8004000 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ff6:	d009      	beq.n	800400c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	61da      	str	r2, [r3, #28]
 8003ffe:	e005      	b.n	800400c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d106      	bne.n	800402c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7fc feda 	bl	8000de0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2202      	movs	r2, #2
 8004030:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004042:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004054:	431a      	orrs	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800405e:	431a      	orrs	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	431a      	orrs	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	431a      	orrs	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800407c:	431a      	orrs	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004086:	431a      	orrs	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a1b      	ldr	r3, [r3, #32]
 800408c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004090:	ea42 0103 	orr.w	r1, r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004098:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	0c1b      	lsrs	r3, r3, #16
 80040aa:	f003 0104 	and.w	r1, r3, #4
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b2:	f003 0210 	and.w	r2, r3, #16
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	69da      	ldr	r2, [r3, #28]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b088      	sub	sp, #32
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	60f8      	str	r0, [r7, #12]
 80040ee:	60b9      	str	r1, [r7, #8]
 80040f0:	603b      	str	r3, [r7, #0]
 80040f2:	4613      	mov	r3, r2
 80040f4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040f6:	f7fe f98b 	bl	8002410 <HAL_GetTick>
 80040fa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80040fc:	88fb      	ldrh	r3, [r7, #6]
 80040fe:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b01      	cmp	r3, #1
 800410a:	d001      	beq.n	8004110 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800410c:	2302      	movs	r3, #2
 800410e:	e12a      	b.n	8004366 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d002      	beq.n	800411c <HAL_SPI_Transmit+0x36>
 8004116:	88fb      	ldrh	r3, [r7, #6]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d101      	bne.n	8004120 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e122      	b.n	8004366 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004126:	2b01      	cmp	r3, #1
 8004128:	d101      	bne.n	800412e <HAL_SPI_Transmit+0x48>
 800412a:	2302      	movs	r3, #2
 800412c:	e11b      	b.n	8004366 <HAL_SPI_Transmit+0x280>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2203      	movs	r2, #3
 800413a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	68ba      	ldr	r2, [r7, #8]
 8004148:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	88fa      	ldrh	r2, [r7, #6]
 800414e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	88fa      	ldrh	r2, [r7, #6]
 8004154:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800417c:	d10f      	bne.n	800419e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800418c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800419c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041a8:	2b40      	cmp	r3, #64	@ 0x40
 80041aa:	d007      	beq.n	80041bc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80041ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041c4:	d152      	bne.n	800426c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <HAL_SPI_Transmit+0xee>
 80041ce:	8b7b      	ldrh	r3, [r7, #26]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d145      	bne.n	8004260 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d8:	881a      	ldrh	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e4:	1c9a      	adds	r2, r3, #2
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	3b01      	subs	r3, #1
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80041f8:	e032      	b.n	8004260 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b02      	cmp	r3, #2
 8004206:	d112      	bne.n	800422e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800420c:	881a      	ldrh	r2, [r3, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004218:	1c9a      	adds	r2, r3, #2
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004222:	b29b      	uxth	r3, r3
 8004224:	3b01      	subs	r3, #1
 8004226:	b29a      	uxth	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800422c:	e018      	b.n	8004260 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800422e:	f7fe f8ef 	bl	8002410 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	429a      	cmp	r2, r3
 800423c:	d803      	bhi.n	8004246 <HAL_SPI_Transmit+0x160>
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004244:	d102      	bne.n	800424c <HAL_SPI_Transmit+0x166>
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d109      	bne.n	8004260 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e082      	b.n	8004366 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004264:	b29b      	uxth	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1c7      	bne.n	80041fa <HAL_SPI_Transmit+0x114>
 800426a:	e053      	b.n	8004314 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d002      	beq.n	800427a <HAL_SPI_Transmit+0x194>
 8004274:	8b7b      	ldrh	r3, [r7, #26]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d147      	bne.n	800430a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	330c      	adds	r3, #12
 8004284:	7812      	ldrb	r2, [r2, #0]
 8004286:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800428c:	1c5a      	adds	r2, r3, #1
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004296:	b29b      	uxth	r3, r3
 8004298:	3b01      	subs	r3, #1
 800429a:	b29a      	uxth	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80042a0:	e033      	b.n	800430a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f003 0302 	and.w	r3, r3, #2
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d113      	bne.n	80042d8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	330c      	adds	r3, #12
 80042ba:	7812      	ldrb	r2, [r2, #0]
 80042bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c2:	1c5a      	adds	r2, r3, #1
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	3b01      	subs	r3, #1
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80042d6:	e018      	b.n	800430a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042d8:	f7fe f89a 	bl	8002410 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d803      	bhi.n	80042f0 <HAL_SPI_Transmit+0x20a>
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ee:	d102      	bne.n	80042f6 <HAL_SPI_Transmit+0x210>
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d109      	bne.n	800430a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e02d      	b.n	8004366 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800430e:	b29b      	uxth	r3, r3
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1c6      	bne.n	80042a2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004314:	69fa      	ldr	r2, [r7, #28]
 8004316:	6839      	ldr	r1, [r7, #0]
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 fbd9 	bl	8004ad0 <SPI_EndRxTxTransaction>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d002      	beq.n	800432a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2220      	movs	r2, #32
 8004328:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10a      	bne.n	8004348 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004332:	2300      	movs	r3, #0
 8004334:	617b      	str	r3, [r7, #20]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	617b      	str	r3, [r7, #20]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	617b      	str	r3, [r7, #20]
 8004346:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800435c:	2b00      	cmp	r3, #0
 800435e:	d001      	beq.n	8004364 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e000      	b.n	8004366 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004364:	2300      	movs	r3, #0
  }
}
 8004366:	4618      	mov	r0, r3
 8004368:	3720      	adds	r7, #32
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b088      	sub	sp, #32
 8004372:	af02      	add	r7, sp, #8
 8004374:	60f8      	str	r0, [r7, #12]
 8004376:	60b9      	str	r1, [r7, #8]
 8004378:	603b      	str	r3, [r7, #0]
 800437a:	4613      	mov	r3, r2
 800437c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b01      	cmp	r3, #1
 8004388:	d001      	beq.n	800438e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800438a:	2302      	movs	r3, #2
 800438c:	e104      	b.n	8004598 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004396:	d112      	bne.n	80043be <HAL_SPI_Receive+0x50>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10e      	bne.n	80043be <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2204      	movs	r2, #4
 80043a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80043a8:	88fa      	ldrh	r2, [r7, #6]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	4613      	mov	r3, r2
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	68b9      	ldr	r1, [r7, #8]
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f000 f8f3 	bl	80045a0 <HAL_SPI_TransmitReceive>
 80043ba:	4603      	mov	r3, r0
 80043bc:	e0ec      	b.n	8004598 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043be:	f7fe f827 	bl	8002410 <HAL_GetTick>
 80043c2:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d002      	beq.n	80043d0 <HAL_SPI_Receive+0x62>
 80043ca:	88fb      	ldrh	r3, [r7, #6]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d101      	bne.n	80043d4 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e0e1      	b.n	8004598 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d101      	bne.n	80043e2 <HAL_SPI_Receive+0x74>
 80043de:	2302      	movs	r3, #2
 80043e0:	e0da      	b.n	8004598 <HAL_SPI_Receive+0x22a>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2204      	movs	r2, #4
 80043ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	88fa      	ldrh	r2, [r7, #6]
 8004402:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	88fa      	ldrh	r2, [r7, #6]
 8004408:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004430:	d10f      	bne.n	8004452 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004440:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004450:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800445c:	2b40      	cmp	r3, #64	@ 0x40
 800445e:	d007      	beq.n	8004470 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800446e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d170      	bne.n	800455a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004478:	e035      	b.n	80044e6 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b01      	cmp	r3, #1
 8004486:	d115      	bne.n	80044b4 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f103 020c 	add.w	r2, r3, #12
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004494:	7812      	ldrb	r2, [r2, #0]
 8004496:	b2d2      	uxtb	r2, r2
 8004498:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800449e:	1c5a      	adds	r2, r3, #1
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	3b01      	subs	r3, #1
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80044b2:	e018      	b.n	80044e6 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044b4:	f7fd ffac 	bl	8002410 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d803      	bhi.n	80044cc <HAL_SPI_Receive+0x15e>
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ca:	d102      	bne.n	80044d2 <HAL_SPI_Receive+0x164>
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d109      	bne.n	80044e6 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e058      	b.n	8004598 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1c4      	bne.n	800447a <HAL_SPI_Receive+0x10c>
 80044f0:	e038      	b.n	8004564 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f003 0301 	and.w	r3, r3, #1
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d113      	bne.n	8004528 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68da      	ldr	r2, [r3, #12]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800450a:	b292      	uxth	r2, r2
 800450c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004512:	1c9a      	adds	r2, r3, #2
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800451c:	b29b      	uxth	r3, r3
 800451e:	3b01      	subs	r3, #1
 8004520:	b29a      	uxth	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004526:	e018      	b.n	800455a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004528:	f7fd ff72 	bl	8002410 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	429a      	cmp	r2, r3
 8004536:	d803      	bhi.n	8004540 <HAL_SPI_Receive+0x1d2>
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800453e:	d102      	bne.n	8004546 <HAL_SPI_Receive+0x1d8>
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d109      	bne.n	800455a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e01e      	b.n	8004598 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800455e:	b29b      	uxth	r3, r3
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1c6      	bne.n	80044f2 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	6839      	ldr	r1, [r7, #0]
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f000 fa4b 	bl	8004a04 <SPI_EndRxTransaction>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d002      	beq.n	800457a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2220      	movs	r2, #32
 8004578:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800458e:	2b00      	cmp	r3, #0
 8004590:	d001      	beq.n	8004596 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e000      	b.n	8004598 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004596:	2300      	movs	r3, #0
  }
}
 8004598:	4618      	mov	r0, r3
 800459a:	3718      	adds	r7, #24
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b08a      	sub	sp, #40	@ 0x28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
 80045ac:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80045ae:	2301      	movs	r3, #1
 80045b0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045b2:	f7fd ff2d 	bl	8002410 <HAL_GetTick>
 80045b6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80045be:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80045c6:	887b      	ldrh	r3, [r7, #2]
 80045c8:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80045ca:	7ffb      	ldrb	r3, [r7, #31]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d00c      	beq.n	80045ea <HAL_SPI_TransmitReceive+0x4a>
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045d6:	d106      	bne.n	80045e6 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d102      	bne.n	80045e6 <HAL_SPI_TransmitReceive+0x46>
 80045e0:	7ffb      	ldrb	r3, [r7, #31]
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	d001      	beq.n	80045ea <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80045e6:	2302      	movs	r3, #2
 80045e8:	e17f      	b.n	80048ea <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d005      	beq.n	80045fc <HAL_SPI_TransmitReceive+0x5c>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d002      	beq.n	80045fc <HAL_SPI_TransmitReceive+0x5c>
 80045f6:	887b      	ldrh	r3, [r7, #2]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d101      	bne.n	8004600 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e174      	b.n	80048ea <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004606:	2b01      	cmp	r3, #1
 8004608:	d101      	bne.n	800460e <HAL_SPI_TransmitReceive+0x6e>
 800460a:	2302      	movs	r3, #2
 800460c:	e16d      	b.n	80048ea <HAL_SPI_TransmitReceive+0x34a>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b04      	cmp	r3, #4
 8004620:	d003      	beq.n	800462a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2205      	movs	r2, #5
 8004626:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	887a      	ldrh	r2, [r7, #2]
 800463a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	887a      	ldrh	r2, [r7, #2]
 8004640:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	887a      	ldrh	r2, [r7, #2]
 800464c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	887a      	ldrh	r2, [r7, #2]
 8004652:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800466a:	2b40      	cmp	r3, #64	@ 0x40
 800466c:	d007      	beq.n	800467e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800467c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004686:	d17e      	bne.n	8004786 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d002      	beq.n	8004696 <HAL_SPI_TransmitReceive+0xf6>
 8004690:	8afb      	ldrh	r3, [r7, #22]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d16c      	bne.n	8004770 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800469a:	881a      	ldrh	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a6:	1c9a      	adds	r2, r3, #2
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	3b01      	subs	r3, #1
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046ba:	e059      	b.n	8004770 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d11b      	bne.n	8004702 <HAL_SPI_TransmitReceive+0x162>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d016      	beq.n	8004702 <HAL_SPI_TransmitReceive+0x162>
 80046d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d113      	bne.n	8004702 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046de:	881a      	ldrh	r2, [r3, #0]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ea:	1c9a      	adds	r2, r3, #2
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	3b01      	subs	r3, #1
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046fe:	2300      	movs	r3, #0
 8004700:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b01      	cmp	r3, #1
 800470e:	d119      	bne.n	8004744 <HAL_SPI_TransmitReceive+0x1a4>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004714:	b29b      	uxth	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d014      	beq.n	8004744 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68da      	ldr	r2, [r3, #12]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004724:	b292      	uxth	r2, r2
 8004726:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800472c:	1c9a      	adds	r2, r3, #2
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004736:	b29b      	uxth	r3, r3
 8004738:	3b01      	subs	r3, #1
 800473a:	b29a      	uxth	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004740:	2301      	movs	r3, #1
 8004742:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004744:	f7fd fe64 	bl	8002410 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	6a3b      	ldr	r3, [r7, #32]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004750:	429a      	cmp	r2, r3
 8004752:	d80d      	bhi.n	8004770 <HAL_SPI_TransmitReceive+0x1d0>
 8004754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800475a:	d009      	beq.n	8004770 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e0bc      	b.n	80048ea <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004774:	b29b      	uxth	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1a0      	bne.n	80046bc <HAL_SPI_TransmitReceive+0x11c>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800477e:	b29b      	uxth	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	d19b      	bne.n	80046bc <HAL_SPI_TransmitReceive+0x11c>
 8004784:	e082      	b.n	800488c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d002      	beq.n	8004794 <HAL_SPI_TransmitReceive+0x1f4>
 800478e:	8afb      	ldrh	r3, [r7, #22]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d171      	bne.n	8004878 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	330c      	adds	r3, #12
 800479e:	7812      	ldrb	r2, [r2, #0]
 80047a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047a6:	1c5a      	adds	r2, r3, #1
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	3b01      	subs	r3, #1
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047ba:	e05d      	b.n	8004878 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d11c      	bne.n	8004804 <HAL_SPI_TransmitReceive+0x264>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d017      	beq.n	8004804 <HAL_SPI_TransmitReceive+0x264>
 80047d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d114      	bne.n	8004804 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	330c      	adds	r3, #12
 80047e4:	7812      	ldrb	r2, [r2, #0]
 80047e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ec:	1c5a      	adds	r2, r3, #1
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	3b01      	subs	r3, #1
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004800:	2300      	movs	r3, #0
 8004802:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b01      	cmp	r3, #1
 8004810:	d119      	bne.n	8004846 <HAL_SPI_TransmitReceive+0x2a6>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004816:	b29b      	uxth	r3, r3
 8004818:	2b00      	cmp	r3, #0
 800481a:	d014      	beq.n	8004846 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68da      	ldr	r2, [r3, #12]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004826:	b2d2      	uxtb	r2, r2
 8004828:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800482e:	1c5a      	adds	r2, r3, #1
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004838:	b29b      	uxth	r3, r3
 800483a:	3b01      	subs	r3, #1
 800483c:	b29a      	uxth	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004842:	2301      	movs	r3, #1
 8004844:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004846:	f7fd fde3 	bl	8002410 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	6a3b      	ldr	r3, [r7, #32]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004852:	429a      	cmp	r2, r3
 8004854:	d803      	bhi.n	800485e <HAL_SPI_TransmitReceive+0x2be>
 8004856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800485c:	d102      	bne.n	8004864 <HAL_SPI_TransmitReceive+0x2c4>
 800485e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004860:	2b00      	cmp	r3, #0
 8004862:	d109      	bne.n	8004878 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e038      	b.n	80048ea <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800487c:	b29b      	uxth	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d19c      	bne.n	80047bc <HAL_SPI_TransmitReceive+0x21c>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004886:	b29b      	uxth	r3, r3
 8004888:	2b00      	cmp	r3, #0
 800488a:	d197      	bne.n	80047bc <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800488c:	6a3a      	ldr	r2, [r7, #32]
 800488e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f000 f91d 	bl	8004ad0 <SPI_EndRxTxTransaction>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d008      	beq.n	80048ae <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2220      	movs	r2, #32
 80048a0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e01d      	b.n	80048ea <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10a      	bne.n	80048cc <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048b6:	2300      	movs	r3, #0
 80048b8:	613b      	str	r3, [r7, #16]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	613b      	str	r3, [r7, #16]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	613b      	str	r3, [r7, #16]
 80048ca:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d001      	beq.n	80048e8 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e000      	b.n	80048ea <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80048e8:	2300      	movs	r3, #0
  }
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3728      	adds	r7, #40	@ 0x28
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
	...

080048f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b088      	sub	sp, #32
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	603b      	str	r3, [r7, #0]
 8004900:	4613      	mov	r3, r2
 8004902:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004904:	f7fd fd84 	bl	8002410 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800490c:	1a9b      	subs	r3, r3, r2
 800490e:	683a      	ldr	r2, [r7, #0]
 8004910:	4413      	add	r3, r2
 8004912:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004914:	f7fd fd7c 	bl	8002410 <HAL_GetTick>
 8004918:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800491a:	4b39      	ldr	r3, [pc, #228]	@ (8004a00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	015b      	lsls	r3, r3, #5
 8004920:	0d1b      	lsrs	r3, r3, #20
 8004922:	69fa      	ldr	r2, [r7, #28]
 8004924:	fb02 f303 	mul.w	r3, r2, r3
 8004928:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800492a:	e054      	b.n	80049d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004932:	d050      	beq.n	80049d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004934:	f7fd fd6c 	bl	8002410 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	69fa      	ldr	r2, [r7, #28]
 8004940:	429a      	cmp	r2, r3
 8004942:	d902      	bls.n	800494a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d13d      	bne.n	80049c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	685a      	ldr	r2, [r3, #4]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004958:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004962:	d111      	bne.n	8004988 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800496c:	d004      	beq.n	8004978 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004976:	d107      	bne.n	8004988 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004986:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800498c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004990:	d10f      	bne.n	80049b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80049b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e017      	b.n	80049f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d101      	bne.n	80049d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	3b01      	subs	r3, #1
 80049d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689a      	ldr	r2, [r3, #8]
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	4013      	ands	r3, r2
 80049e0:	68ba      	ldr	r2, [r7, #8]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	bf0c      	ite	eq
 80049e6:	2301      	moveq	r3, #1
 80049e8:	2300      	movne	r3, #0
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	461a      	mov	r2, r3
 80049ee:	79fb      	ldrb	r3, [r7, #7]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d19b      	bne.n	800492c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3720      	adds	r7, #32
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	20000000 	.word	0x20000000

08004a04 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af02      	add	r7, sp, #8
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a18:	d111      	bne.n	8004a3e <SPI_EndRxTransaction+0x3a>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a22:	d004      	beq.n	8004a2e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a2c:	d107      	bne.n	8004a3e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a3c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a46:	d12a      	bne.n	8004a9e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a50:	d012      	beq.n	8004a78 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	2180      	movs	r1, #128	@ 0x80
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f7ff ff49 	bl	80048f4 <SPI_WaitFlagStateUntilTimeout>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d02d      	beq.n	8004ac4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a6c:	f043 0220 	orr.w	r2, r3, #32
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e026      	b.n	8004ac6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	2101      	movs	r1, #1
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f7ff ff36 	bl	80048f4 <SPI_WaitFlagStateUntilTimeout>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d01a      	beq.n	8004ac4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a92:	f043 0220 	orr.w	r2, r3, #32
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e013      	b.n	8004ac6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	9300      	str	r3, [sp, #0]
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	68f8      	ldr	r0, [r7, #12]
 8004aaa:	f7ff ff23 	bl	80048f4 <SPI_WaitFlagStateUntilTimeout>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d007      	beq.n	8004ac4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ab8:	f043 0220 	orr.w	r2, r3, #32
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e000      	b.n	8004ac6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
	...

08004ad0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b088      	sub	sp, #32
 8004ad4:	af02      	add	r7, sp, #8
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	9300      	str	r3, [sp, #0]
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	2102      	movs	r1, #2
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f7ff ff04 	bl	80048f4 <SPI_WaitFlagStateUntilTimeout>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d007      	beq.n	8004b02 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004af6:	f043 0220 	orr.w	r2, r3, #32
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e032      	b.n	8004b68 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004b02:	4b1b      	ldr	r3, [pc, #108]	@ (8004b70 <SPI_EndRxTxTransaction+0xa0>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a1b      	ldr	r2, [pc, #108]	@ (8004b74 <SPI_EndRxTxTransaction+0xa4>)
 8004b08:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0c:	0d5b      	lsrs	r3, r3, #21
 8004b0e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004b12:	fb02 f303 	mul.w	r3, r2, r3
 8004b16:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b20:	d112      	bne.n	8004b48 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	9300      	str	r3, [sp, #0]
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	2180      	movs	r1, #128	@ 0x80
 8004b2c:	68f8      	ldr	r0, [r7, #12]
 8004b2e:	f7ff fee1 	bl	80048f4 <SPI_WaitFlagStateUntilTimeout>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d016      	beq.n	8004b66 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b3c:	f043 0220 	orr.w	r2, r3, #32
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e00f      	b.n	8004b68 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00a      	beq.n	8004b64 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	3b01      	subs	r3, #1
 8004b52:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b5e:	2b80      	cmp	r3, #128	@ 0x80
 8004b60:	d0f2      	beq.n	8004b48 <SPI_EndRxTxTransaction+0x78>
 8004b62:	e000      	b.n	8004b66 <SPI_EndRxTxTransaction+0x96>
        break;
 8004b64:	bf00      	nop
  }

  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3718      	adds	r7, #24
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	20000000 	.word	0x20000000
 8004b74:	165e9f81 	.word	0x165e9f81

08004b78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e041      	b.n	8004c0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d106      	bne.n	8004ba4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f7fc faf0 	bl	8001184 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	3304      	adds	r3, #4
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	4610      	mov	r0, r2
 8004bb8:	f000 fc58 	bl	800546c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3708      	adds	r7, #8
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
	...

08004c18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d001      	beq.n	8004c30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e04e      	b.n	8004cce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2202      	movs	r2, #2
 8004c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68da      	ldr	r2, [r3, #12]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f042 0201 	orr.w	r2, r2, #1
 8004c46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a23      	ldr	r2, [pc, #140]	@ (8004cdc <HAL_TIM_Base_Start_IT+0xc4>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d022      	beq.n	8004c98 <HAL_TIM_Base_Start_IT+0x80>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c5a:	d01d      	beq.n	8004c98 <HAL_TIM_Base_Start_IT+0x80>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a1f      	ldr	r2, [pc, #124]	@ (8004ce0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d018      	beq.n	8004c98 <HAL_TIM_Base_Start_IT+0x80>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a1e      	ldr	r2, [pc, #120]	@ (8004ce4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d013      	beq.n	8004c98 <HAL_TIM_Base_Start_IT+0x80>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a1c      	ldr	r2, [pc, #112]	@ (8004ce8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d00e      	beq.n	8004c98 <HAL_TIM_Base_Start_IT+0x80>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a1b      	ldr	r2, [pc, #108]	@ (8004cec <HAL_TIM_Base_Start_IT+0xd4>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d009      	beq.n	8004c98 <HAL_TIM_Base_Start_IT+0x80>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a19      	ldr	r2, [pc, #100]	@ (8004cf0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d004      	beq.n	8004c98 <HAL_TIM_Base_Start_IT+0x80>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a18      	ldr	r2, [pc, #96]	@ (8004cf4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d111      	bne.n	8004cbc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f003 0307 	and.w	r3, r3, #7
 8004ca2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2b06      	cmp	r3, #6
 8004ca8:	d010      	beq.n	8004ccc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f042 0201 	orr.w	r2, r2, #1
 8004cb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cba:	e007      	b.n	8004ccc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f042 0201 	orr.w	r2, r2, #1
 8004cca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3714      	adds	r7, #20
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	40010000 	.word	0x40010000
 8004ce0:	40000400 	.word	0x40000400
 8004ce4:	40000800 	.word	0x40000800
 8004ce8:	40000c00 	.word	0x40000c00
 8004cec:	40010400 	.word	0x40010400
 8004cf0:	40014000 	.word	0x40014000
 8004cf4:	40001800 	.word	0x40001800

08004cf8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d101      	bne.n	8004d0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e041      	b.n	8004d8e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d106      	bne.n	8004d24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f7fc fa9a 	bl	8001258 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2202      	movs	r2, #2
 8004d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	3304      	adds	r3, #4
 8004d34:	4619      	mov	r1, r3
 8004d36:	4610      	mov	r0, r2
 8004d38:	f000 fb98 	bl	800546c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3708      	adds	r7, #8
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
	...

08004d98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d109      	bne.n	8004dbc <HAL_TIM_PWM_Start+0x24>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	bf14      	ite	ne
 8004db4:	2301      	movne	r3, #1
 8004db6:	2300      	moveq	r3, #0
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	e022      	b.n	8004e02 <HAL_TIM_PWM_Start+0x6a>
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	d109      	bne.n	8004dd6 <HAL_TIM_PWM_Start+0x3e>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	bf14      	ite	ne
 8004dce:	2301      	movne	r3, #1
 8004dd0:	2300      	moveq	r3, #0
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	e015      	b.n	8004e02 <HAL_TIM_PWM_Start+0x6a>
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	2b08      	cmp	r3, #8
 8004dda:	d109      	bne.n	8004df0 <HAL_TIM_PWM_Start+0x58>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	bf14      	ite	ne
 8004de8:	2301      	movne	r3, #1
 8004dea:	2300      	moveq	r3, #0
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	e008      	b.n	8004e02 <HAL_TIM_PWM_Start+0x6a>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	bf14      	ite	ne
 8004dfc:	2301      	movne	r3, #1
 8004dfe:	2300      	moveq	r3, #0
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e07c      	b.n	8004f04 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d104      	bne.n	8004e1a <HAL_TIM_PWM_Start+0x82>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2202      	movs	r2, #2
 8004e14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e18:	e013      	b.n	8004e42 <HAL_TIM_PWM_Start+0xaa>
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	2b04      	cmp	r3, #4
 8004e1e:	d104      	bne.n	8004e2a <HAL_TIM_PWM_Start+0x92>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2202      	movs	r2, #2
 8004e24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e28:	e00b      	b.n	8004e42 <HAL_TIM_PWM_Start+0xaa>
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d104      	bne.n	8004e3a <HAL_TIM_PWM_Start+0xa2>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e38:	e003      	b.n	8004e42 <HAL_TIM_PWM_Start+0xaa>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2202      	movs	r2, #2
 8004e3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2201      	movs	r2, #1
 8004e48:	6839      	ldr	r1, [r7, #0]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f000 fe04 	bl	8005a58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a2d      	ldr	r2, [pc, #180]	@ (8004f0c <HAL_TIM_PWM_Start+0x174>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d004      	beq.n	8004e64 <HAL_TIM_PWM_Start+0xcc>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a2c      	ldr	r2, [pc, #176]	@ (8004f10 <HAL_TIM_PWM_Start+0x178>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d101      	bne.n	8004e68 <HAL_TIM_PWM_Start+0xd0>
 8004e64:	2301      	movs	r3, #1
 8004e66:	e000      	b.n	8004e6a <HAL_TIM_PWM_Start+0xd2>
 8004e68:	2300      	movs	r3, #0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d007      	beq.n	8004e7e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e7c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a22      	ldr	r2, [pc, #136]	@ (8004f0c <HAL_TIM_PWM_Start+0x174>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d022      	beq.n	8004ece <HAL_TIM_PWM_Start+0x136>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e90:	d01d      	beq.n	8004ece <HAL_TIM_PWM_Start+0x136>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a1f      	ldr	r2, [pc, #124]	@ (8004f14 <HAL_TIM_PWM_Start+0x17c>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d018      	beq.n	8004ece <HAL_TIM_PWM_Start+0x136>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a1d      	ldr	r2, [pc, #116]	@ (8004f18 <HAL_TIM_PWM_Start+0x180>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d013      	beq.n	8004ece <HAL_TIM_PWM_Start+0x136>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a1c      	ldr	r2, [pc, #112]	@ (8004f1c <HAL_TIM_PWM_Start+0x184>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d00e      	beq.n	8004ece <HAL_TIM_PWM_Start+0x136>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a16      	ldr	r2, [pc, #88]	@ (8004f10 <HAL_TIM_PWM_Start+0x178>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d009      	beq.n	8004ece <HAL_TIM_PWM_Start+0x136>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a18      	ldr	r2, [pc, #96]	@ (8004f20 <HAL_TIM_PWM_Start+0x188>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d004      	beq.n	8004ece <HAL_TIM_PWM_Start+0x136>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a16      	ldr	r2, [pc, #88]	@ (8004f24 <HAL_TIM_PWM_Start+0x18c>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d111      	bne.n	8004ef2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f003 0307 	and.w	r3, r3, #7
 8004ed8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2b06      	cmp	r3, #6
 8004ede:	d010      	beq.n	8004f02 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f042 0201 	orr.w	r2, r2, #1
 8004eee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ef0:	e007      	b.n	8004f02 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f042 0201 	orr.w	r2, r2, #1
 8004f00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	40010000 	.word	0x40010000
 8004f10:	40010400 	.word	0x40010400
 8004f14:	40000400 	.word	0x40000400
 8004f18:	40000800 	.word	0x40000800
 8004f1c:	40000c00 	.word	0x40000c00
 8004f20:	40014000 	.word	0x40014000
 8004f24:	40001800 	.word	0x40001800

08004f28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d020      	beq.n	8004f8c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f003 0302 	and.w	r3, r3, #2
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d01b      	beq.n	8004f8c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f06f 0202 	mvn.w	r2, #2
 8004f5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	f003 0303 	and.w	r3, r3, #3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 fa5b 	bl	800542e <HAL_TIM_IC_CaptureCallback>
 8004f78:	e005      	b.n	8004f86 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 fa4d 	bl	800541a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 fa5e 	bl	8005442 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	f003 0304 	and.w	r3, r3, #4
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d020      	beq.n	8004fd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f003 0304 	and.w	r3, r3, #4
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d01b      	beq.n	8004fd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f06f 0204 	mvn.w	r2, #4
 8004fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2202      	movs	r2, #2
 8004fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d003      	beq.n	8004fc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 fa35 	bl	800542e <HAL_TIM_IC_CaptureCallback>
 8004fc4:	e005      	b.n	8004fd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 fa27 	bl	800541a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 fa38 	bl	8005442 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	f003 0308 	and.w	r3, r3, #8
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d020      	beq.n	8005024 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f003 0308 	and.w	r3, r3, #8
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d01b      	beq.n	8005024 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f06f 0208 	mvn.w	r2, #8
 8004ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2204      	movs	r2, #4
 8004ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	f003 0303 	and.w	r3, r3, #3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 fa0f 	bl	800542e <HAL_TIM_IC_CaptureCallback>
 8005010:	e005      	b.n	800501e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 fa01 	bl	800541a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 fa12 	bl	8005442 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	f003 0310 	and.w	r3, r3, #16
 800502a:	2b00      	cmp	r3, #0
 800502c:	d020      	beq.n	8005070 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f003 0310 	and.w	r3, r3, #16
 8005034:	2b00      	cmp	r3, #0
 8005036:	d01b      	beq.n	8005070 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f06f 0210 	mvn.w	r2, #16
 8005040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2208      	movs	r2, #8
 8005046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005052:	2b00      	cmp	r3, #0
 8005054:	d003      	beq.n	800505e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f9e9 	bl	800542e <HAL_TIM_IC_CaptureCallback>
 800505c:	e005      	b.n	800506a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f9db 	bl	800541a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 f9ec 	bl	8005442 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00c      	beq.n	8005094 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f003 0301 	and.w	r3, r3, #1
 8005080:	2b00      	cmp	r3, #0
 8005082:	d007      	beq.n	8005094 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f06f 0201 	mvn.w	r2, #1
 800508c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f7fb fe58 	bl	8000d44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00c      	beq.n	80050b8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d007      	beq.n	80050b8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80050b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 fd7c 	bl	8005bb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00c      	beq.n	80050dc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d007      	beq.n	80050dc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80050d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f9bd 	bl	8005456 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	f003 0320 	and.w	r3, r3, #32
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00c      	beq.n	8005100 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f003 0320 	and.w	r3, r3, #32
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d007      	beq.n	8005100 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f06f 0220 	mvn.w	r2, #32
 80050f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 fd4e 	bl	8005b9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005100:	bf00      	nop
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b086      	sub	sp, #24
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005114:	2300      	movs	r3, #0
 8005116:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800511e:	2b01      	cmp	r3, #1
 8005120:	d101      	bne.n	8005126 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005122:	2302      	movs	r3, #2
 8005124:	e0ae      	b.n	8005284 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2b0c      	cmp	r3, #12
 8005132:	f200 809f 	bhi.w	8005274 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005136:	a201      	add	r2, pc, #4	@ (adr r2, 800513c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800513c:	08005171 	.word	0x08005171
 8005140:	08005275 	.word	0x08005275
 8005144:	08005275 	.word	0x08005275
 8005148:	08005275 	.word	0x08005275
 800514c:	080051b1 	.word	0x080051b1
 8005150:	08005275 	.word	0x08005275
 8005154:	08005275 	.word	0x08005275
 8005158:	08005275 	.word	0x08005275
 800515c:	080051f3 	.word	0x080051f3
 8005160:	08005275 	.word	0x08005275
 8005164:	08005275 	.word	0x08005275
 8005168:	08005275 	.word	0x08005275
 800516c:	08005233 	.word	0x08005233
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68b9      	ldr	r1, [r7, #8]
 8005176:	4618      	mov	r0, r3
 8005178:	f000 fa24 	bl	80055c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	699a      	ldr	r2, [r3, #24]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f042 0208 	orr.w	r2, r2, #8
 800518a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	699a      	ldr	r2, [r3, #24]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f022 0204 	bic.w	r2, r2, #4
 800519a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	6999      	ldr	r1, [r3, #24]
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	691a      	ldr	r2, [r3, #16]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	619a      	str	r2, [r3, #24]
      break;
 80051ae:	e064      	b.n	800527a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68b9      	ldr	r1, [r7, #8]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 fa74 	bl	80056a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	699a      	ldr	r2, [r3, #24]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	699a      	ldr	r2, [r3, #24]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6999      	ldr	r1, [r3, #24]
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	021a      	lsls	r2, r3, #8
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	619a      	str	r2, [r3, #24]
      break;
 80051f0:	e043      	b.n	800527a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68b9      	ldr	r1, [r7, #8]
 80051f8:	4618      	mov	r0, r3
 80051fa:	f000 fac9 	bl	8005790 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	69da      	ldr	r2, [r3, #28]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f042 0208 	orr.w	r2, r2, #8
 800520c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	69da      	ldr	r2, [r3, #28]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f022 0204 	bic.w	r2, r2, #4
 800521c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	69d9      	ldr	r1, [r3, #28]
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	691a      	ldr	r2, [r3, #16]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	430a      	orrs	r2, r1
 800522e:	61da      	str	r2, [r3, #28]
      break;
 8005230:	e023      	b.n	800527a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68b9      	ldr	r1, [r7, #8]
 8005238:	4618      	mov	r0, r3
 800523a:	f000 fb1d 	bl	8005878 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	69da      	ldr	r2, [r3, #28]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800524c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	69da      	ldr	r2, [r3, #28]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800525c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	69d9      	ldr	r1, [r3, #28]
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	021a      	lsls	r2, r3, #8
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	430a      	orrs	r2, r1
 8005270:	61da      	str	r2, [r3, #28]
      break;
 8005272:	e002      	b.n	800527a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	75fb      	strb	r3, [r7, #23]
      break;
 8005278:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005282:	7dfb      	ldrb	r3, [r7, #23]
}
 8005284:	4618      	mov	r0, r3
 8005286:	3718      	adds	r7, #24
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005296:	2300      	movs	r3, #0
 8005298:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d101      	bne.n	80052a8 <HAL_TIM_ConfigClockSource+0x1c>
 80052a4:	2302      	movs	r3, #2
 80052a6:	e0b4      	b.n	8005412 <HAL_TIM_ConfigClockSource+0x186>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2202      	movs	r2, #2
 80052b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80052c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052e0:	d03e      	beq.n	8005360 <HAL_TIM_ConfigClockSource+0xd4>
 80052e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052e6:	f200 8087 	bhi.w	80053f8 <HAL_TIM_ConfigClockSource+0x16c>
 80052ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052ee:	f000 8086 	beq.w	80053fe <HAL_TIM_ConfigClockSource+0x172>
 80052f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052f6:	d87f      	bhi.n	80053f8 <HAL_TIM_ConfigClockSource+0x16c>
 80052f8:	2b70      	cmp	r3, #112	@ 0x70
 80052fa:	d01a      	beq.n	8005332 <HAL_TIM_ConfigClockSource+0xa6>
 80052fc:	2b70      	cmp	r3, #112	@ 0x70
 80052fe:	d87b      	bhi.n	80053f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005300:	2b60      	cmp	r3, #96	@ 0x60
 8005302:	d050      	beq.n	80053a6 <HAL_TIM_ConfigClockSource+0x11a>
 8005304:	2b60      	cmp	r3, #96	@ 0x60
 8005306:	d877      	bhi.n	80053f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005308:	2b50      	cmp	r3, #80	@ 0x50
 800530a:	d03c      	beq.n	8005386 <HAL_TIM_ConfigClockSource+0xfa>
 800530c:	2b50      	cmp	r3, #80	@ 0x50
 800530e:	d873      	bhi.n	80053f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005310:	2b40      	cmp	r3, #64	@ 0x40
 8005312:	d058      	beq.n	80053c6 <HAL_TIM_ConfigClockSource+0x13a>
 8005314:	2b40      	cmp	r3, #64	@ 0x40
 8005316:	d86f      	bhi.n	80053f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005318:	2b30      	cmp	r3, #48	@ 0x30
 800531a:	d064      	beq.n	80053e6 <HAL_TIM_ConfigClockSource+0x15a>
 800531c:	2b30      	cmp	r3, #48	@ 0x30
 800531e:	d86b      	bhi.n	80053f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005320:	2b20      	cmp	r3, #32
 8005322:	d060      	beq.n	80053e6 <HAL_TIM_ConfigClockSource+0x15a>
 8005324:	2b20      	cmp	r3, #32
 8005326:	d867      	bhi.n	80053f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005328:	2b00      	cmp	r3, #0
 800532a:	d05c      	beq.n	80053e6 <HAL_TIM_ConfigClockSource+0x15a>
 800532c:	2b10      	cmp	r3, #16
 800532e:	d05a      	beq.n	80053e6 <HAL_TIM_ConfigClockSource+0x15a>
 8005330:	e062      	b.n	80053f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005342:	f000 fb69 	bl	8005a18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005354:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	609a      	str	r2, [r3, #8]
      break;
 800535e:	e04f      	b.n	8005400 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005370:	f000 fb52 	bl	8005a18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689a      	ldr	r2, [r3, #8]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005382:	609a      	str	r2, [r3, #8]
      break;
 8005384:	e03c      	b.n	8005400 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005392:	461a      	mov	r2, r3
 8005394:	f000 fac6 	bl	8005924 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2150      	movs	r1, #80	@ 0x50
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 fb1f 	bl	80059e2 <TIM_ITRx_SetConfig>
      break;
 80053a4:	e02c      	b.n	8005400 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053b2:	461a      	mov	r2, r3
 80053b4:	f000 fae5 	bl	8005982 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2160      	movs	r1, #96	@ 0x60
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 fb0f 	bl	80059e2 <TIM_ITRx_SetConfig>
      break;
 80053c4:	e01c      	b.n	8005400 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053d2:	461a      	mov	r2, r3
 80053d4:	f000 faa6 	bl	8005924 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2140      	movs	r1, #64	@ 0x40
 80053de:	4618      	mov	r0, r3
 80053e0:	f000 faff 	bl	80059e2 <TIM_ITRx_SetConfig>
      break;
 80053e4:	e00c      	b.n	8005400 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4619      	mov	r1, r3
 80053f0:	4610      	mov	r0, r2
 80053f2:	f000 faf6 	bl	80059e2 <TIM_ITRx_SetConfig>
      break;
 80053f6:	e003      	b.n	8005400 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	73fb      	strb	r3, [r7, #15]
      break;
 80053fc:	e000      	b.n	8005400 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80053fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005410:	7bfb      	ldrb	r3, [r7, #15]
}
 8005412:	4618      	mov	r0, r3
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800541a:	b480      	push	{r7}
 800541c:	b083      	sub	sp, #12
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005422:	bf00      	nop
 8005424:	370c      	adds	r7, #12
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800542e:	b480      	push	{r7}
 8005430:	b083      	sub	sp, #12
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005436:	bf00      	nop
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005442:	b480      	push	{r7}
 8005444:	b083      	sub	sp, #12
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800544a:	bf00      	nop
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005456:	b480      	push	{r7}
 8005458:	b083      	sub	sp, #12
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800545e:	bf00      	nop
 8005460:	370c      	adds	r7, #12
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
	...

0800546c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a46      	ldr	r2, [pc, #280]	@ (8005598 <TIM_Base_SetConfig+0x12c>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d013      	beq.n	80054ac <TIM_Base_SetConfig+0x40>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800548a:	d00f      	beq.n	80054ac <TIM_Base_SetConfig+0x40>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a43      	ldr	r2, [pc, #268]	@ (800559c <TIM_Base_SetConfig+0x130>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d00b      	beq.n	80054ac <TIM_Base_SetConfig+0x40>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a42      	ldr	r2, [pc, #264]	@ (80055a0 <TIM_Base_SetConfig+0x134>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d007      	beq.n	80054ac <TIM_Base_SetConfig+0x40>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a41      	ldr	r2, [pc, #260]	@ (80055a4 <TIM_Base_SetConfig+0x138>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d003      	beq.n	80054ac <TIM_Base_SetConfig+0x40>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a40      	ldr	r2, [pc, #256]	@ (80055a8 <TIM_Base_SetConfig+0x13c>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d108      	bne.n	80054be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a35      	ldr	r2, [pc, #212]	@ (8005598 <TIM_Base_SetConfig+0x12c>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d02b      	beq.n	800551e <TIM_Base_SetConfig+0xb2>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054cc:	d027      	beq.n	800551e <TIM_Base_SetConfig+0xb2>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a32      	ldr	r2, [pc, #200]	@ (800559c <TIM_Base_SetConfig+0x130>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d023      	beq.n	800551e <TIM_Base_SetConfig+0xb2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a31      	ldr	r2, [pc, #196]	@ (80055a0 <TIM_Base_SetConfig+0x134>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d01f      	beq.n	800551e <TIM_Base_SetConfig+0xb2>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a30      	ldr	r2, [pc, #192]	@ (80055a4 <TIM_Base_SetConfig+0x138>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d01b      	beq.n	800551e <TIM_Base_SetConfig+0xb2>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a2f      	ldr	r2, [pc, #188]	@ (80055a8 <TIM_Base_SetConfig+0x13c>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d017      	beq.n	800551e <TIM_Base_SetConfig+0xb2>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a2e      	ldr	r2, [pc, #184]	@ (80055ac <TIM_Base_SetConfig+0x140>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d013      	beq.n	800551e <TIM_Base_SetConfig+0xb2>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a2d      	ldr	r2, [pc, #180]	@ (80055b0 <TIM_Base_SetConfig+0x144>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d00f      	beq.n	800551e <TIM_Base_SetConfig+0xb2>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a2c      	ldr	r2, [pc, #176]	@ (80055b4 <TIM_Base_SetConfig+0x148>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d00b      	beq.n	800551e <TIM_Base_SetConfig+0xb2>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a2b      	ldr	r2, [pc, #172]	@ (80055b8 <TIM_Base_SetConfig+0x14c>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d007      	beq.n	800551e <TIM_Base_SetConfig+0xb2>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a2a      	ldr	r2, [pc, #168]	@ (80055bc <TIM_Base_SetConfig+0x150>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d003      	beq.n	800551e <TIM_Base_SetConfig+0xb2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a29      	ldr	r2, [pc, #164]	@ (80055c0 <TIM_Base_SetConfig+0x154>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d108      	bne.n	8005530 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005524:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	4313      	orrs	r3, r2
 800552e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	4313      	orrs	r3, r2
 800553c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	689a      	ldr	r2, [r3, #8]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a10      	ldr	r2, [pc, #64]	@ (8005598 <TIM_Base_SetConfig+0x12c>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d003      	beq.n	8005564 <TIM_Base_SetConfig+0xf8>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a12      	ldr	r2, [pc, #72]	@ (80055a8 <TIM_Base_SetConfig+0x13c>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d103      	bne.n	800556c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	691a      	ldr	r2, [r3, #16]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b01      	cmp	r3, #1
 800557c:	d105      	bne.n	800558a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	f023 0201 	bic.w	r2, r3, #1
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	611a      	str	r2, [r3, #16]
  }
}
 800558a:	bf00      	nop
 800558c:	3714      	adds	r7, #20
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	40010000 	.word	0x40010000
 800559c:	40000400 	.word	0x40000400
 80055a0:	40000800 	.word	0x40000800
 80055a4:	40000c00 	.word	0x40000c00
 80055a8:	40010400 	.word	0x40010400
 80055ac:	40014000 	.word	0x40014000
 80055b0:	40014400 	.word	0x40014400
 80055b4:	40014800 	.word	0x40014800
 80055b8:	40001800 	.word	0x40001800
 80055bc:	40001c00 	.word	0x40001c00
 80055c0:	40002000 	.word	0x40002000

080055c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b087      	sub	sp, #28
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a1b      	ldr	r3, [r3, #32]
 80055d8:	f023 0201 	bic.w	r2, r3, #1
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f023 0303 	bic.w	r3, r3, #3
 80055fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	4313      	orrs	r3, r2
 8005604:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f023 0302 	bic.w	r3, r3, #2
 800560c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	4313      	orrs	r3, r2
 8005616:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a20      	ldr	r2, [pc, #128]	@ (800569c <TIM_OC1_SetConfig+0xd8>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d003      	beq.n	8005628 <TIM_OC1_SetConfig+0x64>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a1f      	ldr	r2, [pc, #124]	@ (80056a0 <TIM_OC1_SetConfig+0xdc>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d10c      	bne.n	8005642 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	f023 0308 	bic.w	r3, r3, #8
 800562e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	4313      	orrs	r3, r2
 8005638:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f023 0304 	bic.w	r3, r3, #4
 8005640:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a15      	ldr	r2, [pc, #84]	@ (800569c <TIM_OC1_SetConfig+0xd8>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d003      	beq.n	8005652 <TIM_OC1_SetConfig+0x8e>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a14      	ldr	r2, [pc, #80]	@ (80056a0 <TIM_OC1_SetConfig+0xdc>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d111      	bne.n	8005676 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005658:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005660:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	4313      	orrs	r3, r2
 800566a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	4313      	orrs	r3, r2
 8005674:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	685a      	ldr	r2, [r3, #4]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	697a      	ldr	r2, [r7, #20]
 800568e:	621a      	str	r2, [r3, #32]
}
 8005690:	bf00      	nop
 8005692:	371c      	adds	r7, #28
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr
 800569c:	40010000 	.word	0x40010000
 80056a0:	40010400 	.word	0x40010400

080056a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b087      	sub	sp, #28
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a1b      	ldr	r3, [r3, #32]
 80056b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a1b      	ldr	r3, [r3, #32]
 80056b8:	f023 0210 	bic.w	r2, r3, #16
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	021b      	lsls	r3, r3, #8
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	f023 0320 	bic.w	r3, r3, #32
 80056ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	011b      	lsls	r3, r3, #4
 80056f6:	697a      	ldr	r2, [r7, #20]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a22      	ldr	r2, [pc, #136]	@ (8005788 <TIM_OC2_SetConfig+0xe4>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d003      	beq.n	800570c <TIM_OC2_SetConfig+0x68>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a21      	ldr	r2, [pc, #132]	@ (800578c <TIM_OC2_SetConfig+0xe8>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d10d      	bne.n	8005728 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005712:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	011b      	lsls	r3, r3, #4
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	4313      	orrs	r3, r2
 800571e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005726:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a17      	ldr	r2, [pc, #92]	@ (8005788 <TIM_OC2_SetConfig+0xe4>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d003      	beq.n	8005738 <TIM_OC2_SetConfig+0x94>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a16      	ldr	r2, [pc, #88]	@ (800578c <TIM_OC2_SetConfig+0xe8>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d113      	bne.n	8005760 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800573e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005746:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	695b      	ldr	r3, [r3, #20]
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	4313      	orrs	r3, r2
 8005752:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	699b      	ldr	r3, [r3, #24]
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	693a      	ldr	r2, [r7, #16]
 800575c:	4313      	orrs	r3, r2
 800575e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	685a      	ldr	r2, [r3, #4]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	621a      	str	r2, [r3, #32]
}
 800577a:	bf00      	nop
 800577c:	371c      	adds	r7, #28
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	40010000 	.word	0x40010000
 800578c:	40010400 	.word	0x40010400

08005790 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005790:	b480      	push	{r7}
 8005792:	b087      	sub	sp, #28
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a1b      	ldr	r3, [r3, #32]
 800579e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a1b      	ldr	r3, [r3, #32]
 80057a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	69db      	ldr	r3, [r3, #28]
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f023 0303 	bic.w	r3, r3, #3
 80057c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	021b      	lsls	r3, r3, #8
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a21      	ldr	r2, [pc, #132]	@ (8005870 <TIM_OC3_SetConfig+0xe0>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d003      	beq.n	80057f6 <TIM_OC3_SetConfig+0x66>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a20      	ldr	r2, [pc, #128]	@ (8005874 <TIM_OC3_SetConfig+0xe4>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d10d      	bne.n	8005812 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80057fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	021b      	lsls	r3, r3, #8
 8005804:	697a      	ldr	r2, [r7, #20]
 8005806:	4313      	orrs	r3, r2
 8005808:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005810:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a16      	ldr	r2, [pc, #88]	@ (8005870 <TIM_OC3_SetConfig+0xe0>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d003      	beq.n	8005822 <TIM_OC3_SetConfig+0x92>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a15      	ldr	r2, [pc, #84]	@ (8005874 <TIM_OC3_SetConfig+0xe4>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d113      	bne.n	800584a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005828:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005830:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	011b      	lsls	r3, r3, #4
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	4313      	orrs	r3, r2
 800583c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	011b      	lsls	r3, r3, #4
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	4313      	orrs	r3, r2
 8005848:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	693a      	ldr	r2, [r7, #16]
 800584e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	685a      	ldr	r2, [r3, #4]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	621a      	str	r2, [r3, #32]
}
 8005864:	bf00      	nop
 8005866:	371c      	adds	r7, #28
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr
 8005870:	40010000 	.word	0x40010000
 8005874:	40010400 	.word	0x40010400

08005878 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005878:	b480      	push	{r7}
 800587a:	b087      	sub	sp, #28
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a1b      	ldr	r3, [r3, #32]
 800588c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	69db      	ldr	r3, [r3, #28]
 800589e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	021b      	lsls	r3, r3, #8
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80058c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	031b      	lsls	r3, r3, #12
 80058ca:	693a      	ldr	r2, [r7, #16]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a12      	ldr	r2, [pc, #72]	@ (800591c <TIM_OC4_SetConfig+0xa4>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d003      	beq.n	80058e0 <TIM_OC4_SetConfig+0x68>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a11      	ldr	r2, [pc, #68]	@ (8005920 <TIM_OC4_SetConfig+0xa8>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d109      	bne.n	80058f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	019b      	lsls	r3, r3, #6
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	621a      	str	r2, [r3, #32]
}
 800590e:	bf00      	nop
 8005910:	371c      	adds	r7, #28
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	40010000 	.word	0x40010000
 8005920:	40010400 	.word	0x40010400

08005924 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005924:	b480      	push	{r7}
 8005926:	b087      	sub	sp, #28
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6a1b      	ldr	r3, [r3, #32]
 8005934:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	f023 0201 	bic.w	r2, r3, #1
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800594e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	011b      	lsls	r3, r3, #4
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	4313      	orrs	r3, r2
 8005958:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	f023 030a 	bic.w	r3, r3, #10
 8005960:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	4313      	orrs	r3, r2
 8005968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	621a      	str	r2, [r3, #32]
}
 8005976:	bf00      	nop
 8005978:	371c      	adds	r7, #28
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr

08005982 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005982:	b480      	push	{r7}
 8005984:	b087      	sub	sp, #28
 8005986:	af00      	add	r7, sp, #0
 8005988:	60f8      	str	r0, [r7, #12]
 800598a:	60b9      	str	r1, [r7, #8]
 800598c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6a1b      	ldr	r3, [r3, #32]
 8005998:	f023 0210 	bic.w	r2, r3, #16
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80059ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	031b      	lsls	r3, r3, #12
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80059be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	011b      	lsls	r3, r3, #4
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	697a      	ldr	r2, [r7, #20]
 80059d4:	621a      	str	r2, [r3, #32]
}
 80059d6:	bf00      	nop
 80059d8:	371c      	adds	r7, #28
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr

080059e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059e2:	b480      	push	{r7}
 80059e4:	b085      	sub	sp, #20
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
 80059ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059fa:	683a      	ldr	r2, [r7, #0]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	f043 0307 	orr.w	r3, r3, #7
 8005a04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	609a      	str	r2, [r3, #8]
}
 8005a0c:	bf00      	nop
 8005a0e:	3714      	adds	r7, #20
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b087      	sub	sp, #28
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
 8005a24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	021a      	lsls	r2, r3, #8
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	431a      	orrs	r2, r3
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	697a      	ldr	r2, [r7, #20]
 8005a4a:	609a      	str	r2, [r3, #8]
}
 8005a4c:	bf00      	nop
 8005a4e:	371c      	adds	r7, #28
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b087      	sub	sp, #28
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	f003 031f 	and.w	r3, r3, #31
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6a1a      	ldr	r2, [r3, #32]
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	43db      	mvns	r3, r3
 8005a7a:	401a      	ands	r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6a1a      	ldr	r2, [r3, #32]
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	f003 031f 	and.w	r3, r3, #31
 8005a8a:	6879      	ldr	r1, [r7, #4]
 8005a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a90:	431a      	orrs	r2, r3
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	621a      	str	r2, [r3, #32]
}
 8005a96:	bf00      	nop
 8005a98:	371c      	adds	r7, #28
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
	...

08005aa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d101      	bne.n	8005abc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ab8:	2302      	movs	r3, #2
 8005aba:	e05a      	b.n	8005b72 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ae2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a21      	ldr	r2, [pc, #132]	@ (8005b80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d022      	beq.n	8005b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b08:	d01d      	beq.n	8005b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a1d      	ldr	r2, [pc, #116]	@ (8005b84 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d018      	beq.n	8005b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a1b      	ldr	r2, [pc, #108]	@ (8005b88 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d013      	beq.n	8005b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a1a      	ldr	r2, [pc, #104]	@ (8005b8c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d00e      	beq.n	8005b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a18      	ldr	r2, [pc, #96]	@ (8005b90 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d009      	beq.n	8005b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a17      	ldr	r2, [pc, #92]	@ (8005b94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d004      	beq.n	8005b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a15      	ldr	r2, [pc, #84]	@ (8005b98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d10c      	bne.n	8005b60 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68ba      	ldr	r2, [r7, #8]
 8005b5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3714      	adds	r7, #20
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	40010000 	.word	0x40010000
 8005b84:	40000400 	.word	0x40000400
 8005b88:	40000800 	.word	0x40000800
 8005b8c:	40000c00 	.word	0x40000c00
 8005b90:	40010400 	.word	0x40010400
 8005b94:	40014000 	.word	0x40014000
 8005b98:	40001800 	.word	0x40001800

08005b9c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ba4:	bf00      	nop
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d101      	bne.n	8005bd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e042      	b.n	8005c5c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d106      	bne.n	8005bf0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f7fb fc76 	bl	80014dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2224      	movs	r2, #36	@ 0x24
 8005bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68da      	ldr	r2, [r3, #12]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 f82b 	bl	8005c64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	691a      	ldr	r2, [r3, #16]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	695a      	ldr	r2, [r3, #20]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68da      	ldr	r2, [r3, #12]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2220      	movs	r2, #32
 8005c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2220      	movs	r2, #32
 8005c50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3708      	adds	r7, #8
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c68:	b0c0      	sub	sp, #256	@ 0x100
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c80:	68d9      	ldr	r1, [r3, #12]
 8005c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	ea40 0301 	orr.w	r3, r0, r1
 8005c8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c92:	689a      	ldr	r2, [r3, #8]
 8005c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	431a      	orrs	r2, r3
 8005c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	431a      	orrs	r2, r3
 8005ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ca8:	69db      	ldr	r3, [r3, #28]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005cbc:	f021 010c 	bic.w	r1, r1, #12
 8005cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005cca:	430b      	orrs	r3, r1
 8005ccc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cde:	6999      	ldr	r1, [r3, #24]
 8005ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	ea40 0301 	orr.w	r3, r0, r1
 8005cea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	4b8f      	ldr	r3, [pc, #572]	@ (8005f30 <UART_SetConfig+0x2cc>)
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d005      	beq.n	8005d04 <UART_SetConfig+0xa0>
 8005cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	4b8d      	ldr	r3, [pc, #564]	@ (8005f34 <UART_SetConfig+0x2d0>)
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d104      	bne.n	8005d0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d04:	f7fe f920 	bl	8003f48 <HAL_RCC_GetPCLK2Freq>
 8005d08:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005d0c:	e003      	b.n	8005d16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d0e:	f7fe f907 	bl	8003f20 <HAL_RCC_GetPCLK1Freq>
 8005d12:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d1a:	69db      	ldr	r3, [r3, #28]
 8005d1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d20:	f040 810c 	bne.w	8005f3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005d2e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005d32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005d36:	4622      	mov	r2, r4
 8005d38:	462b      	mov	r3, r5
 8005d3a:	1891      	adds	r1, r2, r2
 8005d3c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005d3e:	415b      	adcs	r3, r3
 8005d40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005d46:	4621      	mov	r1, r4
 8005d48:	eb12 0801 	adds.w	r8, r2, r1
 8005d4c:	4629      	mov	r1, r5
 8005d4e:	eb43 0901 	adc.w	r9, r3, r1
 8005d52:	f04f 0200 	mov.w	r2, #0
 8005d56:	f04f 0300 	mov.w	r3, #0
 8005d5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d66:	4690      	mov	r8, r2
 8005d68:	4699      	mov	r9, r3
 8005d6a:	4623      	mov	r3, r4
 8005d6c:	eb18 0303 	adds.w	r3, r8, r3
 8005d70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005d74:	462b      	mov	r3, r5
 8005d76:	eb49 0303 	adc.w	r3, r9, r3
 8005d7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005d8a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005d8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005d92:	460b      	mov	r3, r1
 8005d94:	18db      	adds	r3, r3, r3
 8005d96:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d98:	4613      	mov	r3, r2
 8005d9a:	eb42 0303 	adc.w	r3, r2, r3
 8005d9e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005da0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005da4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005da8:	f7fa fa62 	bl	8000270 <__aeabi_uldivmod>
 8005dac:	4602      	mov	r2, r0
 8005dae:	460b      	mov	r3, r1
 8005db0:	4b61      	ldr	r3, [pc, #388]	@ (8005f38 <UART_SetConfig+0x2d4>)
 8005db2:	fba3 2302 	umull	r2, r3, r3, r2
 8005db6:	095b      	lsrs	r3, r3, #5
 8005db8:	011c      	lsls	r4, r3, #4
 8005dba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005dc4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005dc8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005dcc:	4642      	mov	r2, r8
 8005dce:	464b      	mov	r3, r9
 8005dd0:	1891      	adds	r1, r2, r2
 8005dd2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005dd4:	415b      	adcs	r3, r3
 8005dd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005dd8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005ddc:	4641      	mov	r1, r8
 8005dde:	eb12 0a01 	adds.w	sl, r2, r1
 8005de2:	4649      	mov	r1, r9
 8005de4:	eb43 0b01 	adc.w	fp, r3, r1
 8005de8:	f04f 0200 	mov.w	r2, #0
 8005dec:	f04f 0300 	mov.w	r3, #0
 8005df0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005df4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005df8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005dfc:	4692      	mov	sl, r2
 8005dfe:	469b      	mov	fp, r3
 8005e00:	4643      	mov	r3, r8
 8005e02:	eb1a 0303 	adds.w	r3, sl, r3
 8005e06:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e0a:	464b      	mov	r3, r9
 8005e0c:	eb4b 0303 	adc.w	r3, fp, r3
 8005e10:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e20:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005e24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005e28:	460b      	mov	r3, r1
 8005e2a:	18db      	adds	r3, r3, r3
 8005e2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e2e:	4613      	mov	r3, r2
 8005e30:	eb42 0303 	adc.w	r3, r2, r3
 8005e34:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005e3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005e3e:	f7fa fa17 	bl	8000270 <__aeabi_uldivmod>
 8005e42:	4602      	mov	r2, r0
 8005e44:	460b      	mov	r3, r1
 8005e46:	4611      	mov	r1, r2
 8005e48:	4b3b      	ldr	r3, [pc, #236]	@ (8005f38 <UART_SetConfig+0x2d4>)
 8005e4a:	fba3 2301 	umull	r2, r3, r3, r1
 8005e4e:	095b      	lsrs	r3, r3, #5
 8005e50:	2264      	movs	r2, #100	@ 0x64
 8005e52:	fb02 f303 	mul.w	r3, r2, r3
 8005e56:	1acb      	subs	r3, r1, r3
 8005e58:	00db      	lsls	r3, r3, #3
 8005e5a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005e5e:	4b36      	ldr	r3, [pc, #216]	@ (8005f38 <UART_SetConfig+0x2d4>)
 8005e60:	fba3 2302 	umull	r2, r3, r3, r2
 8005e64:	095b      	lsrs	r3, r3, #5
 8005e66:	005b      	lsls	r3, r3, #1
 8005e68:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005e6c:	441c      	add	r4, r3
 8005e6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e72:	2200      	movs	r2, #0
 8005e74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e78:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005e7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005e80:	4642      	mov	r2, r8
 8005e82:	464b      	mov	r3, r9
 8005e84:	1891      	adds	r1, r2, r2
 8005e86:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005e88:	415b      	adcs	r3, r3
 8005e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005e90:	4641      	mov	r1, r8
 8005e92:	1851      	adds	r1, r2, r1
 8005e94:	6339      	str	r1, [r7, #48]	@ 0x30
 8005e96:	4649      	mov	r1, r9
 8005e98:	414b      	adcs	r3, r1
 8005e9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e9c:	f04f 0200 	mov.w	r2, #0
 8005ea0:	f04f 0300 	mov.w	r3, #0
 8005ea4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005ea8:	4659      	mov	r1, fp
 8005eaa:	00cb      	lsls	r3, r1, #3
 8005eac:	4651      	mov	r1, sl
 8005eae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005eb2:	4651      	mov	r1, sl
 8005eb4:	00ca      	lsls	r2, r1, #3
 8005eb6:	4610      	mov	r0, r2
 8005eb8:	4619      	mov	r1, r3
 8005eba:	4603      	mov	r3, r0
 8005ebc:	4642      	mov	r2, r8
 8005ebe:	189b      	adds	r3, r3, r2
 8005ec0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ec4:	464b      	mov	r3, r9
 8005ec6:	460a      	mov	r2, r1
 8005ec8:	eb42 0303 	adc.w	r3, r2, r3
 8005ecc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005edc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005ee0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	18db      	adds	r3, r3, r3
 8005ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005eea:	4613      	mov	r3, r2
 8005eec:	eb42 0303 	adc.w	r3, r2, r3
 8005ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ef2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005ef6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005efa:	f7fa f9b9 	bl	8000270 <__aeabi_uldivmod>
 8005efe:	4602      	mov	r2, r0
 8005f00:	460b      	mov	r3, r1
 8005f02:	4b0d      	ldr	r3, [pc, #52]	@ (8005f38 <UART_SetConfig+0x2d4>)
 8005f04:	fba3 1302 	umull	r1, r3, r3, r2
 8005f08:	095b      	lsrs	r3, r3, #5
 8005f0a:	2164      	movs	r1, #100	@ 0x64
 8005f0c:	fb01 f303 	mul.w	r3, r1, r3
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	00db      	lsls	r3, r3, #3
 8005f14:	3332      	adds	r3, #50	@ 0x32
 8005f16:	4a08      	ldr	r2, [pc, #32]	@ (8005f38 <UART_SetConfig+0x2d4>)
 8005f18:	fba2 2303 	umull	r2, r3, r2, r3
 8005f1c:	095b      	lsrs	r3, r3, #5
 8005f1e:	f003 0207 	and.w	r2, r3, #7
 8005f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4422      	add	r2, r4
 8005f2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f2c:	e106      	b.n	800613c <UART_SetConfig+0x4d8>
 8005f2e:	bf00      	nop
 8005f30:	40011000 	.word	0x40011000
 8005f34:	40011400 	.word	0x40011400
 8005f38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f40:	2200      	movs	r2, #0
 8005f42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005f46:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005f4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005f4e:	4642      	mov	r2, r8
 8005f50:	464b      	mov	r3, r9
 8005f52:	1891      	adds	r1, r2, r2
 8005f54:	6239      	str	r1, [r7, #32]
 8005f56:	415b      	adcs	r3, r3
 8005f58:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f5e:	4641      	mov	r1, r8
 8005f60:	1854      	adds	r4, r2, r1
 8005f62:	4649      	mov	r1, r9
 8005f64:	eb43 0501 	adc.w	r5, r3, r1
 8005f68:	f04f 0200 	mov.w	r2, #0
 8005f6c:	f04f 0300 	mov.w	r3, #0
 8005f70:	00eb      	lsls	r3, r5, #3
 8005f72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f76:	00e2      	lsls	r2, r4, #3
 8005f78:	4614      	mov	r4, r2
 8005f7a:	461d      	mov	r5, r3
 8005f7c:	4643      	mov	r3, r8
 8005f7e:	18e3      	adds	r3, r4, r3
 8005f80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005f84:	464b      	mov	r3, r9
 8005f86:	eb45 0303 	adc.w	r3, r5, r3
 8005f8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005f9a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005f9e:	f04f 0200 	mov.w	r2, #0
 8005fa2:	f04f 0300 	mov.w	r3, #0
 8005fa6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005faa:	4629      	mov	r1, r5
 8005fac:	008b      	lsls	r3, r1, #2
 8005fae:	4621      	mov	r1, r4
 8005fb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fb4:	4621      	mov	r1, r4
 8005fb6:	008a      	lsls	r2, r1, #2
 8005fb8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005fbc:	f7fa f958 	bl	8000270 <__aeabi_uldivmod>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	4b60      	ldr	r3, [pc, #384]	@ (8006148 <UART_SetConfig+0x4e4>)
 8005fc6:	fba3 2302 	umull	r2, r3, r3, r2
 8005fca:	095b      	lsrs	r3, r3, #5
 8005fcc:	011c      	lsls	r4, r3, #4
 8005fce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005fd8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005fdc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005fe0:	4642      	mov	r2, r8
 8005fe2:	464b      	mov	r3, r9
 8005fe4:	1891      	adds	r1, r2, r2
 8005fe6:	61b9      	str	r1, [r7, #24]
 8005fe8:	415b      	adcs	r3, r3
 8005fea:	61fb      	str	r3, [r7, #28]
 8005fec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ff0:	4641      	mov	r1, r8
 8005ff2:	1851      	adds	r1, r2, r1
 8005ff4:	6139      	str	r1, [r7, #16]
 8005ff6:	4649      	mov	r1, r9
 8005ff8:	414b      	adcs	r3, r1
 8005ffa:	617b      	str	r3, [r7, #20]
 8005ffc:	f04f 0200 	mov.w	r2, #0
 8006000:	f04f 0300 	mov.w	r3, #0
 8006004:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006008:	4659      	mov	r1, fp
 800600a:	00cb      	lsls	r3, r1, #3
 800600c:	4651      	mov	r1, sl
 800600e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006012:	4651      	mov	r1, sl
 8006014:	00ca      	lsls	r2, r1, #3
 8006016:	4610      	mov	r0, r2
 8006018:	4619      	mov	r1, r3
 800601a:	4603      	mov	r3, r0
 800601c:	4642      	mov	r2, r8
 800601e:	189b      	adds	r3, r3, r2
 8006020:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006024:	464b      	mov	r3, r9
 8006026:	460a      	mov	r2, r1
 8006028:	eb42 0303 	adc.w	r3, r2, r3
 800602c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	67bb      	str	r3, [r7, #120]	@ 0x78
 800603a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800603c:	f04f 0200 	mov.w	r2, #0
 8006040:	f04f 0300 	mov.w	r3, #0
 8006044:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006048:	4649      	mov	r1, r9
 800604a:	008b      	lsls	r3, r1, #2
 800604c:	4641      	mov	r1, r8
 800604e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006052:	4641      	mov	r1, r8
 8006054:	008a      	lsls	r2, r1, #2
 8006056:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800605a:	f7fa f909 	bl	8000270 <__aeabi_uldivmod>
 800605e:	4602      	mov	r2, r0
 8006060:	460b      	mov	r3, r1
 8006062:	4611      	mov	r1, r2
 8006064:	4b38      	ldr	r3, [pc, #224]	@ (8006148 <UART_SetConfig+0x4e4>)
 8006066:	fba3 2301 	umull	r2, r3, r3, r1
 800606a:	095b      	lsrs	r3, r3, #5
 800606c:	2264      	movs	r2, #100	@ 0x64
 800606e:	fb02 f303 	mul.w	r3, r2, r3
 8006072:	1acb      	subs	r3, r1, r3
 8006074:	011b      	lsls	r3, r3, #4
 8006076:	3332      	adds	r3, #50	@ 0x32
 8006078:	4a33      	ldr	r2, [pc, #204]	@ (8006148 <UART_SetConfig+0x4e4>)
 800607a:	fba2 2303 	umull	r2, r3, r2, r3
 800607e:	095b      	lsrs	r3, r3, #5
 8006080:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006084:	441c      	add	r4, r3
 8006086:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800608a:	2200      	movs	r2, #0
 800608c:	673b      	str	r3, [r7, #112]	@ 0x70
 800608e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006090:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006094:	4642      	mov	r2, r8
 8006096:	464b      	mov	r3, r9
 8006098:	1891      	adds	r1, r2, r2
 800609a:	60b9      	str	r1, [r7, #8]
 800609c:	415b      	adcs	r3, r3
 800609e:	60fb      	str	r3, [r7, #12]
 80060a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060a4:	4641      	mov	r1, r8
 80060a6:	1851      	adds	r1, r2, r1
 80060a8:	6039      	str	r1, [r7, #0]
 80060aa:	4649      	mov	r1, r9
 80060ac:	414b      	adcs	r3, r1
 80060ae:	607b      	str	r3, [r7, #4]
 80060b0:	f04f 0200 	mov.w	r2, #0
 80060b4:	f04f 0300 	mov.w	r3, #0
 80060b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80060bc:	4659      	mov	r1, fp
 80060be:	00cb      	lsls	r3, r1, #3
 80060c0:	4651      	mov	r1, sl
 80060c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060c6:	4651      	mov	r1, sl
 80060c8:	00ca      	lsls	r2, r1, #3
 80060ca:	4610      	mov	r0, r2
 80060cc:	4619      	mov	r1, r3
 80060ce:	4603      	mov	r3, r0
 80060d0:	4642      	mov	r2, r8
 80060d2:	189b      	adds	r3, r3, r2
 80060d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80060d6:	464b      	mov	r3, r9
 80060d8:	460a      	mov	r2, r1
 80060da:	eb42 0303 	adc.w	r3, r2, r3
 80060de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80060e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80060ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80060ec:	f04f 0200 	mov.w	r2, #0
 80060f0:	f04f 0300 	mov.w	r3, #0
 80060f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80060f8:	4649      	mov	r1, r9
 80060fa:	008b      	lsls	r3, r1, #2
 80060fc:	4641      	mov	r1, r8
 80060fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006102:	4641      	mov	r1, r8
 8006104:	008a      	lsls	r2, r1, #2
 8006106:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800610a:	f7fa f8b1 	bl	8000270 <__aeabi_uldivmod>
 800610e:	4602      	mov	r2, r0
 8006110:	460b      	mov	r3, r1
 8006112:	4b0d      	ldr	r3, [pc, #52]	@ (8006148 <UART_SetConfig+0x4e4>)
 8006114:	fba3 1302 	umull	r1, r3, r3, r2
 8006118:	095b      	lsrs	r3, r3, #5
 800611a:	2164      	movs	r1, #100	@ 0x64
 800611c:	fb01 f303 	mul.w	r3, r1, r3
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	011b      	lsls	r3, r3, #4
 8006124:	3332      	adds	r3, #50	@ 0x32
 8006126:	4a08      	ldr	r2, [pc, #32]	@ (8006148 <UART_SetConfig+0x4e4>)
 8006128:	fba2 2303 	umull	r2, r3, r2, r3
 800612c:	095b      	lsrs	r3, r3, #5
 800612e:	f003 020f 	and.w	r2, r3, #15
 8006132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4422      	add	r2, r4
 800613a:	609a      	str	r2, [r3, #8]
}
 800613c:	bf00      	nop
 800613e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006142:	46bd      	mov	sp, r7
 8006144:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006148:	51eb851f 	.word	0x51eb851f

0800614c <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	689a      	ldr	r2, [r3, #8]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	683a      	ldr	r2, [r7, #0]
 8006170:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	683a      	ldr	r2, [r7, #0]
 8006176:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	1c5a      	adds	r2, r3, #1
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	601a      	str	r2, [r3, #0]
}
 8006188:	bf00      	nop
 800618a:	3714      	adds	r7, #20
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	6892      	ldr	r2, [r2, #8]
 80061aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	6852      	ldr	r2, [r2, #4]
 80061b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d103      	bne.n	80061c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	689a      	ldr	r2, [r3, #8]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	1e5a      	subs	r2, r3, #1
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3714      	adds	r7, #20
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b086      	sub	sp, #24
 80061ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80061ee:	2300      	movs	r3, #0
 80061f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061f2:	4b4f      	ldr	r3, [pc, #316]	@ (8006330 <xTaskIncrementTick+0x148>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	f040 808f 	bne.w	800631a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80061fc:	4b4d      	ldr	r3, [pc, #308]	@ (8006334 <xTaskIncrementTick+0x14c>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	3301      	adds	r3, #1
 8006202:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006204:	4a4b      	ldr	r2, [pc, #300]	@ (8006334 <xTaskIncrementTick+0x14c>)
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d121      	bne.n	8006254 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006210:	4b49      	ldr	r3, [pc, #292]	@ (8006338 <xTaskIncrementTick+0x150>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00b      	beq.n	8006232 <xTaskIncrementTick+0x4a>
	__asm volatile
 800621a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800621e:	f383 8811 	msr	BASEPRI, r3
 8006222:	f3bf 8f6f 	isb	sy
 8006226:	f3bf 8f4f 	dsb	sy
 800622a:	603b      	str	r3, [r7, #0]
}
 800622c:	bf00      	nop
 800622e:	bf00      	nop
 8006230:	e7fd      	b.n	800622e <xTaskIncrementTick+0x46>
 8006232:	4b41      	ldr	r3, [pc, #260]	@ (8006338 <xTaskIncrementTick+0x150>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	60fb      	str	r3, [r7, #12]
 8006238:	4b40      	ldr	r3, [pc, #256]	@ (800633c <xTaskIncrementTick+0x154>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a3e      	ldr	r2, [pc, #248]	@ (8006338 <xTaskIncrementTick+0x150>)
 800623e:	6013      	str	r3, [r2, #0]
 8006240:	4a3e      	ldr	r2, [pc, #248]	@ (800633c <xTaskIncrementTick+0x154>)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6013      	str	r3, [r2, #0]
 8006246:	4b3e      	ldr	r3, [pc, #248]	@ (8006340 <xTaskIncrementTick+0x158>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	3301      	adds	r3, #1
 800624c:	4a3c      	ldr	r2, [pc, #240]	@ (8006340 <xTaskIncrementTick+0x158>)
 800624e:	6013      	str	r3, [r2, #0]
 8006250:	f000 f8e0 	bl	8006414 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006254:	4b3b      	ldr	r3, [pc, #236]	@ (8006344 <xTaskIncrementTick+0x15c>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	693a      	ldr	r2, [r7, #16]
 800625a:	429a      	cmp	r2, r3
 800625c:	d348      	bcc.n	80062f0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800625e:	4b36      	ldr	r3, [pc, #216]	@ (8006338 <xTaskIncrementTick+0x150>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d104      	bne.n	8006272 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006268:	4b36      	ldr	r3, [pc, #216]	@ (8006344 <xTaskIncrementTick+0x15c>)
 800626a:	f04f 32ff 	mov.w	r2, #4294967295
 800626e:	601a      	str	r2, [r3, #0]
					break;
 8006270:	e03e      	b.n	80062f0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006272:	4b31      	ldr	r3, [pc, #196]	@ (8006338 <xTaskIncrementTick+0x150>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006282:	693a      	ldr	r2, [r7, #16]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	429a      	cmp	r2, r3
 8006288:	d203      	bcs.n	8006292 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800628a:	4a2e      	ldr	r2, [pc, #184]	@ (8006344 <xTaskIncrementTick+0x15c>)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006290:	e02e      	b.n	80062f0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	3304      	adds	r3, #4
 8006296:	4618      	mov	r0, r3
 8006298:	f7ff ff7c 	bl	8006194 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d004      	beq.n	80062ae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	3318      	adds	r3, #24
 80062a8:	4618      	mov	r0, r3
 80062aa:	f7ff ff73 	bl	8006194 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b2:	2201      	movs	r2, #1
 80062b4:	409a      	lsls	r2, r3
 80062b6:	4b24      	ldr	r3, [pc, #144]	@ (8006348 <xTaskIncrementTick+0x160>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	4a22      	ldr	r2, [pc, #136]	@ (8006348 <xTaskIncrementTick+0x160>)
 80062be:	6013      	str	r3, [r2, #0]
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062c4:	4613      	mov	r3, r2
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	4413      	add	r3, r2
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	4a1f      	ldr	r2, [pc, #124]	@ (800634c <xTaskIncrementTick+0x164>)
 80062ce:	441a      	add	r2, r3
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	3304      	adds	r3, #4
 80062d4:	4619      	mov	r1, r3
 80062d6:	4610      	mov	r0, r2
 80062d8:	f7ff ff38 	bl	800614c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062e0:	4b1b      	ldr	r3, [pc, #108]	@ (8006350 <xTaskIncrementTick+0x168>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d3b9      	bcc.n	800625e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80062ea:	2301      	movs	r3, #1
 80062ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062ee:	e7b6      	b.n	800625e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80062f0:	4b17      	ldr	r3, [pc, #92]	@ (8006350 <xTaskIncrementTick+0x168>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062f6:	4915      	ldr	r1, [pc, #84]	@ (800634c <xTaskIncrementTick+0x164>)
 80062f8:	4613      	mov	r3, r2
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	4413      	add	r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	440b      	add	r3, r1
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2b01      	cmp	r3, #1
 8006306:	d901      	bls.n	800630c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006308:	2301      	movs	r3, #1
 800630a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800630c:	4b11      	ldr	r3, [pc, #68]	@ (8006354 <xTaskIncrementTick+0x16c>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d007      	beq.n	8006324 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006314:	2301      	movs	r3, #1
 8006316:	617b      	str	r3, [r7, #20]
 8006318:	e004      	b.n	8006324 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800631a:	4b0f      	ldr	r3, [pc, #60]	@ (8006358 <xTaskIncrementTick+0x170>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	3301      	adds	r3, #1
 8006320:	4a0d      	ldr	r2, [pc, #52]	@ (8006358 <xTaskIncrementTick+0x170>)
 8006322:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006324:	697b      	ldr	r3, [r7, #20]
}
 8006326:	4618      	mov	r0, r3
 8006328:	3718      	adds	r7, #24
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	2000055c 	.word	0x2000055c
 8006334:	20000544 	.word	0x20000544
 8006338:	2000053c 	.word	0x2000053c
 800633c:	20000540 	.word	0x20000540
 8006340:	20000554 	.word	0x20000554
 8006344:	20000558 	.word	0x20000558
 8006348:	20000548 	.word	0x20000548
 800634c:	200004b0 	.word	0x200004b0
 8006350:	200004ac 	.word	0x200004ac
 8006354:	20000550 	.word	0x20000550
 8006358:	2000054c 	.word	0x2000054c

0800635c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800635c:	b480      	push	{r7}
 800635e:	b087      	sub	sp, #28
 8006360:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006362:	4b27      	ldr	r3, [pc, #156]	@ (8006400 <vTaskSwitchContext+0xa4>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d003      	beq.n	8006372 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800636a:	4b26      	ldr	r3, [pc, #152]	@ (8006404 <vTaskSwitchContext+0xa8>)
 800636c:	2201      	movs	r2, #1
 800636e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006370:	e040      	b.n	80063f4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006372:	4b24      	ldr	r3, [pc, #144]	@ (8006404 <vTaskSwitchContext+0xa8>)
 8006374:	2200      	movs	r2, #0
 8006376:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006378:	4b23      	ldr	r3, [pc, #140]	@ (8006408 <vTaskSwitchContext+0xac>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	fab3 f383 	clz	r3, r3
 8006384:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006386:	7afb      	ldrb	r3, [r7, #11]
 8006388:	f1c3 031f 	rsb	r3, r3, #31
 800638c:	617b      	str	r3, [r7, #20]
 800638e:	491f      	ldr	r1, [pc, #124]	@ (800640c <vTaskSwitchContext+0xb0>)
 8006390:	697a      	ldr	r2, [r7, #20]
 8006392:	4613      	mov	r3, r2
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	4413      	add	r3, r2
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	440b      	add	r3, r1
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d10b      	bne.n	80063ba <vTaskSwitchContext+0x5e>
	__asm volatile
 80063a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a6:	f383 8811 	msr	BASEPRI, r3
 80063aa:	f3bf 8f6f 	isb	sy
 80063ae:	f3bf 8f4f 	dsb	sy
 80063b2:	607b      	str	r3, [r7, #4]
}
 80063b4:	bf00      	nop
 80063b6:	bf00      	nop
 80063b8:	e7fd      	b.n	80063b6 <vTaskSwitchContext+0x5a>
 80063ba:	697a      	ldr	r2, [r7, #20]
 80063bc:	4613      	mov	r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4413      	add	r3, r2
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	4a11      	ldr	r2, [pc, #68]	@ (800640c <vTaskSwitchContext+0xb0>)
 80063c6:	4413      	add	r3, r2
 80063c8:	613b      	str	r3, [r7, #16]
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	685a      	ldr	r2, [r3, #4]
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	605a      	str	r2, [r3, #4]
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	685a      	ldr	r2, [r3, #4]
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	3308      	adds	r3, #8
 80063dc:	429a      	cmp	r2, r3
 80063de:	d104      	bne.n	80063ea <vTaskSwitchContext+0x8e>
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	605a      	str	r2, [r3, #4]
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	4a07      	ldr	r2, [pc, #28]	@ (8006410 <vTaskSwitchContext+0xb4>)
 80063f2:	6013      	str	r3, [r2, #0]
}
 80063f4:	bf00      	nop
 80063f6:	371c      	adds	r7, #28
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr
 8006400:	2000055c 	.word	0x2000055c
 8006404:	20000550 	.word	0x20000550
 8006408:	20000548 	.word	0x20000548
 800640c:	200004b0 	.word	0x200004b0
 8006410:	200004ac 	.word	0x200004ac

08006414 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800641a:	4b0c      	ldr	r3, [pc, #48]	@ (800644c <prvResetNextTaskUnblockTime+0x38>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d104      	bne.n	800642e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006424:	4b0a      	ldr	r3, [pc, #40]	@ (8006450 <prvResetNextTaskUnblockTime+0x3c>)
 8006426:	f04f 32ff 	mov.w	r2, #4294967295
 800642a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800642c:	e008      	b.n	8006440 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800642e:	4b07      	ldr	r3, [pc, #28]	@ (800644c <prvResetNextTaskUnblockTime+0x38>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	4a04      	ldr	r2, [pc, #16]	@ (8006450 <prvResetNextTaskUnblockTime+0x3c>)
 800643e:	6013      	str	r3, [r2, #0]
}
 8006440:	bf00      	nop
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr
 800644c:	2000053c 	.word	0x2000053c
 8006450:	20000558 	.word	0x20000558
	...

08006460 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006460:	4b07      	ldr	r3, [pc, #28]	@ (8006480 <pxCurrentTCBConst2>)
 8006462:	6819      	ldr	r1, [r3, #0]
 8006464:	6808      	ldr	r0, [r1, #0]
 8006466:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800646a:	f380 8809 	msr	PSP, r0
 800646e:	f3bf 8f6f 	isb	sy
 8006472:	f04f 0000 	mov.w	r0, #0
 8006476:	f380 8811 	msr	BASEPRI, r0
 800647a:	4770      	bx	lr
 800647c:	f3af 8000 	nop.w

08006480 <pxCurrentTCBConst2>:
 8006480:	200004ac 	.word	0x200004ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006484:	bf00      	nop
 8006486:	bf00      	nop
	...

08006490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006490:	f3ef 8009 	mrs	r0, PSP
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	4b15      	ldr	r3, [pc, #84]	@ (80064f0 <pxCurrentTCBConst>)
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	f01e 0f10 	tst.w	lr, #16
 80064a0:	bf08      	it	eq
 80064a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80064a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064aa:	6010      	str	r0, [r2, #0]
 80064ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80064b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80064b4:	f380 8811 	msr	BASEPRI, r0
 80064b8:	f3bf 8f4f 	dsb	sy
 80064bc:	f3bf 8f6f 	isb	sy
 80064c0:	f7ff ff4c 	bl	800635c <vTaskSwitchContext>
 80064c4:	f04f 0000 	mov.w	r0, #0
 80064c8:	f380 8811 	msr	BASEPRI, r0
 80064cc:	bc09      	pop	{r0, r3}
 80064ce:	6819      	ldr	r1, [r3, #0]
 80064d0:	6808      	ldr	r0, [r1, #0]
 80064d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d6:	f01e 0f10 	tst.w	lr, #16
 80064da:	bf08      	it	eq
 80064dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80064e0:	f380 8809 	msr	PSP, r0
 80064e4:	f3bf 8f6f 	isb	sy
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	f3af 8000 	nop.w

080064f0 <pxCurrentTCBConst>:
 80064f0:	200004ac 	.word	0x200004ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80064f4:	bf00      	nop
 80064f6:	bf00      	nop

080064f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
	__asm volatile
 80064fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006502:	f383 8811 	msr	BASEPRI, r3
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	607b      	str	r3, [r7, #4]
}
 8006510:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006512:	f7ff fe69 	bl	80061e8 <xTaskIncrementTick>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d003      	beq.n	8006524 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800651c:	4b06      	ldr	r3, [pc, #24]	@ (8006538 <SysTick_Handler+0x40>)
 800651e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006522:	601a      	str	r2, [r3, #0]
 8006524:	2300      	movs	r3, #0
 8006526:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	f383 8811 	msr	BASEPRI, r3
}
 800652e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006530:	bf00      	nop
 8006532:	3708      	adds	r7, #8
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	e000ed04 	.word	0xe000ed04

0800653c <malloc>:
 800653c:	4b02      	ldr	r3, [pc, #8]	@ (8006548 <malloc+0xc>)
 800653e:	4601      	mov	r1, r0
 8006540:	6818      	ldr	r0, [r3, #0]
 8006542:	f000 b825 	b.w	8006590 <_malloc_r>
 8006546:	bf00      	nop
 8006548:	20000018 	.word	0x20000018

0800654c <sbrk_aligned>:
 800654c:	b570      	push	{r4, r5, r6, lr}
 800654e:	4e0f      	ldr	r6, [pc, #60]	@ (800658c <sbrk_aligned+0x40>)
 8006550:	460c      	mov	r4, r1
 8006552:	6831      	ldr	r1, [r6, #0]
 8006554:	4605      	mov	r5, r0
 8006556:	b911      	cbnz	r1, 800655e <sbrk_aligned+0x12>
 8006558:	f000 fa02 	bl	8006960 <_sbrk_r>
 800655c:	6030      	str	r0, [r6, #0]
 800655e:	4621      	mov	r1, r4
 8006560:	4628      	mov	r0, r5
 8006562:	f000 f9fd 	bl	8006960 <_sbrk_r>
 8006566:	1c43      	adds	r3, r0, #1
 8006568:	d103      	bne.n	8006572 <sbrk_aligned+0x26>
 800656a:	f04f 34ff 	mov.w	r4, #4294967295
 800656e:	4620      	mov	r0, r4
 8006570:	bd70      	pop	{r4, r5, r6, pc}
 8006572:	1cc4      	adds	r4, r0, #3
 8006574:	f024 0403 	bic.w	r4, r4, #3
 8006578:	42a0      	cmp	r0, r4
 800657a:	d0f8      	beq.n	800656e <sbrk_aligned+0x22>
 800657c:	1a21      	subs	r1, r4, r0
 800657e:	4628      	mov	r0, r5
 8006580:	f000 f9ee 	bl	8006960 <_sbrk_r>
 8006584:	3001      	adds	r0, #1
 8006586:	d1f2      	bne.n	800656e <sbrk_aligned+0x22>
 8006588:	e7ef      	b.n	800656a <sbrk_aligned+0x1e>
 800658a:	bf00      	nop
 800658c:	20000560 	.word	0x20000560

08006590 <_malloc_r>:
 8006590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006594:	1ccd      	adds	r5, r1, #3
 8006596:	f025 0503 	bic.w	r5, r5, #3
 800659a:	3508      	adds	r5, #8
 800659c:	2d0c      	cmp	r5, #12
 800659e:	bf38      	it	cc
 80065a0:	250c      	movcc	r5, #12
 80065a2:	2d00      	cmp	r5, #0
 80065a4:	4606      	mov	r6, r0
 80065a6:	db01      	blt.n	80065ac <_malloc_r+0x1c>
 80065a8:	42a9      	cmp	r1, r5
 80065aa:	d904      	bls.n	80065b6 <_malloc_r+0x26>
 80065ac:	230c      	movs	r3, #12
 80065ae:	6033      	str	r3, [r6, #0]
 80065b0:	2000      	movs	r0, #0
 80065b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800668c <_malloc_r+0xfc>
 80065ba:	f000 f869 	bl	8006690 <__malloc_lock>
 80065be:	f8d8 3000 	ldr.w	r3, [r8]
 80065c2:	461c      	mov	r4, r3
 80065c4:	bb44      	cbnz	r4, 8006618 <_malloc_r+0x88>
 80065c6:	4629      	mov	r1, r5
 80065c8:	4630      	mov	r0, r6
 80065ca:	f7ff ffbf 	bl	800654c <sbrk_aligned>
 80065ce:	1c43      	adds	r3, r0, #1
 80065d0:	4604      	mov	r4, r0
 80065d2:	d158      	bne.n	8006686 <_malloc_r+0xf6>
 80065d4:	f8d8 4000 	ldr.w	r4, [r8]
 80065d8:	4627      	mov	r7, r4
 80065da:	2f00      	cmp	r7, #0
 80065dc:	d143      	bne.n	8006666 <_malloc_r+0xd6>
 80065de:	2c00      	cmp	r4, #0
 80065e0:	d04b      	beq.n	800667a <_malloc_r+0xea>
 80065e2:	6823      	ldr	r3, [r4, #0]
 80065e4:	4639      	mov	r1, r7
 80065e6:	4630      	mov	r0, r6
 80065e8:	eb04 0903 	add.w	r9, r4, r3
 80065ec:	f000 f9b8 	bl	8006960 <_sbrk_r>
 80065f0:	4581      	cmp	r9, r0
 80065f2:	d142      	bne.n	800667a <_malloc_r+0xea>
 80065f4:	6821      	ldr	r1, [r4, #0]
 80065f6:	1a6d      	subs	r5, r5, r1
 80065f8:	4629      	mov	r1, r5
 80065fa:	4630      	mov	r0, r6
 80065fc:	f7ff ffa6 	bl	800654c <sbrk_aligned>
 8006600:	3001      	adds	r0, #1
 8006602:	d03a      	beq.n	800667a <_malloc_r+0xea>
 8006604:	6823      	ldr	r3, [r4, #0]
 8006606:	442b      	add	r3, r5
 8006608:	6023      	str	r3, [r4, #0]
 800660a:	f8d8 3000 	ldr.w	r3, [r8]
 800660e:	685a      	ldr	r2, [r3, #4]
 8006610:	bb62      	cbnz	r2, 800666c <_malloc_r+0xdc>
 8006612:	f8c8 7000 	str.w	r7, [r8]
 8006616:	e00f      	b.n	8006638 <_malloc_r+0xa8>
 8006618:	6822      	ldr	r2, [r4, #0]
 800661a:	1b52      	subs	r2, r2, r5
 800661c:	d420      	bmi.n	8006660 <_malloc_r+0xd0>
 800661e:	2a0b      	cmp	r2, #11
 8006620:	d917      	bls.n	8006652 <_malloc_r+0xc2>
 8006622:	1961      	adds	r1, r4, r5
 8006624:	42a3      	cmp	r3, r4
 8006626:	6025      	str	r5, [r4, #0]
 8006628:	bf18      	it	ne
 800662a:	6059      	strne	r1, [r3, #4]
 800662c:	6863      	ldr	r3, [r4, #4]
 800662e:	bf08      	it	eq
 8006630:	f8c8 1000 	streq.w	r1, [r8]
 8006634:	5162      	str	r2, [r4, r5]
 8006636:	604b      	str	r3, [r1, #4]
 8006638:	4630      	mov	r0, r6
 800663a:	f000 f82f 	bl	800669c <__malloc_unlock>
 800663e:	f104 000b 	add.w	r0, r4, #11
 8006642:	1d23      	adds	r3, r4, #4
 8006644:	f020 0007 	bic.w	r0, r0, #7
 8006648:	1ac2      	subs	r2, r0, r3
 800664a:	bf1c      	itt	ne
 800664c:	1a1b      	subne	r3, r3, r0
 800664e:	50a3      	strne	r3, [r4, r2]
 8006650:	e7af      	b.n	80065b2 <_malloc_r+0x22>
 8006652:	6862      	ldr	r2, [r4, #4]
 8006654:	42a3      	cmp	r3, r4
 8006656:	bf0c      	ite	eq
 8006658:	f8c8 2000 	streq.w	r2, [r8]
 800665c:	605a      	strne	r2, [r3, #4]
 800665e:	e7eb      	b.n	8006638 <_malloc_r+0xa8>
 8006660:	4623      	mov	r3, r4
 8006662:	6864      	ldr	r4, [r4, #4]
 8006664:	e7ae      	b.n	80065c4 <_malloc_r+0x34>
 8006666:	463c      	mov	r4, r7
 8006668:	687f      	ldr	r7, [r7, #4]
 800666a:	e7b6      	b.n	80065da <_malloc_r+0x4a>
 800666c:	461a      	mov	r2, r3
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	42a3      	cmp	r3, r4
 8006672:	d1fb      	bne.n	800666c <_malloc_r+0xdc>
 8006674:	2300      	movs	r3, #0
 8006676:	6053      	str	r3, [r2, #4]
 8006678:	e7de      	b.n	8006638 <_malloc_r+0xa8>
 800667a:	230c      	movs	r3, #12
 800667c:	6033      	str	r3, [r6, #0]
 800667e:	4630      	mov	r0, r6
 8006680:	f000 f80c 	bl	800669c <__malloc_unlock>
 8006684:	e794      	b.n	80065b0 <_malloc_r+0x20>
 8006686:	6005      	str	r5, [r0, #0]
 8006688:	e7d6      	b.n	8006638 <_malloc_r+0xa8>
 800668a:	bf00      	nop
 800668c:	20000564 	.word	0x20000564

08006690 <__malloc_lock>:
 8006690:	4801      	ldr	r0, [pc, #4]	@ (8006698 <__malloc_lock+0x8>)
 8006692:	f7fb b83b 	b.w	800170c <__retarget_lock_acquire_recursive>
 8006696:	bf00      	nop
 8006698:	20000488 	.word	0x20000488

0800669c <__malloc_unlock>:
 800669c:	4801      	ldr	r0, [pc, #4]	@ (80066a4 <__malloc_unlock+0x8>)
 800669e:	f7fb b84a 	b.w	8001736 <__retarget_lock_release_recursive>
 80066a2:	bf00      	nop
 80066a4:	20000488 	.word	0x20000488

080066a8 <std>:
 80066a8:	2300      	movs	r3, #0
 80066aa:	b510      	push	{r4, lr}
 80066ac:	4604      	mov	r4, r0
 80066ae:	e9c0 3300 	strd	r3, r3, [r0]
 80066b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80066b6:	6083      	str	r3, [r0, #8]
 80066b8:	8181      	strh	r1, [r0, #12]
 80066ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80066bc:	81c2      	strh	r2, [r0, #14]
 80066be:	6183      	str	r3, [r0, #24]
 80066c0:	4619      	mov	r1, r3
 80066c2:	2208      	movs	r2, #8
 80066c4:	305c      	adds	r0, #92	@ 0x5c
 80066c6:	f000 f90e 	bl	80068e6 <memset>
 80066ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006700 <std+0x58>)
 80066cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80066ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006704 <std+0x5c>)
 80066d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80066d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006708 <std+0x60>)
 80066d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80066d6:	4b0d      	ldr	r3, [pc, #52]	@ (800670c <std+0x64>)
 80066d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80066da:	4b0d      	ldr	r3, [pc, #52]	@ (8006710 <std+0x68>)
 80066dc:	6224      	str	r4, [r4, #32]
 80066de:	429c      	cmp	r4, r3
 80066e0:	d006      	beq.n	80066f0 <std+0x48>
 80066e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80066e6:	4294      	cmp	r4, r2
 80066e8:	d002      	beq.n	80066f0 <std+0x48>
 80066ea:	33d0      	adds	r3, #208	@ 0xd0
 80066ec:	429c      	cmp	r4, r3
 80066ee:	d105      	bne.n	80066fc <std+0x54>
 80066f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80066f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066f8:	f7fa bfe1 	b.w	80016be <__retarget_lock_init_recursive>
 80066fc:	bd10      	pop	{r4, pc}
 80066fe:	bf00      	nop
 8006700:	08006861 	.word	0x08006861
 8006704:	08006883 	.word	0x08006883
 8006708:	080068bb 	.word	0x080068bb
 800670c:	080068df 	.word	0x080068df
 8006710:	20000568 	.word	0x20000568

08006714 <stdio_exit_handler>:
 8006714:	4a02      	ldr	r2, [pc, #8]	@ (8006720 <stdio_exit_handler+0xc>)
 8006716:	4903      	ldr	r1, [pc, #12]	@ (8006724 <stdio_exit_handler+0x10>)
 8006718:	4803      	ldr	r0, [pc, #12]	@ (8006728 <stdio_exit_handler+0x14>)
 800671a:	f000 b869 	b.w	80067f0 <_fwalk_sglue>
 800671e:	bf00      	nop
 8006720:	2000000c 	.word	0x2000000c
 8006724:	08007135 	.word	0x08007135
 8006728:	2000001c 	.word	0x2000001c

0800672c <cleanup_stdio>:
 800672c:	6841      	ldr	r1, [r0, #4]
 800672e:	4b0c      	ldr	r3, [pc, #48]	@ (8006760 <cleanup_stdio+0x34>)
 8006730:	4299      	cmp	r1, r3
 8006732:	b510      	push	{r4, lr}
 8006734:	4604      	mov	r4, r0
 8006736:	d001      	beq.n	800673c <cleanup_stdio+0x10>
 8006738:	f000 fcfc 	bl	8007134 <_fflush_r>
 800673c:	68a1      	ldr	r1, [r4, #8]
 800673e:	4b09      	ldr	r3, [pc, #36]	@ (8006764 <cleanup_stdio+0x38>)
 8006740:	4299      	cmp	r1, r3
 8006742:	d002      	beq.n	800674a <cleanup_stdio+0x1e>
 8006744:	4620      	mov	r0, r4
 8006746:	f000 fcf5 	bl	8007134 <_fflush_r>
 800674a:	68e1      	ldr	r1, [r4, #12]
 800674c:	4b06      	ldr	r3, [pc, #24]	@ (8006768 <cleanup_stdio+0x3c>)
 800674e:	4299      	cmp	r1, r3
 8006750:	d004      	beq.n	800675c <cleanup_stdio+0x30>
 8006752:	4620      	mov	r0, r4
 8006754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006758:	f000 bcec 	b.w	8007134 <_fflush_r>
 800675c:	bd10      	pop	{r4, pc}
 800675e:	bf00      	nop
 8006760:	20000568 	.word	0x20000568
 8006764:	200005d0 	.word	0x200005d0
 8006768:	20000638 	.word	0x20000638

0800676c <global_stdio_init.part.0>:
 800676c:	b510      	push	{r4, lr}
 800676e:	4b0b      	ldr	r3, [pc, #44]	@ (800679c <global_stdio_init.part.0+0x30>)
 8006770:	4c0b      	ldr	r4, [pc, #44]	@ (80067a0 <global_stdio_init.part.0+0x34>)
 8006772:	4a0c      	ldr	r2, [pc, #48]	@ (80067a4 <global_stdio_init.part.0+0x38>)
 8006774:	601a      	str	r2, [r3, #0]
 8006776:	4620      	mov	r0, r4
 8006778:	2200      	movs	r2, #0
 800677a:	2104      	movs	r1, #4
 800677c:	f7ff ff94 	bl	80066a8 <std>
 8006780:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006784:	2201      	movs	r2, #1
 8006786:	2109      	movs	r1, #9
 8006788:	f7ff ff8e 	bl	80066a8 <std>
 800678c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006790:	2202      	movs	r2, #2
 8006792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006796:	2112      	movs	r1, #18
 8006798:	f7ff bf86 	b.w	80066a8 <std>
 800679c:	200006a0 	.word	0x200006a0
 80067a0:	20000568 	.word	0x20000568
 80067a4:	08006715 	.word	0x08006715

080067a8 <__sfp_lock_acquire>:
 80067a8:	4801      	ldr	r0, [pc, #4]	@ (80067b0 <__sfp_lock_acquire+0x8>)
 80067aa:	f7fa bfaf 	b.w	800170c <__retarget_lock_acquire_recursive>
 80067ae:	bf00      	nop
 80067b0:	2000047c 	.word	0x2000047c

080067b4 <__sfp_lock_release>:
 80067b4:	4801      	ldr	r0, [pc, #4]	@ (80067bc <__sfp_lock_release+0x8>)
 80067b6:	f7fa bfbe 	b.w	8001736 <__retarget_lock_release_recursive>
 80067ba:	bf00      	nop
 80067bc:	2000047c 	.word	0x2000047c

080067c0 <__sinit>:
 80067c0:	b510      	push	{r4, lr}
 80067c2:	4604      	mov	r4, r0
 80067c4:	f7ff fff0 	bl	80067a8 <__sfp_lock_acquire>
 80067c8:	6a23      	ldr	r3, [r4, #32]
 80067ca:	b11b      	cbz	r3, 80067d4 <__sinit+0x14>
 80067cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067d0:	f7ff bff0 	b.w	80067b4 <__sfp_lock_release>
 80067d4:	4b04      	ldr	r3, [pc, #16]	@ (80067e8 <__sinit+0x28>)
 80067d6:	6223      	str	r3, [r4, #32]
 80067d8:	4b04      	ldr	r3, [pc, #16]	@ (80067ec <__sinit+0x2c>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1f5      	bne.n	80067cc <__sinit+0xc>
 80067e0:	f7ff ffc4 	bl	800676c <global_stdio_init.part.0>
 80067e4:	e7f2      	b.n	80067cc <__sinit+0xc>
 80067e6:	bf00      	nop
 80067e8:	0800672d 	.word	0x0800672d
 80067ec:	200006a0 	.word	0x200006a0

080067f0 <_fwalk_sglue>:
 80067f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067f4:	4607      	mov	r7, r0
 80067f6:	4688      	mov	r8, r1
 80067f8:	4614      	mov	r4, r2
 80067fa:	2600      	movs	r6, #0
 80067fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006800:	f1b9 0901 	subs.w	r9, r9, #1
 8006804:	d505      	bpl.n	8006812 <_fwalk_sglue+0x22>
 8006806:	6824      	ldr	r4, [r4, #0]
 8006808:	2c00      	cmp	r4, #0
 800680a:	d1f7      	bne.n	80067fc <_fwalk_sglue+0xc>
 800680c:	4630      	mov	r0, r6
 800680e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006812:	89ab      	ldrh	r3, [r5, #12]
 8006814:	2b01      	cmp	r3, #1
 8006816:	d907      	bls.n	8006828 <_fwalk_sglue+0x38>
 8006818:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800681c:	3301      	adds	r3, #1
 800681e:	d003      	beq.n	8006828 <_fwalk_sglue+0x38>
 8006820:	4629      	mov	r1, r5
 8006822:	4638      	mov	r0, r7
 8006824:	47c0      	blx	r8
 8006826:	4306      	orrs	r6, r0
 8006828:	3568      	adds	r5, #104	@ 0x68
 800682a:	e7e9      	b.n	8006800 <_fwalk_sglue+0x10>

0800682c <iprintf>:
 800682c:	b40f      	push	{r0, r1, r2, r3}
 800682e:	b507      	push	{r0, r1, r2, lr}
 8006830:	4906      	ldr	r1, [pc, #24]	@ (800684c <iprintf+0x20>)
 8006832:	ab04      	add	r3, sp, #16
 8006834:	6808      	ldr	r0, [r1, #0]
 8006836:	f853 2b04 	ldr.w	r2, [r3], #4
 800683a:	6881      	ldr	r1, [r0, #8]
 800683c:	9301      	str	r3, [sp, #4]
 800683e:	f000 f94f 	bl	8006ae0 <_vfiprintf_r>
 8006842:	b003      	add	sp, #12
 8006844:	f85d eb04 	ldr.w	lr, [sp], #4
 8006848:	b004      	add	sp, #16
 800684a:	4770      	bx	lr
 800684c:	20000018 	.word	0x20000018

08006850 <putchar>:
 8006850:	4b02      	ldr	r3, [pc, #8]	@ (800685c <putchar+0xc>)
 8006852:	4601      	mov	r1, r0
 8006854:	6818      	ldr	r0, [r3, #0]
 8006856:	6882      	ldr	r2, [r0, #8]
 8006858:	f000 bc94 	b.w	8007184 <_putc_r>
 800685c:	20000018 	.word	0x20000018

08006860 <__sread>:
 8006860:	b510      	push	{r4, lr}
 8006862:	460c      	mov	r4, r1
 8006864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006868:	f000 f868 	bl	800693c <_read_r>
 800686c:	2800      	cmp	r0, #0
 800686e:	bfab      	itete	ge
 8006870:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006872:	89a3      	ldrhlt	r3, [r4, #12]
 8006874:	181b      	addge	r3, r3, r0
 8006876:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800687a:	bfac      	ite	ge
 800687c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800687e:	81a3      	strhlt	r3, [r4, #12]
 8006880:	bd10      	pop	{r4, pc}

08006882 <__swrite>:
 8006882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006886:	461f      	mov	r7, r3
 8006888:	898b      	ldrh	r3, [r1, #12]
 800688a:	05db      	lsls	r3, r3, #23
 800688c:	4605      	mov	r5, r0
 800688e:	460c      	mov	r4, r1
 8006890:	4616      	mov	r6, r2
 8006892:	d505      	bpl.n	80068a0 <__swrite+0x1e>
 8006894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006898:	2302      	movs	r3, #2
 800689a:	2200      	movs	r2, #0
 800689c:	f000 f83c 	bl	8006918 <_lseek_r>
 80068a0:	89a3      	ldrh	r3, [r4, #12]
 80068a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068aa:	81a3      	strh	r3, [r4, #12]
 80068ac:	4632      	mov	r2, r6
 80068ae:	463b      	mov	r3, r7
 80068b0:	4628      	mov	r0, r5
 80068b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068b6:	f000 b863 	b.w	8006980 <_write_r>

080068ba <__sseek>:
 80068ba:	b510      	push	{r4, lr}
 80068bc:	460c      	mov	r4, r1
 80068be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068c2:	f000 f829 	bl	8006918 <_lseek_r>
 80068c6:	1c43      	adds	r3, r0, #1
 80068c8:	89a3      	ldrh	r3, [r4, #12]
 80068ca:	bf15      	itete	ne
 80068cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80068ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80068d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80068d6:	81a3      	strheq	r3, [r4, #12]
 80068d8:	bf18      	it	ne
 80068da:	81a3      	strhne	r3, [r4, #12]
 80068dc:	bd10      	pop	{r4, pc}

080068de <__sclose>:
 80068de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068e2:	f000 b809 	b.w	80068f8 <_close_r>

080068e6 <memset>:
 80068e6:	4402      	add	r2, r0
 80068e8:	4603      	mov	r3, r0
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d100      	bne.n	80068f0 <memset+0xa>
 80068ee:	4770      	bx	lr
 80068f0:	f803 1b01 	strb.w	r1, [r3], #1
 80068f4:	e7f9      	b.n	80068ea <memset+0x4>
	...

080068f8 <_close_r>:
 80068f8:	b538      	push	{r3, r4, r5, lr}
 80068fa:	4d06      	ldr	r5, [pc, #24]	@ (8006914 <_close_r+0x1c>)
 80068fc:	2300      	movs	r3, #0
 80068fe:	4604      	mov	r4, r0
 8006900:	4608      	mov	r0, r1
 8006902:	602b      	str	r3, [r5, #0]
 8006904:	f7fa fbc1 	bl	800108a <_close>
 8006908:	1c43      	adds	r3, r0, #1
 800690a:	d102      	bne.n	8006912 <_close_r+0x1a>
 800690c:	682b      	ldr	r3, [r5, #0]
 800690e:	b103      	cbz	r3, 8006912 <_close_r+0x1a>
 8006910:	6023      	str	r3, [r4, #0]
 8006912:	bd38      	pop	{r3, r4, r5, pc}
 8006914:	200006a4 	.word	0x200006a4

08006918 <_lseek_r>:
 8006918:	b538      	push	{r3, r4, r5, lr}
 800691a:	4d07      	ldr	r5, [pc, #28]	@ (8006938 <_lseek_r+0x20>)
 800691c:	4604      	mov	r4, r0
 800691e:	4608      	mov	r0, r1
 8006920:	4611      	mov	r1, r2
 8006922:	2200      	movs	r2, #0
 8006924:	602a      	str	r2, [r5, #0]
 8006926:	461a      	mov	r2, r3
 8006928:	f7fa fbd6 	bl	80010d8 <_lseek>
 800692c:	1c43      	adds	r3, r0, #1
 800692e:	d102      	bne.n	8006936 <_lseek_r+0x1e>
 8006930:	682b      	ldr	r3, [r5, #0]
 8006932:	b103      	cbz	r3, 8006936 <_lseek_r+0x1e>
 8006934:	6023      	str	r3, [r4, #0]
 8006936:	bd38      	pop	{r3, r4, r5, pc}
 8006938:	200006a4 	.word	0x200006a4

0800693c <_read_r>:
 800693c:	b538      	push	{r3, r4, r5, lr}
 800693e:	4d07      	ldr	r5, [pc, #28]	@ (800695c <_read_r+0x20>)
 8006940:	4604      	mov	r4, r0
 8006942:	4608      	mov	r0, r1
 8006944:	4611      	mov	r1, r2
 8006946:	2200      	movs	r2, #0
 8006948:	602a      	str	r2, [r5, #0]
 800694a:	461a      	mov	r2, r3
 800694c:	f7fa fb64 	bl	8001018 <_read>
 8006950:	1c43      	adds	r3, r0, #1
 8006952:	d102      	bne.n	800695a <_read_r+0x1e>
 8006954:	682b      	ldr	r3, [r5, #0]
 8006956:	b103      	cbz	r3, 800695a <_read_r+0x1e>
 8006958:	6023      	str	r3, [r4, #0]
 800695a:	bd38      	pop	{r3, r4, r5, pc}
 800695c:	200006a4 	.word	0x200006a4

08006960 <_sbrk_r>:
 8006960:	b538      	push	{r3, r4, r5, lr}
 8006962:	4d06      	ldr	r5, [pc, #24]	@ (800697c <_sbrk_r+0x1c>)
 8006964:	2300      	movs	r3, #0
 8006966:	4604      	mov	r4, r0
 8006968:	4608      	mov	r0, r1
 800696a:	602b      	str	r3, [r5, #0]
 800696c:	f7fa fbc2 	bl	80010f4 <_sbrk>
 8006970:	1c43      	adds	r3, r0, #1
 8006972:	d102      	bne.n	800697a <_sbrk_r+0x1a>
 8006974:	682b      	ldr	r3, [r5, #0]
 8006976:	b103      	cbz	r3, 800697a <_sbrk_r+0x1a>
 8006978:	6023      	str	r3, [r4, #0]
 800697a:	bd38      	pop	{r3, r4, r5, pc}
 800697c:	200006a4 	.word	0x200006a4

08006980 <_write_r>:
 8006980:	b538      	push	{r3, r4, r5, lr}
 8006982:	4d07      	ldr	r5, [pc, #28]	@ (80069a0 <_write_r+0x20>)
 8006984:	4604      	mov	r4, r0
 8006986:	4608      	mov	r0, r1
 8006988:	4611      	mov	r1, r2
 800698a:	2200      	movs	r2, #0
 800698c:	602a      	str	r2, [r5, #0]
 800698e:	461a      	mov	r2, r3
 8006990:	f7fa fb5f 	bl	8001052 <_write>
 8006994:	1c43      	adds	r3, r0, #1
 8006996:	d102      	bne.n	800699e <_write_r+0x1e>
 8006998:	682b      	ldr	r3, [r5, #0]
 800699a:	b103      	cbz	r3, 800699e <_write_r+0x1e>
 800699c:	6023      	str	r3, [r4, #0]
 800699e:	bd38      	pop	{r3, r4, r5, pc}
 80069a0:	200006a4 	.word	0x200006a4

080069a4 <__errno>:
 80069a4:	4b01      	ldr	r3, [pc, #4]	@ (80069ac <__errno+0x8>)
 80069a6:	6818      	ldr	r0, [r3, #0]
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	20000018 	.word	0x20000018

080069b0 <__libc_init_array>:
 80069b0:	b570      	push	{r4, r5, r6, lr}
 80069b2:	4d0d      	ldr	r5, [pc, #52]	@ (80069e8 <__libc_init_array+0x38>)
 80069b4:	4c0d      	ldr	r4, [pc, #52]	@ (80069ec <__libc_init_array+0x3c>)
 80069b6:	1b64      	subs	r4, r4, r5
 80069b8:	10a4      	asrs	r4, r4, #2
 80069ba:	2600      	movs	r6, #0
 80069bc:	42a6      	cmp	r6, r4
 80069be:	d109      	bne.n	80069d4 <__libc_init_array+0x24>
 80069c0:	4d0b      	ldr	r5, [pc, #44]	@ (80069f0 <__libc_init_array+0x40>)
 80069c2:	4c0c      	ldr	r4, [pc, #48]	@ (80069f4 <__libc_init_array+0x44>)
 80069c4:	f000 fd2a 	bl	800741c <_init>
 80069c8:	1b64      	subs	r4, r4, r5
 80069ca:	10a4      	asrs	r4, r4, #2
 80069cc:	2600      	movs	r6, #0
 80069ce:	42a6      	cmp	r6, r4
 80069d0:	d105      	bne.n	80069de <__libc_init_array+0x2e>
 80069d2:	bd70      	pop	{r4, r5, r6, pc}
 80069d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80069d8:	4798      	blx	r3
 80069da:	3601      	adds	r6, #1
 80069dc:	e7ee      	b.n	80069bc <__libc_init_array+0xc>
 80069de:	f855 3b04 	ldr.w	r3, [r5], #4
 80069e2:	4798      	blx	r3
 80069e4:	3601      	adds	r6, #1
 80069e6:	e7f2      	b.n	80069ce <__libc_init_array+0x1e>
 80069e8:	08007514 	.word	0x08007514
 80069ec:	08007514 	.word	0x08007514
 80069f0:	08007514 	.word	0x08007514
 80069f4:	08007518 	.word	0x08007518

080069f8 <_free_r>:
 80069f8:	b538      	push	{r3, r4, r5, lr}
 80069fa:	4605      	mov	r5, r0
 80069fc:	2900      	cmp	r1, #0
 80069fe:	d041      	beq.n	8006a84 <_free_r+0x8c>
 8006a00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a04:	1f0c      	subs	r4, r1, #4
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	bfb8      	it	lt
 8006a0a:	18e4      	addlt	r4, r4, r3
 8006a0c:	f7ff fe40 	bl	8006690 <__malloc_lock>
 8006a10:	4a1d      	ldr	r2, [pc, #116]	@ (8006a88 <_free_r+0x90>)
 8006a12:	6813      	ldr	r3, [r2, #0]
 8006a14:	b933      	cbnz	r3, 8006a24 <_free_r+0x2c>
 8006a16:	6063      	str	r3, [r4, #4]
 8006a18:	6014      	str	r4, [r2, #0]
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a20:	f7ff be3c 	b.w	800669c <__malloc_unlock>
 8006a24:	42a3      	cmp	r3, r4
 8006a26:	d908      	bls.n	8006a3a <_free_r+0x42>
 8006a28:	6820      	ldr	r0, [r4, #0]
 8006a2a:	1821      	adds	r1, r4, r0
 8006a2c:	428b      	cmp	r3, r1
 8006a2e:	bf01      	itttt	eq
 8006a30:	6819      	ldreq	r1, [r3, #0]
 8006a32:	685b      	ldreq	r3, [r3, #4]
 8006a34:	1809      	addeq	r1, r1, r0
 8006a36:	6021      	streq	r1, [r4, #0]
 8006a38:	e7ed      	b.n	8006a16 <_free_r+0x1e>
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	b10b      	cbz	r3, 8006a44 <_free_r+0x4c>
 8006a40:	42a3      	cmp	r3, r4
 8006a42:	d9fa      	bls.n	8006a3a <_free_r+0x42>
 8006a44:	6811      	ldr	r1, [r2, #0]
 8006a46:	1850      	adds	r0, r2, r1
 8006a48:	42a0      	cmp	r0, r4
 8006a4a:	d10b      	bne.n	8006a64 <_free_r+0x6c>
 8006a4c:	6820      	ldr	r0, [r4, #0]
 8006a4e:	4401      	add	r1, r0
 8006a50:	1850      	adds	r0, r2, r1
 8006a52:	4283      	cmp	r3, r0
 8006a54:	6011      	str	r1, [r2, #0]
 8006a56:	d1e0      	bne.n	8006a1a <_free_r+0x22>
 8006a58:	6818      	ldr	r0, [r3, #0]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	6053      	str	r3, [r2, #4]
 8006a5e:	4408      	add	r0, r1
 8006a60:	6010      	str	r0, [r2, #0]
 8006a62:	e7da      	b.n	8006a1a <_free_r+0x22>
 8006a64:	d902      	bls.n	8006a6c <_free_r+0x74>
 8006a66:	230c      	movs	r3, #12
 8006a68:	602b      	str	r3, [r5, #0]
 8006a6a:	e7d6      	b.n	8006a1a <_free_r+0x22>
 8006a6c:	6820      	ldr	r0, [r4, #0]
 8006a6e:	1821      	adds	r1, r4, r0
 8006a70:	428b      	cmp	r3, r1
 8006a72:	bf04      	itt	eq
 8006a74:	6819      	ldreq	r1, [r3, #0]
 8006a76:	685b      	ldreq	r3, [r3, #4]
 8006a78:	6063      	str	r3, [r4, #4]
 8006a7a:	bf04      	itt	eq
 8006a7c:	1809      	addeq	r1, r1, r0
 8006a7e:	6021      	streq	r1, [r4, #0]
 8006a80:	6054      	str	r4, [r2, #4]
 8006a82:	e7ca      	b.n	8006a1a <_free_r+0x22>
 8006a84:	bd38      	pop	{r3, r4, r5, pc}
 8006a86:	bf00      	nop
 8006a88:	20000564 	.word	0x20000564

08006a8c <__sfputc_r>:
 8006a8c:	6893      	ldr	r3, [r2, #8]
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	b410      	push	{r4}
 8006a94:	6093      	str	r3, [r2, #8]
 8006a96:	da08      	bge.n	8006aaa <__sfputc_r+0x1e>
 8006a98:	6994      	ldr	r4, [r2, #24]
 8006a9a:	42a3      	cmp	r3, r4
 8006a9c:	db01      	blt.n	8006aa2 <__sfputc_r+0x16>
 8006a9e:	290a      	cmp	r1, #10
 8006aa0:	d103      	bne.n	8006aaa <__sfputc_r+0x1e>
 8006aa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006aa6:	f000 bba1 	b.w	80071ec <__swbuf_r>
 8006aaa:	6813      	ldr	r3, [r2, #0]
 8006aac:	1c58      	adds	r0, r3, #1
 8006aae:	6010      	str	r0, [r2, #0]
 8006ab0:	7019      	strb	r1, [r3, #0]
 8006ab2:	4608      	mov	r0, r1
 8006ab4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ab8:	4770      	bx	lr

08006aba <__sfputs_r>:
 8006aba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006abc:	4606      	mov	r6, r0
 8006abe:	460f      	mov	r7, r1
 8006ac0:	4614      	mov	r4, r2
 8006ac2:	18d5      	adds	r5, r2, r3
 8006ac4:	42ac      	cmp	r4, r5
 8006ac6:	d101      	bne.n	8006acc <__sfputs_r+0x12>
 8006ac8:	2000      	movs	r0, #0
 8006aca:	e007      	b.n	8006adc <__sfputs_r+0x22>
 8006acc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ad0:	463a      	mov	r2, r7
 8006ad2:	4630      	mov	r0, r6
 8006ad4:	f7ff ffda 	bl	8006a8c <__sfputc_r>
 8006ad8:	1c43      	adds	r3, r0, #1
 8006ada:	d1f3      	bne.n	8006ac4 <__sfputs_r+0xa>
 8006adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ae0 <_vfiprintf_r>:
 8006ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ae4:	460d      	mov	r5, r1
 8006ae6:	b09d      	sub	sp, #116	@ 0x74
 8006ae8:	4614      	mov	r4, r2
 8006aea:	4698      	mov	r8, r3
 8006aec:	4606      	mov	r6, r0
 8006aee:	b118      	cbz	r0, 8006af8 <_vfiprintf_r+0x18>
 8006af0:	6a03      	ldr	r3, [r0, #32]
 8006af2:	b90b      	cbnz	r3, 8006af8 <_vfiprintf_r+0x18>
 8006af4:	f7ff fe64 	bl	80067c0 <__sinit>
 8006af8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006afa:	07d9      	lsls	r1, r3, #31
 8006afc:	d405      	bmi.n	8006b0a <_vfiprintf_r+0x2a>
 8006afe:	89ab      	ldrh	r3, [r5, #12]
 8006b00:	059a      	lsls	r2, r3, #22
 8006b02:	d402      	bmi.n	8006b0a <_vfiprintf_r+0x2a>
 8006b04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b06:	f7fa fe01 	bl	800170c <__retarget_lock_acquire_recursive>
 8006b0a:	89ab      	ldrh	r3, [r5, #12]
 8006b0c:	071b      	lsls	r3, r3, #28
 8006b0e:	d501      	bpl.n	8006b14 <_vfiprintf_r+0x34>
 8006b10:	692b      	ldr	r3, [r5, #16]
 8006b12:	b99b      	cbnz	r3, 8006b3c <_vfiprintf_r+0x5c>
 8006b14:	4629      	mov	r1, r5
 8006b16:	4630      	mov	r0, r6
 8006b18:	f000 fba6 	bl	8007268 <__swsetup_r>
 8006b1c:	b170      	cbz	r0, 8006b3c <_vfiprintf_r+0x5c>
 8006b1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b20:	07dc      	lsls	r4, r3, #31
 8006b22:	d504      	bpl.n	8006b2e <_vfiprintf_r+0x4e>
 8006b24:	f04f 30ff 	mov.w	r0, #4294967295
 8006b28:	b01d      	add	sp, #116	@ 0x74
 8006b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b2e:	89ab      	ldrh	r3, [r5, #12]
 8006b30:	0598      	lsls	r0, r3, #22
 8006b32:	d4f7      	bmi.n	8006b24 <_vfiprintf_r+0x44>
 8006b34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b36:	f7fa fdfe 	bl	8001736 <__retarget_lock_release_recursive>
 8006b3a:	e7f3      	b.n	8006b24 <_vfiprintf_r+0x44>
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b40:	2320      	movs	r3, #32
 8006b42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006b46:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b4a:	2330      	movs	r3, #48	@ 0x30
 8006b4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006cfc <_vfiprintf_r+0x21c>
 8006b50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006b54:	f04f 0901 	mov.w	r9, #1
 8006b58:	4623      	mov	r3, r4
 8006b5a:	469a      	mov	sl, r3
 8006b5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b60:	b10a      	cbz	r2, 8006b66 <_vfiprintf_r+0x86>
 8006b62:	2a25      	cmp	r2, #37	@ 0x25
 8006b64:	d1f9      	bne.n	8006b5a <_vfiprintf_r+0x7a>
 8006b66:	ebba 0b04 	subs.w	fp, sl, r4
 8006b6a:	d00b      	beq.n	8006b84 <_vfiprintf_r+0xa4>
 8006b6c:	465b      	mov	r3, fp
 8006b6e:	4622      	mov	r2, r4
 8006b70:	4629      	mov	r1, r5
 8006b72:	4630      	mov	r0, r6
 8006b74:	f7ff ffa1 	bl	8006aba <__sfputs_r>
 8006b78:	3001      	adds	r0, #1
 8006b7a:	f000 80a7 	beq.w	8006ccc <_vfiprintf_r+0x1ec>
 8006b7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b80:	445a      	add	r2, fp
 8006b82:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b84:	f89a 3000 	ldrb.w	r3, [sl]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f000 809f 	beq.w	8006ccc <_vfiprintf_r+0x1ec>
 8006b8e:	2300      	movs	r3, #0
 8006b90:	f04f 32ff 	mov.w	r2, #4294967295
 8006b94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b98:	f10a 0a01 	add.w	sl, sl, #1
 8006b9c:	9304      	str	r3, [sp, #16]
 8006b9e:	9307      	str	r3, [sp, #28]
 8006ba0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006ba4:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ba6:	4654      	mov	r4, sl
 8006ba8:	2205      	movs	r2, #5
 8006baa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bae:	4853      	ldr	r0, [pc, #332]	@ (8006cfc <_vfiprintf_r+0x21c>)
 8006bb0:	f7f9 fb0e 	bl	80001d0 <memchr>
 8006bb4:	9a04      	ldr	r2, [sp, #16]
 8006bb6:	b9d8      	cbnz	r0, 8006bf0 <_vfiprintf_r+0x110>
 8006bb8:	06d1      	lsls	r1, r2, #27
 8006bba:	bf44      	itt	mi
 8006bbc:	2320      	movmi	r3, #32
 8006bbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006bc2:	0713      	lsls	r3, r2, #28
 8006bc4:	bf44      	itt	mi
 8006bc6:	232b      	movmi	r3, #43	@ 0x2b
 8006bc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006bcc:	f89a 3000 	ldrb.w	r3, [sl]
 8006bd0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bd2:	d015      	beq.n	8006c00 <_vfiprintf_r+0x120>
 8006bd4:	9a07      	ldr	r2, [sp, #28]
 8006bd6:	4654      	mov	r4, sl
 8006bd8:	2000      	movs	r0, #0
 8006bda:	f04f 0c0a 	mov.w	ip, #10
 8006bde:	4621      	mov	r1, r4
 8006be0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006be4:	3b30      	subs	r3, #48	@ 0x30
 8006be6:	2b09      	cmp	r3, #9
 8006be8:	d94b      	bls.n	8006c82 <_vfiprintf_r+0x1a2>
 8006bea:	b1b0      	cbz	r0, 8006c1a <_vfiprintf_r+0x13a>
 8006bec:	9207      	str	r2, [sp, #28]
 8006bee:	e014      	b.n	8006c1a <_vfiprintf_r+0x13a>
 8006bf0:	eba0 0308 	sub.w	r3, r0, r8
 8006bf4:	fa09 f303 	lsl.w	r3, r9, r3
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	9304      	str	r3, [sp, #16]
 8006bfc:	46a2      	mov	sl, r4
 8006bfe:	e7d2      	b.n	8006ba6 <_vfiprintf_r+0xc6>
 8006c00:	9b03      	ldr	r3, [sp, #12]
 8006c02:	1d19      	adds	r1, r3, #4
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	9103      	str	r1, [sp, #12]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	bfbb      	ittet	lt
 8006c0c:	425b      	neglt	r3, r3
 8006c0e:	f042 0202 	orrlt.w	r2, r2, #2
 8006c12:	9307      	strge	r3, [sp, #28]
 8006c14:	9307      	strlt	r3, [sp, #28]
 8006c16:	bfb8      	it	lt
 8006c18:	9204      	strlt	r2, [sp, #16]
 8006c1a:	7823      	ldrb	r3, [r4, #0]
 8006c1c:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c1e:	d10a      	bne.n	8006c36 <_vfiprintf_r+0x156>
 8006c20:	7863      	ldrb	r3, [r4, #1]
 8006c22:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c24:	d132      	bne.n	8006c8c <_vfiprintf_r+0x1ac>
 8006c26:	9b03      	ldr	r3, [sp, #12]
 8006c28:	1d1a      	adds	r2, r3, #4
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	9203      	str	r2, [sp, #12]
 8006c2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006c32:	3402      	adds	r4, #2
 8006c34:	9305      	str	r3, [sp, #20]
 8006c36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006d0c <_vfiprintf_r+0x22c>
 8006c3a:	7821      	ldrb	r1, [r4, #0]
 8006c3c:	2203      	movs	r2, #3
 8006c3e:	4650      	mov	r0, sl
 8006c40:	f7f9 fac6 	bl	80001d0 <memchr>
 8006c44:	b138      	cbz	r0, 8006c56 <_vfiprintf_r+0x176>
 8006c46:	9b04      	ldr	r3, [sp, #16]
 8006c48:	eba0 000a 	sub.w	r0, r0, sl
 8006c4c:	2240      	movs	r2, #64	@ 0x40
 8006c4e:	4082      	lsls	r2, r0
 8006c50:	4313      	orrs	r3, r2
 8006c52:	3401      	adds	r4, #1
 8006c54:	9304      	str	r3, [sp, #16]
 8006c56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c5a:	4829      	ldr	r0, [pc, #164]	@ (8006d00 <_vfiprintf_r+0x220>)
 8006c5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006c60:	2206      	movs	r2, #6
 8006c62:	f7f9 fab5 	bl	80001d0 <memchr>
 8006c66:	2800      	cmp	r0, #0
 8006c68:	d03f      	beq.n	8006cea <_vfiprintf_r+0x20a>
 8006c6a:	4b26      	ldr	r3, [pc, #152]	@ (8006d04 <_vfiprintf_r+0x224>)
 8006c6c:	bb1b      	cbnz	r3, 8006cb6 <_vfiprintf_r+0x1d6>
 8006c6e:	9b03      	ldr	r3, [sp, #12]
 8006c70:	3307      	adds	r3, #7
 8006c72:	f023 0307 	bic.w	r3, r3, #7
 8006c76:	3308      	adds	r3, #8
 8006c78:	9303      	str	r3, [sp, #12]
 8006c7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c7c:	443b      	add	r3, r7
 8006c7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c80:	e76a      	b.n	8006b58 <_vfiprintf_r+0x78>
 8006c82:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c86:	460c      	mov	r4, r1
 8006c88:	2001      	movs	r0, #1
 8006c8a:	e7a8      	b.n	8006bde <_vfiprintf_r+0xfe>
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	3401      	adds	r4, #1
 8006c90:	9305      	str	r3, [sp, #20]
 8006c92:	4619      	mov	r1, r3
 8006c94:	f04f 0c0a 	mov.w	ip, #10
 8006c98:	4620      	mov	r0, r4
 8006c9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c9e:	3a30      	subs	r2, #48	@ 0x30
 8006ca0:	2a09      	cmp	r2, #9
 8006ca2:	d903      	bls.n	8006cac <_vfiprintf_r+0x1cc>
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d0c6      	beq.n	8006c36 <_vfiprintf_r+0x156>
 8006ca8:	9105      	str	r1, [sp, #20]
 8006caa:	e7c4      	b.n	8006c36 <_vfiprintf_r+0x156>
 8006cac:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cb0:	4604      	mov	r4, r0
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e7f0      	b.n	8006c98 <_vfiprintf_r+0x1b8>
 8006cb6:	ab03      	add	r3, sp, #12
 8006cb8:	9300      	str	r3, [sp, #0]
 8006cba:	462a      	mov	r2, r5
 8006cbc:	4b12      	ldr	r3, [pc, #72]	@ (8006d08 <_vfiprintf_r+0x228>)
 8006cbe:	a904      	add	r1, sp, #16
 8006cc0:	4630      	mov	r0, r6
 8006cc2:	f3af 8000 	nop.w
 8006cc6:	4607      	mov	r7, r0
 8006cc8:	1c78      	adds	r0, r7, #1
 8006cca:	d1d6      	bne.n	8006c7a <_vfiprintf_r+0x19a>
 8006ccc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006cce:	07d9      	lsls	r1, r3, #31
 8006cd0:	d405      	bmi.n	8006cde <_vfiprintf_r+0x1fe>
 8006cd2:	89ab      	ldrh	r3, [r5, #12]
 8006cd4:	059a      	lsls	r2, r3, #22
 8006cd6:	d402      	bmi.n	8006cde <_vfiprintf_r+0x1fe>
 8006cd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006cda:	f7fa fd2c 	bl	8001736 <__retarget_lock_release_recursive>
 8006cde:	89ab      	ldrh	r3, [r5, #12]
 8006ce0:	065b      	lsls	r3, r3, #25
 8006ce2:	f53f af1f 	bmi.w	8006b24 <_vfiprintf_r+0x44>
 8006ce6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ce8:	e71e      	b.n	8006b28 <_vfiprintf_r+0x48>
 8006cea:	ab03      	add	r3, sp, #12
 8006cec:	9300      	str	r3, [sp, #0]
 8006cee:	462a      	mov	r2, r5
 8006cf0:	4b05      	ldr	r3, [pc, #20]	@ (8006d08 <_vfiprintf_r+0x228>)
 8006cf2:	a904      	add	r1, sp, #16
 8006cf4:	4630      	mov	r0, r6
 8006cf6:	f000 f879 	bl	8006dec <_printf_i>
 8006cfa:	e7e4      	b.n	8006cc6 <_vfiprintf_r+0x1e6>
 8006cfc:	080074d8 	.word	0x080074d8
 8006d00:	080074e2 	.word	0x080074e2
 8006d04:	00000000 	.word	0x00000000
 8006d08:	08006abb 	.word	0x08006abb
 8006d0c:	080074de 	.word	0x080074de

08006d10 <_printf_common>:
 8006d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d14:	4616      	mov	r6, r2
 8006d16:	4698      	mov	r8, r3
 8006d18:	688a      	ldr	r2, [r1, #8]
 8006d1a:	690b      	ldr	r3, [r1, #16]
 8006d1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006d20:	4293      	cmp	r3, r2
 8006d22:	bfb8      	it	lt
 8006d24:	4613      	movlt	r3, r2
 8006d26:	6033      	str	r3, [r6, #0]
 8006d28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006d2c:	4607      	mov	r7, r0
 8006d2e:	460c      	mov	r4, r1
 8006d30:	b10a      	cbz	r2, 8006d36 <_printf_common+0x26>
 8006d32:	3301      	adds	r3, #1
 8006d34:	6033      	str	r3, [r6, #0]
 8006d36:	6823      	ldr	r3, [r4, #0]
 8006d38:	0699      	lsls	r1, r3, #26
 8006d3a:	bf42      	ittt	mi
 8006d3c:	6833      	ldrmi	r3, [r6, #0]
 8006d3e:	3302      	addmi	r3, #2
 8006d40:	6033      	strmi	r3, [r6, #0]
 8006d42:	6825      	ldr	r5, [r4, #0]
 8006d44:	f015 0506 	ands.w	r5, r5, #6
 8006d48:	d106      	bne.n	8006d58 <_printf_common+0x48>
 8006d4a:	f104 0a19 	add.w	sl, r4, #25
 8006d4e:	68e3      	ldr	r3, [r4, #12]
 8006d50:	6832      	ldr	r2, [r6, #0]
 8006d52:	1a9b      	subs	r3, r3, r2
 8006d54:	42ab      	cmp	r3, r5
 8006d56:	dc26      	bgt.n	8006da6 <_printf_common+0x96>
 8006d58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006d5c:	6822      	ldr	r2, [r4, #0]
 8006d5e:	3b00      	subs	r3, #0
 8006d60:	bf18      	it	ne
 8006d62:	2301      	movne	r3, #1
 8006d64:	0692      	lsls	r2, r2, #26
 8006d66:	d42b      	bmi.n	8006dc0 <_printf_common+0xb0>
 8006d68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006d6c:	4641      	mov	r1, r8
 8006d6e:	4638      	mov	r0, r7
 8006d70:	47c8      	blx	r9
 8006d72:	3001      	adds	r0, #1
 8006d74:	d01e      	beq.n	8006db4 <_printf_common+0xa4>
 8006d76:	6823      	ldr	r3, [r4, #0]
 8006d78:	6922      	ldr	r2, [r4, #16]
 8006d7a:	f003 0306 	and.w	r3, r3, #6
 8006d7e:	2b04      	cmp	r3, #4
 8006d80:	bf02      	ittt	eq
 8006d82:	68e5      	ldreq	r5, [r4, #12]
 8006d84:	6833      	ldreq	r3, [r6, #0]
 8006d86:	1aed      	subeq	r5, r5, r3
 8006d88:	68a3      	ldr	r3, [r4, #8]
 8006d8a:	bf0c      	ite	eq
 8006d8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d90:	2500      	movne	r5, #0
 8006d92:	4293      	cmp	r3, r2
 8006d94:	bfc4      	itt	gt
 8006d96:	1a9b      	subgt	r3, r3, r2
 8006d98:	18ed      	addgt	r5, r5, r3
 8006d9a:	2600      	movs	r6, #0
 8006d9c:	341a      	adds	r4, #26
 8006d9e:	42b5      	cmp	r5, r6
 8006da0:	d11a      	bne.n	8006dd8 <_printf_common+0xc8>
 8006da2:	2000      	movs	r0, #0
 8006da4:	e008      	b.n	8006db8 <_printf_common+0xa8>
 8006da6:	2301      	movs	r3, #1
 8006da8:	4652      	mov	r2, sl
 8006daa:	4641      	mov	r1, r8
 8006dac:	4638      	mov	r0, r7
 8006dae:	47c8      	blx	r9
 8006db0:	3001      	adds	r0, #1
 8006db2:	d103      	bne.n	8006dbc <_printf_common+0xac>
 8006db4:	f04f 30ff 	mov.w	r0, #4294967295
 8006db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dbc:	3501      	adds	r5, #1
 8006dbe:	e7c6      	b.n	8006d4e <_printf_common+0x3e>
 8006dc0:	18e1      	adds	r1, r4, r3
 8006dc2:	1c5a      	adds	r2, r3, #1
 8006dc4:	2030      	movs	r0, #48	@ 0x30
 8006dc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006dca:	4422      	add	r2, r4
 8006dcc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006dd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006dd4:	3302      	adds	r3, #2
 8006dd6:	e7c7      	b.n	8006d68 <_printf_common+0x58>
 8006dd8:	2301      	movs	r3, #1
 8006dda:	4622      	mov	r2, r4
 8006ddc:	4641      	mov	r1, r8
 8006dde:	4638      	mov	r0, r7
 8006de0:	47c8      	blx	r9
 8006de2:	3001      	adds	r0, #1
 8006de4:	d0e6      	beq.n	8006db4 <_printf_common+0xa4>
 8006de6:	3601      	adds	r6, #1
 8006de8:	e7d9      	b.n	8006d9e <_printf_common+0x8e>
	...

08006dec <_printf_i>:
 8006dec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006df0:	7e0f      	ldrb	r7, [r1, #24]
 8006df2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006df4:	2f78      	cmp	r7, #120	@ 0x78
 8006df6:	4691      	mov	r9, r2
 8006df8:	4680      	mov	r8, r0
 8006dfa:	460c      	mov	r4, r1
 8006dfc:	469a      	mov	sl, r3
 8006dfe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006e02:	d807      	bhi.n	8006e14 <_printf_i+0x28>
 8006e04:	2f62      	cmp	r7, #98	@ 0x62
 8006e06:	d80a      	bhi.n	8006e1e <_printf_i+0x32>
 8006e08:	2f00      	cmp	r7, #0
 8006e0a:	f000 80d2 	beq.w	8006fb2 <_printf_i+0x1c6>
 8006e0e:	2f58      	cmp	r7, #88	@ 0x58
 8006e10:	f000 80b9 	beq.w	8006f86 <_printf_i+0x19a>
 8006e14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006e1c:	e03a      	b.n	8006e94 <_printf_i+0xa8>
 8006e1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006e22:	2b15      	cmp	r3, #21
 8006e24:	d8f6      	bhi.n	8006e14 <_printf_i+0x28>
 8006e26:	a101      	add	r1, pc, #4	@ (adr r1, 8006e2c <_printf_i+0x40>)
 8006e28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e2c:	08006e85 	.word	0x08006e85
 8006e30:	08006e99 	.word	0x08006e99
 8006e34:	08006e15 	.word	0x08006e15
 8006e38:	08006e15 	.word	0x08006e15
 8006e3c:	08006e15 	.word	0x08006e15
 8006e40:	08006e15 	.word	0x08006e15
 8006e44:	08006e99 	.word	0x08006e99
 8006e48:	08006e15 	.word	0x08006e15
 8006e4c:	08006e15 	.word	0x08006e15
 8006e50:	08006e15 	.word	0x08006e15
 8006e54:	08006e15 	.word	0x08006e15
 8006e58:	08006f99 	.word	0x08006f99
 8006e5c:	08006ec3 	.word	0x08006ec3
 8006e60:	08006f53 	.word	0x08006f53
 8006e64:	08006e15 	.word	0x08006e15
 8006e68:	08006e15 	.word	0x08006e15
 8006e6c:	08006fbb 	.word	0x08006fbb
 8006e70:	08006e15 	.word	0x08006e15
 8006e74:	08006ec3 	.word	0x08006ec3
 8006e78:	08006e15 	.word	0x08006e15
 8006e7c:	08006e15 	.word	0x08006e15
 8006e80:	08006f5b 	.word	0x08006f5b
 8006e84:	6833      	ldr	r3, [r6, #0]
 8006e86:	1d1a      	adds	r2, r3, #4
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	6032      	str	r2, [r6, #0]
 8006e8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006e94:	2301      	movs	r3, #1
 8006e96:	e09d      	b.n	8006fd4 <_printf_i+0x1e8>
 8006e98:	6833      	ldr	r3, [r6, #0]
 8006e9a:	6820      	ldr	r0, [r4, #0]
 8006e9c:	1d19      	adds	r1, r3, #4
 8006e9e:	6031      	str	r1, [r6, #0]
 8006ea0:	0606      	lsls	r6, r0, #24
 8006ea2:	d501      	bpl.n	8006ea8 <_printf_i+0xbc>
 8006ea4:	681d      	ldr	r5, [r3, #0]
 8006ea6:	e003      	b.n	8006eb0 <_printf_i+0xc4>
 8006ea8:	0645      	lsls	r5, r0, #25
 8006eaa:	d5fb      	bpl.n	8006ea4 <_printf_i+0xb8>
 8006eac:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006eb0:	2d00      	cmp	r5, #0
 8006eb2:	da03      	bge.n	8006ebc <_printf_i+0xd0>
 8006eb4:	232d      	movs	r3, #45	@ 0x2d
 8006eb6:	426d      	negs	r5, r5
 8006eb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ebc:	4859      	ldr	r0, [pc, #356]	@ (8007024 <_printf_i+0x238>)
 8006ebe:	230a      	movs	r3, #10
 8006ec0:	e011      	b.n	8006ee6 <_printf_i+0xfa>
 8006ec2:	6821      	ldr	r1, [r4, #0]
 8006ec4:	6833      	ldr	r3, [r6, #0]
 8006ec6:	0608      	lsls	r0, r1, #24
 8006ec8:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ecc:	d402      	bmi.n	8006ed4 <_printf_i+0xe8>
 8006ece:	0649      	lsls	r1, r1, #25
 8006ed0:	bf48      	it	mi
 8006ed2:	b2ad      	uxthmi	r5, r5
 8006ed4:	2f6f      	cmp	r7, #111	@ 0x6f
 8006ed6:	4853      	ldr	r0, [pc, #332]	@ (8007024 <_printf_i+0x238>)
 8006ed8:	6033      	str	r3, [r6, #0]
 8006eda:	bf14      	ite	ne
 8006edc:	230a      	movne	r3, #10
 8006ede:	2308      	moveq	r3, #8
 8006ee0:	2100      	movs	r1, #0
 8006ee2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006ee6:	6866      	ldr	r6, [r4, #4]
 8006ee8:	60a6      	str	r6, [r4, #8]
 8006eea:	2e00      	cmp	r6, #0
 8006eec:	bfa2      	ittt	ge
 8006eee:	6821      	ldrge	r1, [r4, #0]
 8006ef0:	f021 0104 	bicge.w	r1, r1, #4
 8006ef4:	6021      	strge	r1, [r4, #0]
 8006ef6:	b90d      	cbnz	r5, 8006efc <_printf_i+0x110>
 8006ef8:	2e00      	cmp	r6, #0
 8006efa:	d04b      	beq.n	8006f94 <_printf_i+0x1a8>
 8006efc:	4616      	mov	r6, r2
 8006efe:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f02:	fb03 5711 	mls	r7, r3, r1, r5
 8006f06:	5dc7      	ldrb	r7, [r0, r7]
 8006f08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f0c:	462f      	mov	r7, r5
 8006f0e:	42bb      	cmp	r3, r7
 8006f10:	460d      	mov	r5, r1
 8006f12:	d9f4      	bls.n	8006efe <_printf_i+0x112>
 8006f14:	2b08      	cmp	r3, #8
 8006f16:	d10b      	bne.n	8006f30 <_printf_i+0x144>
 8006f18:	6823      	ldr	r3, [r4, #0]
 8006f1a:	07df      	lsls	r7, r3, #31
 8006f1c:	d508      	bpl.n	8006f30 <_printf_i+0x144>
 8006f1e:	6923      	ldr	r3, [r4, #16]
 8006f20:	6861      	ldr	r1, [r4, #4]
 8006f22:	4299      	cmp	r1, r3
 8006f24:	bfde      	ittt	le
 8006f26:	2330      	movle	r3, #48	@ 0x30
 8006f28:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006f30:	1b92      	subs	r2, r2, r6
 8006f32:	6122      	str	r2, [r4, #16]
 8006f34:	f8cd a000 	str.w	sl, [sp]
 8006f38:	464b      	mov	r3, r9
 8006f3a:	aa03      	add	r2, sp, #12
 8006f3c:	4621      	mov	r1, r4
 8006f3e:	4640      	mov	r0, r8
 8006f40:	f7ff fee6 	bl	8006d10 <_printf_common>
 8006f44:	3001      	adds	r0, #1
 8006f46:	d14a      	bne.n	8006fde <_printf_i+0x1f2>
 8006f48:	f04f 30ff 	mov.w	r0, #4294967295
 8006f4c:	b004      	add	sp, #16
 8006f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f52:	6823      	ldr	r3, [r4, #0]
 8006f54:	f043 0320 	orr.w	r3, r3, #32
 8006f58:	6023      	str	r3, [r4, #0]
 8006f5a:	4833      	ldr	r0, [pc, #204]	@ (8007028 <_printf_i+0x23c>)
 8006f5c:	2778      	movs	r7, #120	@ 0x78
 8006f5e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006f62:	6823      	ldr	r3, [r4, #0]
 8006f64:	6831      	ldr	r1, [r6, #0]
 8006f66:	061f      	lsls	r7, r3, #24
 8006f68:	f851 5b04 	ldr.w	r5, [r1], #4
 8006f6c:	d402      	bmi.n	8006f74 <_printf_i+0x188>
 8006f6e:	065f      	lsls	r7, r3, #25
 8006f70:	bf48      	it	mi
 8006f72:	b2ad      	uxthmi	r5, r5
 8006f74:	6031      	str	r1, [r6, #0]
 8006f76:	07d9      	lsls	r1, r3, #31
 8006f78:	bf44      	itt	mi
 8006f7a:	f043 0320 	orrmi.w	r3, r3, #32
 8006f7e:	6023      	strmi	r3, [r4, #0]
 8006f80:	b11d      	cbz	r5, 8006f8a <_printf_i+0x19e>
 8006f82:	2310      	movs	r3, #16
 8006f84:	e7ac      	b.n	8006ee0 <_printf_i+0xf4>
 8006f86:	4827      	ldr	r0, [pc, #156]	@ (8007024 <_printf_i+0x238>)
 8006f88:	e7e9      	b.n	8006f5e <_printf_i+0x172>
 8006f8a:	6823      	ldr	r3, [r4, #0]
 8006f8c:	f023 0320 	bic.w	r3, r3, #32
 8006f90:	6023      	str	r3, [r4, #0]
 8006f92:	e7f6      	b.n	8006f82 <_printf_i+0x196>
 8006f94:	4616      	mov	r6, r2
 8006f96:	e7bd      	b.n	8006f14 <_printf_i+0x128>
 8006f98:	6833      	ldr	r3, [r6, #0]
 8006f9a:	6825      	ldr	r5, [r4, #0]
 8006f9c:	6961      	ldr	r1, [r4, #20]
 8006f9e:	1d18      	adds	r0, r3, #4
 8006fa0:	6030      	str	r0, [r6, #0]
 8006fa2:	062e      	lsls	r6, r5, #24
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	d501      	bpl.n	8006fac <_printf_i+0x1c0>
 8006fa8:	6019      	str	r1, [r3, #0]
 8006faa:	e002      	b.n	8006fb2 <_printf_i+0x1c6>
 8006fac:	0668      	lsls	r0, r5, #25
 8006fae:	d5fb      	bpl.n	8006fa8 <_printf_i+0x1bc>
 8006fb0:	8019      	strh	r1, [r3, #0]
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	6123      	str	r3, [r4, #16]
 8006fb6:	4616      	mov	r6, r2
 8006fb8:	e7bc      	b.n	8006f34 <_printf_i+0x148>
 8006fba:	6833      	ldr	r3, [r6, #0]
 8006fbc:	1d1a      	adds	r2, r3, #4
 8006fbe:	6032      	str	r2, [r6, #0]
 8006fc0:	681e      	ldr	r6, [r3, #0]
 8006fc2:	6862      	ldr	r2, [r4, #4]
 8006fc4:	2100      	movs	r1, #0
 8006fc6:	4630      	mov	r0, r6
 8006fc8:	f7f9 f902 	bl	80001d0 <memchr>
 8006fcc:	b108      	cbz	r0, 8006fd2 <_printf_i+0x1e6>
 8006fce:	1b80      	subs	r0, r0, r6
 8006fd0:	6060      	str	r0, [r4, #4]
 8006fd2:	6863      	ldr	r3, [r4, #4]
 8006fd4:	6123      	str	r3, [r4, #16]
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fdc:	e7aa      	b.n	8006f34 <_printf_i+0x148>
 8006fde:	6923      	ldr	r3, [r4, #16]
 8006fe0:	4632      	mov	r2, r6
 8006fe2:	4649      	mov	r1, r9
 8006fe4:	4640      	mov	r0, r8
 8006fe6:	47d0      	blx	sl
 8006fe8:	3001      	adds	r0, #1
 8006fea:	d0ad      	beq.n	8006f48 <_printf_i+0x15c>
 8006fec:	6823      	ldr	r3, [r4, #0]
 8006fee:	079b      	lsls	r3, r3, #30
 8006ff0:	d413      	bmi.n	800701a <_printf_i+0x22e>
 8006ff2:	68e0      	ldr	r0, [r4, #12]
 8006ff4:	9b03      	ldr	r3, [sp, #12]
 8006ff6:	4298      	cmp	r0, r3
 8006ff8:	bfb8      	it	lt
 8006ffa:	4618      	movlt	r0, r3
 8006ffc:	e7a6      	b.n	8006f4c <_printf_i+0x160>
 8006ffe:	2301      	movs	r3, #1
 8007000:	4632      	mov	r2, r6
 8007002:	4649      	mov	r1, r9
 8007004:	4640      	mov	r0, r8
 8007006:	47d0      	blx	sl
 8007008:	3001      	adds	r0, #1
 800700a:	d09d      	beq.n	8006f48 <_printf_i+0x15c>
 800700c:	3501      	adds	r5, #1
 800700e:	68e3      	ldr	r3, [r4, #12]
 8007010:	9903      	ldr	r1, [sp, #12]
 8007012:	1a5b      	subs	r3, r3, r1
 8007014:	42ab      	cmp	r3, r5
 8007016:	dcf2      	bgt.n	8006ffe <_printf_i+0x212>
 8007018:	e7eb      	b.n	8006ff2 <_printf_i+0x206>
 800701a:	2500      	movs	r5, #0
 800701c:	f104 0619 	add.w	r6, r4, #25
 8007020:	e7f5      	b.n	800700e <_printf_i+0x222>
 8007022:	bf00      	nop
 8007024:	080074e9 	.word	0x080074e9
 8007028:	080074fa 	.word	0x080074fa

0800702c <__sflush_r>:
 800702c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007034:	0716      	lsls	r6, r2, #28
 8007036:	4605      	mov	r5, r0
 8007038:	460c      	mov	r4, r1
 800703a:	d454      	bmi.n	80070e6 <__sflush_r+0xba>
 800703c:	684b      	ldr	r3, [r1, #4]
 800703e:	2b00      	cmp	r3, #0
 8007040:	dc02      	bgt.n	8007048 <__sflush_r+0x1c>
 8007042:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007044:	2b00      	cmp	r3, #0
 8007046:	dd48      	ble.n	80070da <__sflush_r+0xae>
 8007048:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800704a:	2e00      	cmp	r6, #0
 800704c:	d045      	beq.n	80070da <__sflush_r+0xae>
 800704e:	2300      	movs	r3, #0
 8007050:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007054:	682f      	ldr	r7, [r5, #0]
 8007056:	6a21      	ldr	r1, [r4, #32]
 8007058:	602b      	str	r3, [r5, #0]
 800705a:	d030      	beq.n	80070be <__sflush_r+0x92>
 800705c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800705e:	89a3      	ldrh	r3, [r4, #12]
 8007060:	0759      	lsls	r1, r3, #29
 8007062:	d505      	bpl.n	8007070 <__sflush_r+0x44>
 8007064:	6863      	ldr	r3, [r4, #4]
 8007066:	1ad2      	subs	r2, r2, r3
 8007068:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800706a:	b10b      	cbz	r3, 8007070 <__sflush_r+0x44>
 800706c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800706e:	1ad2      	subs	r2, r2, r3
 8007070:	2300      	movs	r3, #0
 8007072:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007074:	6a21      	ldr	r1, [r4, #32]
 8007076:	4628      	mov	r0, r5
 8007078:	47b0      	blx	r6
 800707a:	1c43      	adds	r3, r0, #1
 800707c:	89a3      	ldrh	r3, [r4, #12]
 800707e:	d106      	bne.n	800708e <__sflush_r+0x62>
 8007080:	6829      	ldr	r1, [r5, #0]
 8007082:	291d      	cmp	r1, #29
 8007084:	d82b      	bhi.n	80070de <__sflush_r+0xb2>
 8007086:	4a2a      	ldr	r2, [pc, #168]	@ (8007130 <__sflush_r+0x104>)
 8007088:	410a      	asrs	r2, r1
 800708a:	07d6      	lsls	r6, r2, #31
 800708c:	d427      	bmi.n	80070de <__sflush_r+0xb2>
 800708e:	2200      	movs	r2, #0
 8007090:	6062      	str	r2, [r4, #4]
 8007092:	04d9      	lsls	r1, r3, #19
 8007094:	6922      	ldr	r2, [r4, #16]
 8007096:	6022      	str	r2, [r4, #0]
 8007098:	d504      	bpl.n	80070a4 <__sflush_r+0x78>
 800709a:	1c42      	adds	r2, r0, #1
 800709c:	d101      	bne.n	80070a2 <__sflush_r+0x76>
 800709e:	682b      	ldr	r3, [r5, #0]
 80070a0:	b903      	cbnz	r3, 80070a4 <__sflush_r+0x78>
 80070a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80070a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80070a6:	602f      	str	r7, [r5, #0]
 80070a8:	b1b9      	cbz	r1, 80070da <__sflush_r+0xae>
 80070aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80070ae:	4299      	cmp	r1, r3
 80070b0:	d002      	beq.n	80070b8 <__sflush_r+0x8c>
 80070b2:	4628      	mov	r0, r5
 80070b4:	f7ff fca0 	bl	80069f8 <_free_r>
 80070b8:	2300      	movs	r3, #0
 80070ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80070bc:	e00d      	b.n	80070da <__sflush_r+0xae>
 80070be:	2301      	movs	r3, #1
 80070c0:	4628      	mov	r0, r5
 80070c2:	47b0      	blx	r6
 80070c4:	4602      	mov	r2, r0
 80070c6:	1c50      	adds	r0, r2, #1
 80070c8:	d1c9      	bne.n	800705e <__sflush_r+0x32>
 80070ca:	682b      	ldr	r3, [r5, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d0c6      	beq.n	800705e <__sflush_r+0x32>
 80070d0:	2b1d      	cmp	r3, #29
 80070d2:	d001      	beq.n	80070d8 <__sflush_r+0xac>
 80070d4:	2b16      	cmp	r3, #22
 80070d6:	d11e      	bne.n	8007116 <__sflush_r+0xea>
 80070d8:	602f      	str	r7, [r5, #0]
 80070da:	2000      	movs	r0, #0
 80070dc:	e022      	b.n	8007124 <__sflush_r+0xf8>
 80070de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070e2:	b21b      	sxth	r3, r3
 80070e4:	e01b      	b.n	800711e <__sflush_r+0xf2>
 80070e6:	690f      	ldr	r7, [r1, #16]
 80070e8:	2f00      	cmp	r7, #0
 80070ea:	d0f6      	beq.n	80070da <__sflush_r+0xae>
 80070ec:	0793      	lsls	r3, r2, #30
 80070ee:	680e      	ldr	r6, [r1, #0]
 80070f0:	bf08      	it	eq
 80070f2:	694b      	ldreq	r3, [r1, #20]
 80070f4:	600f      	str	r7, [r1, #0]
 80070f6:	bf18      	it	ne
 80070f8:	2300      	movne	r3, #0
 80070fa:	eba6 0807 	sub.w	r8, r6, r7
 80070fe:	608b      	str	r3, [r1, #8]
 8007100:	f1b8 0f00 	cmp.w	r8, #0
 8007104:	dde9      	ble.n	80070da <__sflush_r+0xae>
 8007106:	6a21      	ldr	r1, [r4, #32]
 8007108:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800710a:	4643      	mov	r3, r8
 800710c:	463a      	mov	r2, r7
 800710e:	4628      	mov	r0, r5
 8007110:	47b0      	blx	r6
 8007112:	2800      	cmp	r0, #0
 8007114:	dc08      	bgt.n	8007128 <__sflush_r+0xfc>
 8007116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800711a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800711e:	81a3      	strh	r3, [r4, #12]
 8007120:	f04f 30ff 	mov.w	r0, #4294967295
 8007124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007128:	4407      	add	r7, r0
 800712a:	eba8 0800 	sub.w	r8, r8, r0
 800712e:	e7e7      	b.n	8007100 <__sflush_r+0xd4>
 8007130:	dfbffffe 	.word	0xdfbffffe

08007134 <_fflush_r>:
 8007134:	b538      	push	{r3, r4, r5, lr}
 8007136:	690b      	ldr	r3, [r1, #16]
 8007138:	4605      	mov	r5, r0
 800713a:	460c      	mov	r4, r1
 800713c:	b913      	cbnz	r3, 8007144 <_fflush_r+0x10>
 800713e:	2500      	movs	r5, #0
 8007140:	4628      	mov	r0, r5
 8007142:	bd38      	pop	{r3, r4, r5, pc}
 8007144:	b118      	cbz	r0, 800714e <_fflush_r+0x1a>
 8007146:	6a03      	ldr	r3, [r0, #32]
 8007148:	b90b      	cbnz	r3, 800714e <_fflush_r+0x1a>
 800714a:	f7ff fb39 	bl	80067c0 <__sinit>
 800714e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d0f3      	beq.n	800713e <_fflush_r+0xa>
 8007156:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007158:	07d0      	lsls	r0, r2, #31
 800715a:	d404      	bmi.n	8007166 <_fflush_r+0x32>
 800715c:	0599      	lsls	r1, r3, #22
 800715e:	d402      	bmi.n	8007166 <_fflush_r+0x32>
 8007160:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007162:	f7fa fad3 	bl	800170c <__retarget_lock_acquire_recursive>
 8007166:	4628      	mov	r0, r5
 8007168:	4621      	mov	r1, r4
 800716a:	f7ff ff5f 	bl	800702c <__sflush_r>
 800716e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007170:	07da      	lsls	r2, r3, #31
 8007172:	4605      	mov	r5, r0
 8007174:	d4e4      	bmi.n	8007140 <_fflush_r+0xc>
 8007176:	89a3      	ldrh	r3, [r4, #12]
 8007178:	059b      	lsls	r3, r3, #22
 800717a:	d4e1      	bmi.n	8007140 <_fflush_r+0xc>
 800717c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800717e:	f7fa fada 	bl	8001736 <__retarget_lock_release_recursive>
 8007182:	e7dd      	b.n	8007140 <_fflush_r+0xc>

08007184 <_putc_r>:
 8007184:	b570      	push	{r4, r5, r6, lr}
 8007186:	460d      	mov	r5, r1
 8007188:	4614      	mov	r4, r2
 800718a:	4606      	mov	r6, r0
 800718c:	b118      	cbz	r0, 8007196 <_putc_r+0x12>
 800718e:	6a03      	ldr	r3, [r0, #32]
 8007190:	b90b      	cbnz	r3, 8007196 <_putc_r+0x12>
 8007192:	f7ff fb15 	bl	80067c0 <__sinit>
 8007196:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007198:	07d8      	lsls	r0, r3, #31
 800719a:	d405      	bmi.n	80071a8 <_putc_r+0x24>
 800719c:	89a3      	ldrh	r3, [r4, #12]
 800719e:	0599      	lsls	r1, r3, #22
 80071a0:	d402      	bmi.n	80071a8 <_putc_r+0x24>
 80071a2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80071a4:	f7fa fab2 	bl	800170c <__retarget_lock_acquire_recursive>
 80071a8:	68a3      	ldr	r3, [r4, #8]
 80071aa:	3b01      	subs	r3, #1
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	60a3      	str	r3, [r4, #8]
 80071b0:	da05      	bge.n	80071be <_putc_r+0x3a>
 80071b2:	69a2      	ldr	r2, [r4, #24]
 80071b4:	4293      	cmp	r3, r2
 80071b6:	db12      	blt.n	80071de <_putc_r+0x5a>
 80071b8:	b2eb      	uxtb	r3, r5
 80071ba:	2b0a      	cmp	r3, #10
 80071bc:	d00f      	beq.n	80071de <_putc_r+0x5a>
 80071be:	6823      	ldr	r3, [r4, #0]
 80071c0:	1c5a      	adds	r2, r3, #1
 80071c2:	6022      	str	r2, [r4, #0]
 80071c4:	701d      	strb	r5, [r3, #0]
 80071c6:	b2ed      	uxtb	r5, r5
 80071c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80071ca:	07da      	lsls	r2, r3, #31
 80071cc:	d405      	bmi.n	80071da <_putc_r+0x56>
 80071ce:	89a3      	ldrh	r3, [r4, #12]
 80071d0:	059b      	lsls	r3, r3, #22
 80071d2:	d402      	bmi.n	80071da <_putc_r+0x56>
 80071d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80071d6:	f7fa faae 	bl	8001736 <__retarget_lock_release_recursive>
 80071da:	4628      	mov	r0, r5
 80071dc:	bd70      	pop	{r4, r5, r6, pc}
 80071de:	4629      	mov	r1, r5
 80071e0:	4622      	mov	r2, r4
 80071e2:	4630      	mov	r0, r6
 80071e4:	f000 f802 	bl	80071ec <__swbuf_r>
 80071e8:	4605      	mov	r5, r0
 80071ea:	e7ed      	b.n	80071c8 <_putc_r+0x44>

080071ec <__swbuf_r>:
 80071ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ee:	460e      	mov	r6, r1
 80071f0:	4614      	mov	r4, r2
 80071f2:	4605      	mov	r5, r0
 80071f4:	b118      	cbz	r0, 80071fe <__swbuf_r+0x12>
 80071f6:	6a03      	ldr	r3, [r0, #32]
 80071f8:	b90b      	cbnz	r3, 80071fe <__swbuf_r+0x12>
 80071fa:	f7ff fae1 	bl	80067c0 <__sinit>
 80071fe:	69a3      	ldr	r3, [r4, #24]
 8007200:	60a3      	str	r3, [r4, #8]
 8007202:	89a3      	ldrh	r3, [r4, #12]
 8007204:	071a      	lsls	r2, r3, #28
 8007206:	d501      	bpl.n	800720c <__swbuf_r+0x20>
 8007208:	6923      	ldr	r3, [r4, #16]
 800720a:	b943      	cbnz	r3, 800721e <__swbuf_r+0x32>
 800720c:	4621      	mov	r1, r4
 800720e:	4628      	mov	r0, r5
 8007210:	f000 f82a 	bl	8007268 <__swsetup_r>
 8007214:	b118      	cbz	r0, 800721e <__swbuf_r+0x32>
 8007216:	f04f 37ff 	mov.w	r7, #4294967295
 800721a:	4638      	mov	r0, r7
 800721c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800721e:	6823      	ldr	r3, [r4, #0]
 8007220:	6922      	ldr	r2, [r4, #16]
 8007222:	1a98      	subs	r0, r3, r2
 8007224:	6963      	ldr	r3, [r4, #20]
 8007226:	b2f6      	uxtb	r6, r6
 8007228:	4283      	cmp	r3, r0
 800722a:	4637      	mov	r7, r6
 800722c:	dc05      	bgt.n	800723a <__swbuf_r+0x4e>
 800722e:	4621      	mov	r1, r4
 8007230:	4628      	mov	r0, r5
 8007232:	f7ff ff7f 	bl	8007134 <_fflush_r>
 8007236:	2800      	cmp	r0, #0
 8007238:	d1ed      	bne.n	8007216 <__swbuf_r+0x2a>
 800723a:	68a3      	ldr	r3, [r4, #8]
 800723c:	3b01      	subs	r3, #1
 800723e:	60a3      	str	r3, [r4, #8]
 8007240:	6823      	ldr	r3, [r4, #0]
 8007242:	1c5a      	adds	r2, r3, #1
 8007244:	6022      	str	r2, [r4, #0]
 8007246:	701e      	strb	r6, [r3, #0]
 8007248:	6962      	ldr	r2, [r4, #20]
 800724a:	1c43      	adds	r3, r0, #1
 800724c:	429a      	cmp	r2, r3
 800724e:	d004      	beq.n	800725a <__swbuf_r+0x6e>
 8007250:	89a3      	ldrh	r3, [r4, #12]
 8007252:	07db      	lsls	r3, r3, #31
 8007254:	d5e1      	bpl.n	800721a <__swbuf_r+0x2e>
 8007256:	2e0a      	cmp	r6, #10
 8007258:	d1df      	bne.n	800721a <__swbuf_r+0x2e>
 800725a:	4621      	mov	r1, r4
 800725c:	4628      	mov	r0, r5
 800725e:	f7ff ff69 	bl	8007134 <_fflush_r>
 8007262:	2800      	cmp	r0, #0
 8007264:	d0d9      	beq.n	800721a <__swbuf_r+0x2e>
 8007266:	e7d6      	b.n	8007216 <__swbuf_r+0x2a>

08007268 <__swsetup_r>:
 8007268:	b538      	push	{r3, r4, r5, lr}
 800726a:	4b29      	ldr	r3, [pc, #164]	@ (8007310 <__swsetup_r+0xa8>)
 800726c:	4605      	mov	r5, r0
 800726e:	6818      	ldr	r0, [r3, #0]
 8007270:	460c      	mov	r4, r1
 8007272:	b118      	cbz	r0, 800727c <__swsetup_r+0x14>
 8007274:	6a03      	ldr	r3, [r0, #32]
 8007276:	b90b      	cbnz	r3, 800727c <__swsetup_r+0x14>
 8007278:	f7ff faa2 	bl	80067c0 <__sinit>
 800727c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007280:	0719      	lsls	r1, r3, #28
 8007282:	d422      	bmi.n	80072ca <__swsetup_r+0x62>
 8007284:	06da      	lsls	r2, r3, #27
 8007286:	d407      	bmi.n	8007298 <__swsetup_r+0x30>
 8007288:	2209      	movs	r2, #9
 800728a:	602a      	str	r2, [r5, #0]
 800728c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007290:	81a3      	strh	r3, [r4, #12]
 8007292:	f04f 30ff 	mov.w	r0, #4294967295
 8007296:	e033      	b.n	8007300 <__swsetup_r+0x98>
 8007298:	0758      	lsls	r0, r3, #29
 800729a:	d512      	bpl.n	80072c2 <__swsetup_r+0x5a>
 800729c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800729e:	b141      	cbz	r1, 80072b2 <__swsetup_r+0x4a>
 80072a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80072a4:	4299      	cmp	r1, r3
 80072a6:	d002      	beq.n	80072ae <__swsetup_r+0x46>
 80072a8:	4628      	mov	r0, r5
 80072aa:	f7ff fba5 	bl	80069f8 <_free_r>
 80072ae:	2300      	movs	r3, #0
 80072b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80072b2:	89a3      	ldrh	r3, [r4, #12]
 80072b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80072b8:	81a3      	strh	r3, [r4, #12]
 80072ba:	2300      	movs	r3, #0
 80072bc:	6063      	str	r3, [r4, #4]
 80072be:	6923      	ldr	r3, [r4, #16]
 80072c0:	6023      	str	r3, [r4, #0]
 80072c2:	89a3      	ldrh	r3, [r4, #12]
 80072c4:	f043 0308 	orr.w	r3, r3, #8
 80072c8:	81a3      	strh	r3, [r4, #12]
 80072ca:	6923      	ldr	r3, [r4, #16]
 80072cc:	b94b      	cbnz	r3, 80072e2 <__swsetup_r+0x7a>
 80072ce:	89a3      	ldrh	r3, [r4, #12]
 80072d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80072d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072d8:	d003      	beq.n	80072e2 <__swsetup_r+0x7a>
 80072da:	4621      	mov	r1, r4
 80072dc:	4628      	mov	r0, r5
 80072de:	f000 f83f 	bl	8007360 <__smakebuf_r>
 80072e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072e6:	f013 0201 	ands.w	r2, r3, #1
 80072ea:	d00a      	beq.n	8007302 <__swsetup_r+0x9a>
 80072ec:	2200      	movs	r2, #0
 80072ee:	60a2      	str	r2, [r4, #8]
 80072f0:	6962      	ldr	r2, [r4, #20]
 80072f2:	4252      	negs	r2, r2
 80072f4:	61a2      	str	r2, [r4, #24]
 80072f6:	6922      	ldr	r2, [r4, #16]
 80072f8:	b942      	cbnz	r2, 800730c <__swsetup_r+0xa4>
 80072fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80072fe:	d1c5      	bne.n	800728c <__swsetup_r+0x24>
 8007300:	bd38      	pop	{r3, r4, r5, pc}
 8007302:	0799      	lsls	r1, r3, #30
 8007304:	bf58      	it	pl
 8007306:	6962      	ldrpl	r2, [r4, #20]
 8007308:	60a2      	str	r2, [r4, #8]
 800730a:	e7f4      	b.n	80072f6 <__swsetup_r+0x8e>
 800730c:	2000      	movs	r0, #0
 800730e:	e7f7      	b.n	8007300 <__swsetup_r+0x98>
 8007310:	20000018 	.word	0x20000018

08007314 <__swhatbuf_r>:
 8007314:	b570      	push	{r4, r5, r6, lr}
 8007316:	460c      	mov	r4, r1
 8007318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800731c:	2900      	cmp	r1, #0
 800731e:	b096      	sub	sp, #88	@ 0x58
 8007320:	4615      	mov	r5, r2
 8007322:	461e      	mov	r6, r3
 8007324:	da0d      	bge.n	8007342 <__swhatbuf_r+0x2e>
 8007326:	89a3      	ldrh	r3, [r4, #12]
 8007328:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800732c:	f04f 0100 	mov.w	r1, #0
 8007330:	bf14      	ite	ne
 8007332:	2340      	movne	r3, #64	@ 0x40
 8007334:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007338:	2000      	movs	r0, #0
 800733a:	6031      	str	r1, [r6, #0]
 800733c:	602b      	str	r3, [r5, #0]
 800733e:	b016      	add	sp, #88	@ 0x58
 8007340:	bd70      	pop	{r4, r5, r6, pc}
 8007342:	466a      	mov	r2, sp
 8007344:	f000 f848 	bl	80073d8 <_fstat_r>
 8007348:	2800      	cmp	r0, #0
 800734a:	dbec      	blt.n	8007326 <__swhatbuf_r+0x12>
 800734c:	9901      	ldr	r1, [sp, #4]
 800734e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007352:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007356:	4259      	negs	r1, r3
 8007358:	4159      	adcs	r1, r3
 800735a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800735e:	e7eb      	b.n	8007338 <__swhatbuf_r+0x24>

08007360 <__smakebuf_r>:
 8007360:	898b      	ldrh	r3, [r1, #12]
 8007362:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007364:	079d      	lsls	r5, r3, #30
 8007366:	4606      	mov	r6, r0
 8007368:	460c      	mov	r4, r1
 800736a:	d507      	bpl.n	800737c <__smakebuf_r+0x1c>
 800736c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007370:	6023      	str	r3, [r4, #0]
 8007372:	6123      	str	r3, [r4, #16]
 8007374:	2301      	movs	r3, #1
 8007376:	6163      	str	r3, [r4, #20]
 8007378:	b003      	add	sp, #12
 800737a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800737c:	ab01      	add	r3, sp, #4
 800737e:	466a      	mov	r2, sp
 8007380:	f7ff ffc8 	bl	8007314 <__swhatbuf_r>
 8007384:	9f00      	ldr	r7, [sp, #0]
 8007386:	4605      	mov	r5, r0
 8007388:	4639      	mov	r1, r7
 800738a:	4630      	mov	r0, r6
 800738c:	f7ff f900 	bl	8006590 <_malloc_r>
 8007390:	b948      	cbnz	r0, 80073a6 <__smakebuf_r+0x46>
 8007392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007396:	059a      	lsls	r2, r3, #22
 8007398:	d4ee      	bmi.n	8007378 <__smakebuf_r+0x18>
 800739a:	f023 0303 	bic.w	r3, r3, #3
 800739e:	f043 0302 	orr.w	r3, r3, #2
 80073a2:	81a3      	strh	r3, [r4, #12]
 80073a4:	e7e2      	b.n	800736c <__smakebuf_r+0xc>
 80073a6:	89a3      	ldrh	r3, [r4, #12]
 80073a8:	6020      	str	r0, [r4, #0]
 80073aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073ae:	81a3      	strh	r3, [r4, #12]
 80073b0:	9b01      	ldr	r3, [sp, #4]
 80073b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80073b6:	b15b      	cbz	r3, 80073d0 <__smakebuf_r+0x70>
 80073b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073bc:	4630      	mov	r0, r6
 80073be:	f000 f81d 	bl	80073fc <_isatty_r>
 80073c2:	b128      	cbz	r0, 80073d0 <__smakebuf_r+0x70>
 80073c4:	89a3      	ldrh	r3, [r4, #12]
 80073c6:	f023 0303 	bic.w	r3, r3, #3
 80073ca:	f043 0301 	orr.w	r3, r3, #1
 80073ce:	81a3      	strh	r3, [r4, #12]
 80073d0:	89a3      	ldrh	r3, [r4, #12]
 80073d2:	431d      	orrs	r5, r3
 80073d4:	81a5      	strh	r5, [r4, #12]
 80073d6:	e7cf      	b.n	8007378 <__smakebuf_r+0x18>

080073d8 <_fstat_r>:
 80073d8:	b538      	push	{r3, r4, r5, lr}
 80073da:	4d07      	ldr	r5, [pc, #28]	@ (80073f8 <_fstat_r+0x20>)
 80073dc:	2300      	movs	r3, #0
 80073de:	4604      	mov	r4, r0
 80073e0:	4608      	mov	r0, r1
 80073e2:	4611      	mov	r1, r2
 80073e4:	602b      	str	r3, [r5, #0]
 80073e6:	f7f9 fe5c 	bl	80010a2 <_fstat>
 80073ea:	1c43      	adds	r3, r0, #1
 80073ec:	d102      	bne.n	80073f4 <_fstat_r+0x1c>
 80073ee:	682b      	ldr	r3, [r5, #0]
 80073f0:	b103      	cbz	r3, 80073f4 <_fstat_r+0x1c>
 80073f2:	6023      	str	r3, [r4, #0]
 80073f4:	bd38      	pop	{r3, r4, r5, pc}
 80073f6:	bf00      	nop
 80073f8:	200006a4 	.word	0x200006a4

080073fc <_isatty_r>:
 80073fc:	b538      	push	{r3, r4, r5, lr}
 80073fe:	4d06      	ldr	r5, [pc, #24]	@ (8007418 <_isatty_r+0x1c>)
 8007400:	2300      	movs	r3, #0
 8007402:	4604      	mov	r4, r0
 8007404:	4608      	mov	r0, r1
 8007406:	602b      	str	r3, [r5, #0]
 8007408:	f7f9 fe5b 	bl	80010c2 <_isatty>
 800740c:	1c43      	adds	r3, r0, #1
 800740e:	d102      	bne.n	8007416 <_isatty_r+0x1a>
 8007410:	682b      	ldr	r3, [r5, #0]
 8007412:	b103      	cbz	r3, 8007416 <_isatty_r+0x1a>
 8007414:	6023      	str	r3, [r4, #0]
 8007416:	bd38      	pop	{r3, r4, r5, pc}
 8007418:	200006a4 	.word	0x200006a4

0800741c <_init>:
 800741c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800741e:	bf00      	nop
 8007420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007422:	bc08      	pop	{r3}
 8007424:	469e      	mov	lr, r3
 8007426:	4770      	bx	lr

08007428 <_fini>:
 8007428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800742a:	bf00      	nop
 800742c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800742e:	bc08      	pop	{r3}
 8007430:	469e      	mov	lr, r3
 8007432:	4770      	bx	lr
