
Copyrat_IEEE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007114  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080072a4  080072a4  000082a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800737c  0800737c  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  0800737c  0800737c  0000837c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007384  08007384  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007384  08007384  00008384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007388  08007388  00008388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800738c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009068  2**0
                  CONTENTS
 10 .bss          00000640  20000068  20000068  00009068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200006a8  200006a8  00009068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a92b  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004485  00000000  00000000  000239c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001810  00000000  00000000  00027e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012e6  00000000  00000000  00029658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024acf  00000000  00000000  0002a93e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002074b  00000000  00000000  0004f40d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dcf01  00000000  00000000  0006fb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014ca59  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006a54  00000000  00000000  0014ca9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  001534f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800728c 	.word	0x0800728c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800728c 	.word	0x0800728c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000566:	463b      	mov	r3, r7
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000572:	4b3d      	ldr	r3, [pc, #244]	@ (8000668 <MX_ADC1_Init+0x108>)
 8000574:	4a3d      	ldr	r2, [pc, #244]	@ (800066c <MX_ADC1_Init+0x10c>)
 8000576:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000578:	4b3b      	ldr	r3, [pc, #236]	@ (8000668 <MX_ADC1_Init+0x108>)
 800057a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800057e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000580:	4b39      	ldr	r3, [pc, #228]	@ (8000668 <MX_ADC1_Init+0x108>)
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000586:	4b38      	ldr	r3, [pc, #224]	@ (8000668 <MX_ADC1_Init+0x108>)
 8000588:	2201      	movs	r2, #1
 800058a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800058c:	4b36      	ldr	r3, [pc, #216]	@ (8000668 <MX_ADC1_Init+0x108>)
 800058e:	2201      	movs	r2, #1
 8000590:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000592:	4b35      	ldr	r3, [pc, #212]	@ (8000668 <MX_ADC1_Init+0x108>)
 8000594:	2200      	movs	r2, #0
 8000596:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800059a:	4b33      	ldr	r3, [pc, #204]	@ (8000668 <MX_ADC1_Init+0x108>)
 800059c:	2200      	movs	r2, #0
 800059e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005a0:	4b31      	ldr	r3, [pc, #196]	@ (8000668 <MX_ADC1_Init+0x108>)
 80005a2:	4a33      	ldr	r2, [pc, #204]	@ (8000670 <MX_ADC1_Init+0x110>)
 80005a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005a6:	4b30      	ldr	r3, [pc, #192]	@ (8000668 <MX_ADC1_Init+0x108>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80005ac:	4b2e      	ldr	r3, [pc, #184]	@ (8000668 <MX_ADC1_Init+0x108>)
 80005ae:	2205      	movs	r2, #5
 80005b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005b2:	4b2d      	ldr	r3, [pc, #180]	@ (8000668 <MX_ADC1_Init+0x108>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ba:	4b2b      	ldr	r3, [pc, #172]	@ (8000668 <MX_ADC1_Init+0x108>)
 80005bc:	2201      	movs	r2, #1
 80005be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005c0:	4829      	ldr	r0, [pc, #164]	@ (8000668 <MX_ADC1_Init+0x108>)
 80005c2:	f001 ff7b 	bl	80024bc <HAL_ADC_Init>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005cc:	f000 fc94 	bl	8000ef8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005d4:	2301      	movs	r3, #1
 80005d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005dc:	463b      	mov	r3, r7
 80005de:	4619      	mov	r1, r3
 80005e0:	4821      	ldr	r0, [pc, #132]	@ (8000668 <MX_ADC1_Init+0x108>)
 80005e2:	f001 ffaf 	bl	8002544 <HAL_ADC_ConfigChannel>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005ec:	f000 fc84 	bl	8000ef8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005f0:	2301      	movs	r3, #1
 80005f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f8:	463b      	mov	r3, r7
 80005fa:	4619      	mov	r1, r3
 80005fc:	481a      	ldr	r0, [pc, #104]	@ (8000668 <MX_ADC1_Init+0x108>)
 80005fe:	f001 ffa1 	bl	8002544 <HAL_ADC_ConfigChannel>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000608:	f000 fc76 	bl	8000ef8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800060c:	2304      	movs	r3, #4
 800060e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000610:	2303      	movs	r3, #3
 8000612:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000614:	463b      	mov	r3, r7
 8000616:	4619      	mov	r1, r3
 8000618:	4813      	ldr	r0, [pc, #76]	@ (8000668 <MX_ADC1_Init+0x108>)
 800061a:	f001 ff93 	bl	8002544 <HAL_ADC_ConfigChannel>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000624:	f000 fc68 	bl	8000ef8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000628:	2305      	movs	r3, #5
 800062a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800062c:	2304      	movs	r3, #4
 800062e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000630:	463b      	mov	r3, r7
 8000632:	4619      	mov	r1, r3
 8000634:	480c      	ldr	r0, [pc, #48]	@ (8000668 <MX_ADC1_Init+0x108>)
 8000636:	f001 ff85 	bl	8002544 <HAL_ADC_ConfigChannel>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000640:	f000 fc5a 	bl	8000ef8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000644:	2307      	movs	r3, #7
 8000646:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000648:	2305      	movs	r3, #5
 800064a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800064c:	463b      	mov	r3, r7
 800064e:	4619      	mov	r1, r3
 8000650:	4805      	ldr	r0, [pc, #20]	@ (8000668 <MX_ADC1_Init+0x108>)
 8000652:	f001 ff77 	bl	8002544 <HAL_ADC_ConfigChannel>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800065c:	f000 fc4c 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000660:	bf00      	nop
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000084 	.word	0x20000084
 800066c:	40012000 	.word	0x40012000
 8000670:	0f000001 	.word	0x0f000001

08000674 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08a      	sub	sp, #40	@ 0x28
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a2f      	ldr	r2, [pc, #188]	@ (8000750 <HAL_ADC_MspInit+0xdc>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d157      	bne.n	8000746 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	613b      	str	r3, [r7, #16]
 800069a:	4b2e      	ldr	r3, [pc, #184]	@ (8000754 <HAL_ADC_MspInit+0xe0>)
 800069c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800069e:	4a2d      	ldr	r2, [pc, #180]	@ (8000754 <HAL_ADC_MspInit+0xe0>)
 80006a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80006a6:	4b2b      	ldr	r3, [pc, #172]	@ (8000754 <HAL_ADC_MspInit+0xe0>)
 80006a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006ae:	613b      	str	r3, [r7, #16]
 80006b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	4b27      	ldr	r3, [pc, #156]	@ (8000754 <HAL_ADC_MspInit+0xe0>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	4a26      	ldr	r2, [pc, #152]	@ (8000754 <HAL_ADC_MspInit+0xe0>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c2:	4b24      	ldr	r3, [pc, #144]	@ (8000754 <HAL_ADC_MspInit+0xe0>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80006ce:	23b3      	movs	r3, #179	@ 0xb3
 80006d0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d2:	2303      	movs	r3, #3
 80006d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4619      	mov	r1, r3
 80006e0:	481d      	ldr	r0, [pc, #116]	@ (8000758 <HAL_ADC_MspInit+0xe4>)
 80006e2:	f002 fd19 	bl	8003118 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80006e6:	4b1d      	ldr	r3, [pc, #116]	@ (800075c <HAL_ADC_MspInit+0xe8>)
 80006e8:	4a1d      	ldr	r2, [pc, #116]	@ (8000760 <HAL_ADC_MspInit+0xec>)
 80006ea:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006ec:	4b1b      	ldr	r3, [pc, #108]	@ (800075c <HAL_ADC_MspInit+0xe8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006f2:	4b1a      	ldr	r3, [pc, #104]	@ (800075c <HAL_ADC_MspInit+0xe8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006f8:	4b18      	ldr	r3, [pc, #96]	@ (800075c <HAL_ADC_MspInit+0xe8>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006fe:	4b17      	ldr	r3, [pc, #92]	@ (800075c <HAL_ADC_MspInit+0xe8>)
 8000700:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000704:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000706:	4b15      	ldr	r3, [pc, #84]	@ (800075c <HAL_ADC_MspInit+0xe8>)
 8000708:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800070c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800070e:	4b13      	ldr	r3, [pc, #76]	@ (800075c <HAL_ADC_MspInit+0xe8>)
 8000710:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000714:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000716:	4b11      	ldr	r3, [pc, #68]	@ (800075c <HAL_ADC_MspInit+0xe8>)
 8000718:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800071c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800071e:	4b0f      	ldr	r3, [pc, #60]	@ (800075c <HAL_ADC_MspInit+0xe8>)
 8000720:	2200      	movs	r2, #0
 8000722:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000724:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <HAL_ADC_MspInit+0xe8>)
 8000726:	2200      	movs	r2, #0
 8000728:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800072a:	480c      	ldr	r0, [pc, #48]	@ (800075c <HAL_ADC_MspInit+0xe8>)
 800072c:	f002 fa0a 	bl	8002b44 <HAL_DMA_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000736:	f000 fbdf 	bl	8000ef8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4a07      	ldr	r2, [pc, #28]	@ (800075c <HAL_ADC_MspInit+0xe8>)
 800073e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000740:	4a06      	ldr	r2, [pc, #24]	@ (800075c <HAL_ADC_MspInit+0xe8>)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000746:	bf00      	nop
 8000748:	3728      	adds	r7, #40	@ 0x28
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40012000 	.word	0x40012000
 8000754:	40023800 	.word	0x40023800
 8000758:	40020000 	.word	0x40020000
 800075c:	200000cc 	.word	0x200000cc
 8000760:	40026410 	.word	0x40026410

08000764 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <MX_DMA_Init+0x3c>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a0b      	ldr	r2, [pc, #44]	@ (80007a0 <MX_DMA_Init+0x3c>)
 8000774:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_DMA_Init+0x3c>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	2105      	movs	r1, #5
 800078a:	2038      	movs	r0, #56	@ 0x38
 800078c:	f002 f9b0 	bl	8002af0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000790:	2038      	movs	r0, #56	@ 0x38
 8000792:	f002 f9c9 	bl	8002b28 <HAL_NVIC_EnableIRQ>

}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800

080007a4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	@ 0x28
 80007a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
 80007be:	4b58      	ldr	r3, [pc, #352]	@ (8000920 <MX_GPIO_Init+0x17c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	4a57      	ldr	r2, [pc, #348]	@ (8000920 <MX_GPIO_Init+0x17c>)
 80007c4:	f043 0304 	orr.w	r3, r3, #4
 80007c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ca:	4b55      	ldr	r3, [pc, #340]	@ (8000920 <MX_GPIO_Init+0x17c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	f003 0304 	and.w	r3, r3, #4
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	4b51      	ldr	r3, [pc, #324]	@ (8000920 <MX_GPIO_Init+0x17c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	4a50      	ldr	r2, [pc, #320]	@ (8000920 <MX_GPIO_Init+0x17c>)
 80007e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e6:	4b4e      	ldr	r3, [pc, #312]	@ (8000920 <MX_GPIO_Init+0x17c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	4b4a      	ldr	r3, [pc, #296]	@ (8000920 <MX_GPIO_Init+0x17c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	4a49      	ldr	r2, [pc, #292]	@ (8000920 <MX_GPIO_Init+0x17c>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6313      	str	r3, [r2, #48]	@ 0x30
 8000802:	4b47      	ldr	r3, [pc, #284]	@ (8000920 <MX_GPIO_Init+0x17c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b43      	ldr	r3, [pc, #268]	@ (8000920 <MX_GPIO_Init+0x17c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a42      	ldr	r2, [pc, #264]	@ (8000920 <MX_GPIO_Init+0x17c>)
 8000818:	f043 0302 	orr.w	r3, r3, #2
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b40      	ldr	r3, [pc, #256]	@ (8000920 <MX_GPIO_Init+0x17c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0302 	and.w	r3, r3, #2
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	4b3c      	ldr	r3, [pc, #240]	@ (8000920 <MX_GPIO_Init+0x17c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a3b      	ldr	r2, [pc, #236]	@ (8000920 <MX_GPIO_Init+0x17c>)
 8000834:	f043 0308 	orr.w	r3, r3, #8
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b39      	ldr	r3, [pc, #228]	@ (8000920 <MX_GPIO_Init+0x17c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0308 	and.w	r3, r3, #8
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV8833_EN_GPIO_Port, DRV8833_EN_Pin, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2104      	movs	r1, #4
 800084a:	4836      	ldr	r0, [pc, #216]	@ (8000924 <MX_GPIO_Init+0x180>)
 800084c:	f002 fe00 	bl	8003450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_Pin|MPU6500_CS_Pin, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8000856:	4834      	ldr	r0, [pc, #208]	@ (8000928 <MX_GPIO_Init+0x184>)
 8000858:	f002 fdfa 	bl	8003450 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC4 PC5 PC8
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 800085c:	f643 533f 	movw	r3, #15679	@ 0x3d3f
 8000860:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000862:	2303      	movs	r3, #3
 8000864:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	4619      	mov	r1, r3
 8000870:	482e      	ldr	r0, [pc, #184]	@ (800092c <MX_GPIO_Init+0x188>)
 8000872:	f002 fc51 	bl	8003118 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRV8833_EN_Pin;
 8000876:	2304      	movs	r3, #4
 8000878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087a:	2301      	movs	r3, #1
 800087c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000882:	2302      	movs	r3, #2
 8000884:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV8833_EN_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	4619      	mov	r1, r3
 800088c:	4825      	ldr	r0, [pc, #148]	@ (8000924 <MX_GPIO_Init+0x180>)
 800088e:	f002 fc43 	bl	8003118 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000892:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000898:	2303      	movs	r3, #3
 800089a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	4619      	mov	r1, r3
 80008a6:	481f      	ldr	r0, [pc, #124]	@ (8000924 <MX_GPIO_Init+0x180>)
 80008a8:	f002 fc36 	bl	8003118 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_15;
 80008ac:	f44f 4302 	mov.w	r3, #33280	@ 0x8200
 80008b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008b2:	2303      	movs	r3, #3
 80008b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	4619      	mov	r1, r3
 80008c0:	4819      	ldr	r0, [pc, #100]	@ (8000928 <MX_GPIO_Init+0x184>)
 80008c2:	f002 fc29 	bl	8003118 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|MPU6500_CS_Pin;
 80008c6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80008ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008cc:	2301      	movs	r3, #1
 80008ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	4619      	mov	r1, r3
 80008de:	4812      	ldr	r0, [pc, #72]	@ (8000928 <MX_GPIO_Init+0x184>)
 80008e0:	f002 fc1a 	bl	8003118 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DEBUG_BTN_Pin;
 80008e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DEBUG_BTN_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	480b      	ldr	r0, [pc, #44]	@ (8000928 <MX_GPIO_Init+0x184>)
 80008fa:	f002 fc0d 	bl	8003118 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008fe:	2304      	movs	r3, #4
 8000900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000902:	2303      	movs	r3, #3
 8000904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	4807      	ldr	r0, [pc, #28]	@ (8000930 <MX_GPIO_Init+0x18c>)
 8000912:	f002 fc01 	bl	8003118 <HAL_GPIO_Init>

}
 8000916:	bf00      	nop
 8000918:	3728      	adds	r7, #40	@ 0x28
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800
 8000924:	40020400 	.word	0x40020400
 8000928:	40020000 	.word	0x40020000
 800092c:	40020800 	.word	0x40020800
 8000930:	40020c00 	.word	0x40020c00

08000934 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000938:	4b12      	ldr	r3, [pc, #72]	@ (8000984 <MX_I2C1_Init+0x50>)
 800093a:	4a13      	ldr	r2, [pc, #76]	@ (8000988 <MX_I2C1_Init+0x54>)
 800093c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800093e:	4b11      	ldr	r3, [pc, #68]	@ (8000984 <MX_I2C1_Init+0x50>)
 8000940:	4a12      	ldr	r2, [pc, #72]	@ (800098c <MX_I2C1_Init+0x58>)
 8000942:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000944:	4b0f      	ldr	r3, [pc, #60]	@ (8000984 <MX_I2C1_Init+0x50>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800094a:	4b0e      	ldr	r3, [pc, #56]	@ (8000984 <MX_I2C1_Init+0x50>)
 800094c:	2200      	movs	r2, #0
 800094e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000950:	4b0c      	ldr	r3, [pc, #48]	@ (8000984 <MX_I2C1_Init+0x50>)
 8000952:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000956:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000958:	4b0a      	ldr	r3, [pc, #40]	@ (8000984 <MX_I2C1_Init+0x50>)
 800095a:	2200      	movs	r2, #0
 800095c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800095e:	4b09      	ldr	r3, [pc, #36]	@ (8000984 <MX_I2C1_Init+0x50>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000964:	4b07      	ldr	r3, [pc, #28]	@ (8000984 <MX_I2C1_Init+0x50>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800096a:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <MX_I2C1_Init+0x50>)
 800096c:	2200      	movs	r2, #0
 800096e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000970:	4804      	ldr	r0, [pc, #16]	@ (8000984 <MX_I2C1_Init+0x50>)
 8000972:	f002 fd87 	bl	8003484 <HAL_I2C_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800097c:	f000 fabc 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	2000012c 	.word	0x2000012c
 8000988:	40005400 	.word	0x40005400
 800098c:	000186a0 	.word	0x000186a0

08000990 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000994:	4b12      	ldr	r3, [pc, #72]	@ (80009e0 <MX_I2C2_Init+0x50>)
 8000996:	4a13      	ldr	r2, [pc, #76]	@ (80009e4 <MX_I2C2_Init+0x54>)
 8000998:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800099a:	4b11      	ldr	r3, [pc, #68]	@ (80009e0 <MX_I2C2_Init+0x50>)
 800099c:	4a12      	ldr	r2, [pc, #72]	@ (80009e8 <MX_I2C2_Init+0x58>)
 800099e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	@ (80009e0 <MX_I2C2_Init+0x50>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	@ (80009e0 <MX_I2C2_Init+0x50>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	@ (80009e0 <MX_I2C2_Init+0x50>)
 80009ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009b2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009b4:	4b0a      	ldr	r3, [pc, #40]	@ (80009e0 <MX_I2C2_Init+0x50>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80009ba:	4b09      	ldr	r3, [pc, #36]	@ (80009e0 <MX_I2C2_Init+0x50>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009c0:	4b07      	ldr	r3, [pc, #28]	@ (80009e0 <MX_I2C2_Init+0x50>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009c6:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <MX_I2C2_Init+0x50>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009cc:	4804      	ldr	r0, [pc, #16]	@ (80009e0 <MX_I2C2_Init+0x50>)
 80009ce:	f002 fd59 	bl	8003484 <HAL_I2C_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80009d8:	f000 fa8e 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000180 	.word	0x20000180
 80009e4:	40005800 	.word	0x40005800
 80009e8:	000186a0 	.word	0x000186a0

080009ec <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80009f0:	4b12      	ldr	r3, [pc, #72]	@ (8000a3c <MX_I2C3_Init+0x50>)
 80009f2:	4a13      	ldr	r2, [pc, #76]	@ (8000a40 <MX_I2C3_Init+0x54>)
 80009f4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80009f6:	4b11      	ldr	r3, [pc, #68]	@ (8000a3c <MX_I2C3_Init+0x50>)
 80009f8:	4a12      	ldr	r2, [pc, #72]	@ (8000a44 <MX_I2C3_Init+0x58>)
 80009fa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a3c <MX_I2C3_Init+0x50>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	@ (8000a3c <MX_I2C3_Init+0x50>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	@ (8000a3c <MX_I2C3_Init+0x50>)
 8000a0a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a0e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a10:	4b0a      	ldr	r3, [pc, #40]	@ (8000a3c <MX_I2C3_Init+0x50>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000a16:	4b09      	ldr	r3, [pc, #36]	@ (8000a3c <MX_I2C3_Init+0x50>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a1c:	4b07      	ldr	r3, [pc, #28]	@ (8000a3c <MX_I2C3_Init+0x50>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a22:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <MX_I2C3_Init+0x50>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a28:	4804      	ldr	r0, [pc, #16]	@ (8000a3c <MX_I2C3_Init+0x50>)
 8000a2a:	f002 fd2b 	bl	8003484 <HAL_I2C_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000a34:	f000 fa60 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	200001d4 	.word	0x200001d4
 8000a40:	40005c00 	.word	0x40005c00
 8000a44:	000186a0 	.word	0x000186a0

08000a48 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08e      	sub	sp, #56	@ 0x38
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a5b      	ldr	r2, [pc, #364]	@ (8000bd4 <HAL_I2C_MspInit+0x18c>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d12c      	bne.n	8000ac4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	623b      	str	r3, [r7, #32]
 8000a6e:	4b5a      	ldr	r3, [pc, #360]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	4a59      	ldr	r2, [pc, #356]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000a74:	f043 0302 	orr.w	r3, r3, #2
 8000a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7a:	4b57      	ldr	r3, [pc, #348]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	f003 0302 	and.w	r3, r3, #2
 8000a82:	623b      	str	r3, [r7, #32]
 8000a84:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a86:	23c0      	movs	r3, #192	@ 0xc0
 8000a88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a8a:	2312      	movs	r3, #18
 8000a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a92:	2303      	movs	r3, #3
 8000a94:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a96:	2304      	movs	r3, #4
 8000a98:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	484e      	ldr	r0, [pc, #312]	@ (8000bdc <HAL_I2C_MspInit+0x194>)
 8000aa2:	f002 fb39 	bl	8003118 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
 8000aaa:	4b4b      	ldr	r3, [pc, #300]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aae:	4a4a      	ldr	r2, [pc, #296]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000ab0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ab4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ab6:	4b48      	ldr	r3, [pc, #288]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000abe:	61fb      	str	r3, [r7, #28]
 8000ac0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000ac2:	e083      	b.n	8000bcc <HAL_I2C_MspInit+0x184>
  else if(i2cHandle->Instance==I2C2)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a45      	ldr	r2, [pc, #276]	@ (8000be0 <HAL_I2C_MspInit+0x198>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d12d      	bne.n	8000b2a <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61bb      	str	r3, [r7, #24]
 8000ad2:	4b41      	ldr	r3, [pc, #260]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	4a40      	ldr	r2, [pc, #256]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000ad8:	f043 0302 	orr.w	r3, r3, #2
 8000adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ade:	4b3e      	ldr	r3, [pc, #248]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	f003 0302 	and.w	r3, r3, #2
 8000ae6:	61bb      	str	r3, [r7, #24]
 8000ae8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000aea:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000aee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000af0:	2312      	movs	r3, #18
 8000af2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af8:	2303      	movs	r3, #3
 8000afa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000afc:	2304      	movs	r3, #4
 8000afe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b04:	4619      	mov	r1, r3
 8000b06:	4835      	ldr	r0, [pc, #212]	@ (8000bdc <HAL_I2C_MspInit+0x194>)
 8000b08:	f002 fb06 	bl	8003118 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	4b31      	ldr	r3, [pc, #196]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b14:	4a30      	ldr	r2, [pc, #192]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000b16:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b1c:	4b2e      	ldr	r3, [pc, #184]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b24:	617b      	str	r3, [r7, #20]
 8000b26:	697b      	ldr	r3, [r7, #20]
}
 8000b28:	e050      	b.n	8000bcc <HAL_I2C_MspInit+0x184>
  else if(i2cHandle->Instance==I2C3)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a2d      	ldr	r2, [pc, #180]	@ (8000be4 <HAL_I2C_MspInit+0x19c>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d14b      	bne.n	8000bcc <HAL_I2C_MspInit+0x184>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b34:	2300      	movs	r3, #0
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	4b27      	ldr	r3, [pc, #156]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3c:	4a26      	ldr	r2, [pc, #152]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000b3e:	f043 0304 	orr.w	r3, r3, #4
 8000b42:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b44:	4b24      	ldr	r3, [pc, #144]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b48:	f003 0304 	and.w	r3, r3, #4
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	4b20      	ldr	r3, [pc, #128]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b58:	4a1f      	ldr	r2, [pc, #124]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000b5a:	f043 0301 	orr.w	r3, r3, #1
 8000b5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b60:	4b1d      	ldr	r3, [pc, #116]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b64:	f003 0301 	and.w	r3, r3, #1
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b72:	2312      	movs	r3, #18
 8000b74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b7e:	2304      	movs	r3, #4
 8000b80:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b86:	4619      	mov	r1, r3
 8000b88:	4817      	ldr	r0, [pc, #92]	@ (8000be8 <HAL_I2C_MspInit+0x1a0>)
 8000b8a:	f002 fac5 	bl	8003118 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b94:	2312      	movs	r3, #18
 8000b96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ba0:	2304      	movs	r3, #4
 8000ba2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4810      	ldr	r0, [pc, #64]	@ (8000bec <HAL_I2C_MspInit+0x1a4>)
 8000bac:	f002 fab4 	bl	8003118 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	4b08      	ldr	r3, [pc, #32]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb8:	4a07      	ldr	r2, [pc, #28]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000bba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000bbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bc0:	4b05      	ldr	r3, [pc, #20]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	68bb      	ldr	r3, [r7, #8]
}
 8000bcc:	bf00      	nop
 8000bce:	3738      	adds	r7, #56	@ 0x38
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40005400 	.word	0x40005400
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40020400 	.word	0x40020400
 8000be0:	40005800 	.word	0x40005800
 8000be4:	40005c00 	.word	0x40005c00
 8000be8:	40020800 	.word	0x40020800
 8000bec:	40020000 	.word	0x40020000

08000bf0 <rotate_left.2>:

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int16_t AccData[3] = {0,0,0} ;
  int16_t GyroData[3] = {0,0,0};
  void rotate_left(uint8_t speed){
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
 8000bfa:	f8c7 c000 	str.w	ip, [r7]
      set_duty_cycle(MOTOR_L, BACKWARD, speed);
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	461a      	mov	r2, r3
 8000c02:	2100      	movs	r1, #0
 8000c04:	2000      	movs	r0, #0
 8000c06:	f001 f847 	bl	8001c98 <set_duty_cycle>
      set_duty_cycle(MOTOR_R, FORWARD, speed);
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	2101      	movs	r1, #1
 8000c10:	2001      	movs	r0, #1
 8000c12:	f001 f841 	bl	8001c98 <set_duty_cycle>
  }
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <main>:
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b086      	sub	sp, #24
 8000c22:	af00      	add	r7, sp, #0
int main(void)
 8000c24:	f107 0320 	add.w	r3, r7, #32
 8000c28:	617b      	str	r3, [r7, #20]
  HAL_Init();
 8000c2a:	f001 fbe1 	bl	80023f0 <HAL_Init>
  SystemClock_Config();
 8000c2e:	f000 f8e7 	bl	8000e00 <SystemClock_Config>
  MX_GPIO_Init();
 8000c32:	f7ff fdb7 	bl	80007a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c36:	f7ff fd95 	bl	8000764 <MX_DMA_Init>
  MX_ADC1_Init();
 8000c3a:	f7ff fc91 	bl	8000560 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000c3e:	f7ff fe79 	bl	8000934 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000c42:	f7ff fea5 	bl	8000990 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000c46:	f7ff fed1 	bl	80009ec <MX_I2C3_Init>
  MX_SPI1_Init();
 8000c4a:	f000 f95b 	bl	8000f04 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000c4e:	f000 fb61 	bl	8001314 <MX_TIM3_Init>
  MX_TIM10_Init();
 8000c52:	f000 fbf9 	bl	8001448 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000c56:	f000 fc45 	bl	80014e4 <MX_TIM11_Init>
  MX_TIM12_Init();
 8000c5a:	f000 fc91 	bl	8001580 <MX_TIM12_Init>
  MX_TIM13_Init();
 8000c5e:	f000 fcdf 	bl	8001620 <MX_TIM13_Init>
  MX_USART2_UART_Init();
 8000c62:	f000 fead 	bl	80019c0 <MX_USART2_UART_Init>
  mpu6500_init();
 8000c66:	f001 f9c1 	bl	8001fec <mpu6500_init>
  int16_t AccData[3] = {0,0,0} ;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	80bb      	strh	r3, [r7, #4]
 8000c6e:	2300      	movs	r3, #0
 8000c70:	80fb      	strh	r3, [r7, #6]
 8000c72:	2300      	movs	r3, #0
 8000c74:	813b      	strh	r3, [r7, #8]
  int16_t GyroData[3] = {0,0,0};
 8000c76:	2300      	movs	r3, #0
 8000c78:	81bb      	strh	r3, [r7, #12]
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	81fb      	strh	r3, [r7, #14]
 8000c7e:	2300      	movs	r3, #0
 8000c80:	823b      	strh	r3, [r7, #16]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	mpu6500_get_data(AccData, GyroData);
 8000c82:	f107 020c 	add.w	r2, r7, #12
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	4611      	mov	r1, r2
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f001 fa38 	bl	8002100 <mpu6500_get_data>
	testGyroWithCircle(100);
 8000c90:	f107 030c 	add.w	r3, r7, #12
 8000c94:	469c      	mov	ip, r3
 8000c96:	2064      	movs	r0, #100	@ 0x64
 8000c98:	f000 f82c 	bl	8000cf4 <testGyroWithCircle.0>
	mpu6500_get_data(AccData, GyroData);
 8000c9c:	bf00      	nop
 8000c9e:	e7f0      	b.n	8000c82 <main+0x64>

08000ca0 <rotate_right.1>:
  void rotate_right(uint8_t speed) {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
 8000caa:	f8c7 c000 	str.w	ip, [r7]
      set_duty_cycle(MOTOR_L, FORWARD, speed);  // Left wheel moves forward
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	f000 ffef 	bl	8001c98 <set_duty_cycle>
      set_duty_cycle(MOTOR_R, BACKWARD, speed); // Right wheel moves backward
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	f000 ffe9 	bl	8001c98 <set_duty_cycle>
  }
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <stop_micromouse.3>:
  void stop_micromouse() {
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	f8c7 c004 	str.w	ip, [r7, #4]
      set_duty_cycle(MOTOR_L, STOP, 0);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2102      	movs	r1, #2
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f000 ffdb 	bl	8001c98 <set_duty_cycle>
      set_duty_cycle(MOTOR_R, STOP, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2102      	movs	r1, #2
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f000 ffd6 	bl	8001c98 <set_duty_cycle>
  }
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <testGyroWithCircle.0>:
  void testGyroWithCircle(uint8_t speed_input) {
 8000cf4:	b590      	push	{r4, r7, lr}
 8000cf6:	b087      	sub	sp, #28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
 8000cfe:	4664      	mov	r4, ip
 8000d00:	f8c7 c000 	str.w	ip, [r7]
    uint8_t speed = speed_input;
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	74fb      	strb	r3, [r7, #19]
    int16_t dx = 20;  // this variable needs to be determined based on the range
 8000d08:	2314      	movs	r3, #20
 8000d0a:	823b      	strh	r3, [r7, #16]
    mpu6500_get_gyro(GyroData);
 8000d0c:	4623      	mov	r3, r4
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f001 fa4e 	bl	80021b0 <mpu6500_get_gyro>
    int16_t xdir_init = GyroData[0];
 8000d14:	8823      	ldrh	r3, [r4, #0]
 8000d16:	81fb      	strh	r3, [r7, #14]
    int16_t ydir_init = GyroData[1];
 8000d18:	8863      	ldrh	r3, [r4, #2]
 8000d1a:	81bb      	strh	r3, [r7, #12]
    int counter = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
    while (counter < 100) {
 8000d20:	e064      	b.n	8000dec <testGyroWithCircle.0+0xf8>
      rotate_right(speed);
 8000d22:	7cfb      	ldrb	r3, [r7, #19]
 8000d24:	46a4      	mov	ip, r4
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff ffba 	bl	8000ca0 <rotate_right.1>
        mpu6500_get_gyro(GyroData);
 8000d2c:	4623      	mov	r3, r4
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f001 fa3e 	bl	80021b0 <mpu6500_get_gyro>
        if ((xdir_init - dx <= GyroData[0]&&GyroData[0] <= xdir_init + dx) &&
 8000d34:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000d38:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	f9b4 2000 	ldrsh.w	r2, [r4]
 8000d42:	4293      	cmp	r3, r2
 8000d44:	dcf2      	bgt.n	8000d2c <testGyroWithCircle.0+0x38>
 8000d46:	f9b4 3000 	ldrsh.w	r3, [r4]
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000d50:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000d54:	4413      	add	r3, r2
 8000d56:	4299      	cmp	r1, r3
 8000d58:	dce8      	bgt.n	8000d2c <testGyroWithCircle.0+0x38>
            (ydir_init - dx <= GyroData[1]&&GyroData[1] <= ydir_init + dx)) {
 8000d5a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000d5e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
        if ((xdir_init - dx <= GyroData[0]&&GyroData[0] <= xdir_init + dx) &&
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	dcdf      	bgt.n	8000d2c <testGyroWithCircle.0+0x38>
            (ydir_init - dx <= GyroData[1]&&GyroData[1] <= ydir_init + dx)) {
 8000d6c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8000d70:	4619      	mov	r1, r3
 8000d72:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000d76:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	dd00      	ble.n	8000d82 <testGyroWithCircle.0+0x8e>
        mpu6500_get_gyro(GyroData);
 8000d80:	e7d4      	b.n	8000d2c <testGyroWithCircle.0+0x38>
          break;
 8000d82:	bf00      	nop
      rotate_left(speed);
 8000d84:	7cfb      	ldrb	r3, [r7, #19]
 8000d86:	46a4      	mov	ip, r4
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff ff31 	bl	8000bf0 <rotate_left.2>
        mpu6500_get_gyro(GyroData);
 8000d8e:	4623      	mov	r3, r4
 8000d90:	4618      	mov	r0, r3
 8000d92:	f001 fa0d 	bl	80021b0 <mpu6500_get_gyro>
        if ((xdir_init - dx <= GyroData[0]&&GyroData[0] <= xdir_init + dx) &&
 8000d96:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000d9a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000d9e:	1ad3      	subs	r3, r2, r3
 8000da0:	f9b4 2000 	ldrsh.w	r2, [r4]
 8000da4:	4293      	cmp	r3, r2
 8000da6:	dcf2      	bgt.n	8000d8e <testGyroWithCircle.0+0x9a>
 8000da8:	f9b4 3000 	ldrsh.w	r3, [r4]
 8000dac:	4619      	mov	r1, r3
 8000dae:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000db2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000db6:	4413      	add	r3, r2
 8000db8:	4299      	cmp	r1, r3
 8000dba:	dce8      	bgt.n	8000d8e <testGyroWithCircle.0+0x9a>
            (ydir_init - dx <= GyroData[1]&&GyroData[1] <= ydir_init + dx)) {
 8000dbc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000dc0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
        if ((xdir_init - dx <= GyroData[0]&&GyroData[0] <= xdir_init + dx) &&
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	dcdf      	bgt.n	8000d8e <testGyroWithCircle.0+0x9a>
            (ydir_init - dx <= GyroData[1]&&GyroData[1] <= ydir_init + dx)) {
 8000dce:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000dd8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000ddc:	4413      	add	r3, r2
 8000dde:	4299      	cmp	r1, r3
 8000de0:	dd00      	ble.n	8000de4 <testGyroWithCircle.0+0xf0>
        mpu6500_get_gyro(GyroData);
 8000de2:	e7d4      	b.n	8000d8e <testGyroWithCircle.0+0x9a>
          break;
 8000de4:	bf00      	nop
      counter = counter + 1;
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	3301      	adds	r3, #1
 8000dea:	617b      	str	r3, [r7, #20]
    while (counter < 100) {
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	2b63      	cmp	r3, #99	@ 0x63
 8000df0:	dd97      	ble.n	8000d22 <testGyroWithCircle.0+0x2e>
    stop_micromouse();
 8000df2:	46a4      	mov	ip, r4
 8000df4:	f7ff ff6b 	bl	8000cce <stop_micromouse.3>
  }
 8000df8:	bf00      	nop
 8000dfa:	371c      	adds	r7, #28
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd90      	pop	{r4, r7, pc}

08000e00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b094      	sub	sp, #80	@ 0x50
 8000e04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e06:	f107 0320 	add.w	r3, r7, #32
 8000e0a:	2230      	movs	r2, #48	@ 0x30
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f005 fca1 	bl	8006756 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e14:	f107 030c 	add.w	r3, r7, #12
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e24:	2300      	movs	r3, #0
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	4b28      	ldr	r3, [pc, #160]	@ (8000ecc <SystemClock_Config+0xcc>)
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2c:	4a27      	ldr	r2, [pc, #156]	@ (8000ecc <SystemClock_Config+0xcc>)
 8000e2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e32:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e34:	4b25      	ldr	r3, [pc, #148]	@ (8000ecc <SystemClock_Config+0xcc>)
 8000e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e40:	2300      	movs	r3, #0
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	4b22      	ldr	r3, [pc, #136]	@ (8000ed0 <SystemClock_Config+0xd0>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a21      	ldr	r2, [pc, #132]	@ (8000ed0 <SystemClock_Config+0xd0>)
 8000e4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e4e:	6013      	str	r3, [r2, #0]
 8000e50:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed0 <SystemClock_Config+0xd0>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e60:	2301      	movs	r3, #1
 8000e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e64:	2310      	movs	r3, #16
 8000e66:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e70:	2308      	movs	r3, #8
 8000e72:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e74:	23a8      	movs	r3, #168	@ 0xa8
 8000e76:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e7c:	2304      	movs	r3, #4
 8000e7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e80:	f107 0320 	add.w	r3, r7, #32
 8000e84:	4618      	mov	r0, r3
 8000e86:	f002 fc41 	bl	800370c <HAL_RCC_OscConfig>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e90:	f000 f832 	bl	8000ef8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e94:	230f      	movs	r3, #15
 8000e96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ea0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ea4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ea6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eaa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000eac:	f107 030c 	add.w	r3, r7, #12
 8000eb0:	2105      	movs	r1, #5
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f002 fea2 	bl	8003bfc <HAL_RCC_ClockConfig>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ebe:	f000 f81b 	bl	8000ef8 <Error_Handler>
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	3750      	adds	r7, #80	@ 0x50
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40007000 	.word	0x40007000

08000ed4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a04      	ldr	r2, [pc, #16]	@ (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d101      	bne.n	8000eea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ee6:	f001 faa5 	bl	8002434 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40010000 	.word	0x40010000

08000ef8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000efc:	b672      	cpsid	i
}
 8000efe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <Error_Handler+0x8>

08000f04 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000f08:	4b17      	ldr	r3, [pc, #92]	@ (8000f68 <MX_SPI1_Init+0x64>)
 8000f0a:	4a18      	ldr	r2, [pc, #96]	@ (8000f6c <MX_SPI1_Init+0x68>)
 8000f0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f0e:	4b16      	ldr	r3, [pc, #88]	@ (8000f68 <MX_SPI1_Init+0x64>)
 8000f10:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f16:	4b14      	ldr	r3, [pc, #80]	@ (8000f68 <MX_SPI1_Init+0x64>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f1c:	4b12      	ldr	r3, [pc, #72]	@ (8000f68 <MX_SPI1_Init+0x64>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f22:	4b11      	ldr	r3, [pc, #68]	@ (8000f68 <MX_SPI1_Init+0x64>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	@ (8000f68 <MX_SPI1_Init+0x64>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f68 <MX_SPI1_Init+0x64>)
 8000f30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f34:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f36:	4b0c      	ldr	r3, [pc, #48]	@ (8000f68 <MX_SPI1_Init+0x64>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f68 <MX_SPI1_Init+0x64>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f42:	4b09      	ldr	r3, [pc, #36]	@ (8000f68 <MX_SPI1_Init+0x64>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f48:	4b07      	ldr	r3, [pc, #28]	@ (8000f68 <MX_SPI1_Init+0x64>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f4e:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <MX_SPI1_Init+0x64>)
 8000f50:	220a      	movs	r2, #10
 8000f52:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f54:	4804      	ldr	r0, [pc, #16]	@ (8000f68 <MX_SPI1_Init+0x64>)
 8000f56:	f003 f863 	bl	8004020 <HAL_SPI_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f60:	f7ff ffca 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000228 	.word	0x20000228
 8000f6c:	40013000 	.word	0x40013000

08000f70 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	@ 0x28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a19      	ldr	r2, [pc, #100]	@ (8000ff4 <HAL_SPI_MspInit+0x84>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d12b      	bne.n	8000fea <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
 8000f96:	4b18      	ldr	r3, [pc, #96]	@ (8000ff8 <HAL_SPI_MspInit+0x88>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f9a:	4a17      	ldr	r2, [pc, #92]	@ (8000ff8 <HAL_SPI_MspInit+0x88>)
 8000f9c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000fa0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fa2:	4b15      	ldr	r3, [pc, #84]	@ (8000ff8 <HAL_SPI_MspInit+0x88>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	4b11      	ldr	r3, [pc, #68]	@ (8000ff8 <HAL_SPI_MspInit+0x88>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	4a10      	ldr	r2, [pc, #64]	@ (8000ff8 <HAL_SPI_MspInit+0x88>)
 8000fb8:	f043 0302 	orr.w	r3, r3, #2
 8000fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff8 <HAL_SPI_MspInit+0x88>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000fca:	2338      	movs	r3, #56	@ 0x38
 8000fcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fda:	2305      	movs	r3, #5
 8000fdc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4805      	ldr	r0, [pc, #20]	@ (8000ffc <HAL_SPI_MspInit+0x8c>)
 8000fe6:	f002 f897 	bl	8003118 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000fea:	bf00      	nop
 8000fec:	3728      	adds	r7, #40	@ 0x28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40013000 	.word	0x40013000
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40020400 	.word	0x40020400

08001000 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	4b12      	ldr	r3, [pc, #72]	@ (8001054 <HAL_MspInit+0x54>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800100e:	4a11      	ldr	r2, [pc, #68]	@ (8001054 <HAL_MspInit+0x54>)
 8001010:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001014:	6453      	str	r3, [r2, #68]	@ 0x44
 8001016:	4b0f      	ldr	r3, [pc, #60]	@ (8001054 <HAL_MspInit+0x54>)
 8001018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800101a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	603b      	str	r3, [r7, #0]
 8001026:	4b0b      	ldr	r3, [pc, #44]	@ (8001054 <HAL_MspInit+0x54>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102a:	4a0a      	ldr	r2, [pc, #40]	@ (8001054 <HAL_MspInit+0x54>)
 800102c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001030:	6413      	str	r3, [r2, #64]	@ 0x40
 8001032:	4b08      	ldr	r3, [pc, #32]	@ (8001054 <HAL_MspInit+0x54>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001036:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800103a:	603b      	str	r3, [r7, #0]
 800103c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	210f      	movs	r1, #15
 8001042:	f06f 0001 	mvn.w	r0, #1
 8001046:	f001 fd53 	bl	8002af0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40023800 	.word	0x40023800

08001058 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08c      	sub	sp, #48	@ 0x30
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001060:	2300      	movs	r3, #0
 8001062:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001064:	2300      	movs	r3, #0
 8001066:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001068:	2300      	movs	r3, #0
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	4b2f      	ldr	r3, [pc, #188]	@ (800112c <HAL_InitTick+0xd4>)
 800106e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001070:	4a2e      	ldr	r2, [pc, #184]	@ (800112c <HAL_InitTick+0xd4>)
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	6453      	str	r3, [r2, #68]	@ 0x44
 8001078:	4b2c      	ldr	r3, [pc, #176]	@ (800112c <HAL_InitTick+0xd4>)
 800107a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001084:	f107 020c 	add.w	r2, r7, #12
 8001088:	f107 0310 	add.w	r3, r7, #16
 800108c:	4611      	mov	r1, r2
 800108e:	4618      	mov	r0, r3
 8001090:	f002 ff94 	bl	8003fbc <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001094:	f002 ff7e 	bl	8003f94 <HAL_RCC_GetPCLK2Freq>
 8001098:	4603      	mov	r3, r0
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800109e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010a0:	4a23      	ldr	r2, [pc, #140]	@ (8001130 <HAL_InitTick+0xd8>)
 80010a2:	fba2 2303 	umull	r2, r3, r2, r3
 80010a6:	0c9b      	lsrs	r3, r3, #18
 80010a8:	3b01      	subs	r3, #1
 80010aa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80010ac:	4b21      	ldr	r3, [pc, #132]	@ (8001134 <HAL_InitTick+0xdc>)
 80010ae:	4a22      	ldr	r2, [pc, #136]	@ (8001138 <HAL_InitTick+0xe0>)
 80010b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80010b2:	4b20      	ldr	r3, [pc, #128]	@ (8001134 <HAL_InitTick+0xdc>)
 80010b4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010b8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80010ba:	4a1e      	ldr	r2, [pc, #120]	@ (8001134 <HAL_InitTick+0xdc>)
 80010bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010be:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80010c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001134 <HAL_InitTick+0xdc>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001134 <HAL_InitTick+0xdc>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010cc:	4b19      	ldr	r3, [pc, #100]	@ (8001134 <HAL_InitTick+0xdc>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80010d2:	4818      	ldr	r0, [pc, #96]	@ (8001134 <HAL_InitTick+0xdc>)
 80010d4:	f003 fd76 	bl	8004bc4 <HAL_TIM_Base_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80010de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d11b      	bne.n	800111e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80010e6:	4813      	ldr	r0, [pc, #76]	@ (8001134 <HAL_InitTick+0xdc>)
 80010e8:	f003 fdbc 	bl	8004c64 <HAL_TIM_Base_Start_IT>
 80010ec:	4603      	mov	r3, r0
 80010ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80010f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d111      	bne.n	800111e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80010fa:	2019      	movs	r0, #25
 80010fc:	f001 fd14 	bl	8002b28 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b0f      	cmp	r3, #15
 8001104:	d808      	bhi.n	8001118 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001106:	2200      	movs	r2, #0
 8001108:	6879      	ldr	r1, [r7, #4]
 800110a:	2019      	movs	r0, #25
 800110c:	f001 fcf0 	bl	8002af0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001110:	4a0a      	ldr	r2, [pc, #40]	@ (800113c <HAL_InitTick+0xe4>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6013      	str	r3, [r2, #0]
 8001116:	e002      	b.n	800111e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800111e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001122:	4618      	mov	r0, r3
 8001124:	3730      	adds	r7, #48	@ 0x30
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40023800 	.word	0x40023800
 8001130:	431bde83 	.word	0x431bde83
 8001134:	20000280 	.word	0x20000280
 8001138:	40010000 	.word	0x40010000
 800113c:	20000004 	.word	0x20000004

08001140 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <NMI_Handler+0x4>

08001148 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <HardFault_Handler+0x4>

08001150 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <MemManage_Handler+0x4>

08001158 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <BusFault_Handler+0x4>

08001160 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001164:	bf00      	nop
 8001166:	e7fd      	b.n	8001164 <UsageFault_Handler+0x4>

08001168 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
	...

08001178 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800117c:	4803      	ldr	r0, [pc, #12]	@ (800118c <TIM1_UP_TIM10_IRQHandler+0x14>)
 800117e:	f003 fe30 	bl	8004de2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8001182:	4803      	ldr	r0, [pc, #12]	@ (8001190 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001184:	f003 fe2d 	bl	8004de2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000280 	.word	0x20000280
 8001190:	20000314 	.word	0x20000314

08001194 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001198:	4802      	ldr	r0, [pc, #8]	@ (80011a4 <DMA2_Stream0_IRQHandler+0x10>)
 800119a:	f001 fd81 	bl	8002ca0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200000cc 	.word	0x200000cc

080011a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
 80011b8:	e00a      	b.n	80011d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011ba:	f3af 8000 	nop.w
 80011be:	4601      	mov	r1, r0
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	1c5a      	adds	r2, r3, #1
 80011c4:	60ba      	str	r2, [r7, #8]
 80011c6:	b2ca      	uxtb	r2, r1
 80011c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	3301      	adds	r3, #1
 80011ce:	617b      	str	r3, [r7, #20]
 80011d0:	697a      	ldr	r2, [r7, #20]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	dbf0      	blt.n	80011ba <_read+0x12>
  }

  return len;
 80011d8:	687b      	ldr	r3, [r7, #4]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3718      	adds	r7, #24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b086      	sub	sp, #24
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	60f8      	str	r0, [r7, #12]
 80011ea:	60b9      	str	r1, [r7, #8]
 80011ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]
 80011f2:	e009      	b.n	8001208 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	1c5a      	adds	r2, r3, #1
 80011f8:	60ba      	str	r2, [r7, #8]
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	3301      	adds	r3, #1
 8001206:	617b      	str	r3, [r7, #20]
 8001208:	697a      	ldr	r2, [r7, #20]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	429a      	cmp	r2, r3
 800120e:	dbf1      	blt.n	80011f4 <_write+0x12>
  }
  return len;
 8001210:	687b      	ldr	r3, [r7, #4]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <_close>:

int _close(int file)
{
 800121a:	b480      	push	{r7}
 800121c:	b083      	sub	sp, #12
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001222:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001226:	4618      	mov	r0, r3
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001232:	b480      	push	{r7}
 8001234:	b083      	sub	sp, #12
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
 800123a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001242:	605a      	str	r2, [r3, #4]
  return 0;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <_isatty>:

int _isatty(int file)
{
 8001252:	b480      	push	{r7}
 8001254:	b083      	sub	sp, #12
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800125a:	2301      	movs	r3, #1
}
 800125c:	4618      	mov	r0, r3
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800128c:	4a14      	ldr	r2, [pc, #80]	@ (80012e0 <_sbrk+0x5c>)
 800128e:	4b15      	ldr	r3, [pc, #84]	@ (80012e4 <_sbrk+0x60>)
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001298:	4b13      	ldr	r3, [pc, #76]	@ (80012e8 <_sbrk+0x64>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d102      	bne.n	80012a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012a0:	4b11      	ldr	r3, [pc, #68]	@ (80012e8 <_sbrk+0x64>)
 80012a2:	4a12      	ldr	r2, [pc, #72]	@ (80012ec <_sbrk+0x68>)
 80012a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012a6:	4b10      	ldr	r3, [pc, #64]	@ (80012e8 <_sbrk+0x64>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d207      	bcs.n	80012c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012b4:	f005 faae 	bl	8006814 <__errno>
 80012b8:	4603      	mov	r3, r0
 80012ba:	220c      	movs	r2, #12
 80012bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012be:	f04f 33ff 	mov.w	r3, #4294967295
 80012c2:	e009      	b.n	80012d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012c4:	4b08      	ldr	r3, [pc, #32]	@ (80012e8 <_sbrk+0x64>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ca:	4b07      	ldr	r3, [pc, #28]	@ (80012e8 <_sbrk+0x64>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4413      	add	r3, r2
 80012d2:	4a05      	ldr	r2, [pc, #20]	@ (80012e8 <_sbrk+0x64>)
 80012d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012d6:	68fb      	ldr	r3, [r7, #12]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20020000 	.word	0x20020000
 80012e4:	00000400 	.word	0x00000400
 80012e8:	200002c8 	.word	0x200002c8
 80012ec:	200006a8 	.word	0x200006a8

080012f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012f4:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <SystemInit+0x20>)
 80012f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012fa:	4a05      	ldr	r2, [pc, #20]	@ (8001310 <SystemInit+0x20>)
 80012fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001300:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <MX_TIM3_Init>:
TIM_HandleTypeDef htim12;
TIM_HandleTypeDef htim13;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08e      	sub	sp, #56	@ 0x38
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800131a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001328:	f107 0320 	add.w	r3, r7, #32
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
 8001340:	615a      	str	r2, [r3, #20]
 8001342:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001344:	4b3e      	ldr	r3, [pc, #248]	@ (8001440 <MX_TIM3_Init+0x12c>)
 8001346:	4a3f      	ldr	r2, [pc, #252]	@ (8001444 <MX_TIM3_Init+0x130>)
 8001348:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800134a:	4b3d      	ldr	r3, [pc, #244]	@ (8001440 <MX_TIM3_Init+0x12c>)
 800134c:	2200      	movs	r2, #0
 800134e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001350:	4b3b      	ldr	r3, [pc, #236]	@ (8001440 <MX_TIM3_Init+0x12c>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001356:	4b3a      	ldr	r3, [pc, #232]	@ (8001440 <MX_TIM3_Init+0x12c>)
 8001358:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800135c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135e:	4b38      	ldr	r3, [pc, #224]	@ (8001440 <MX_TIM3_Init+0x12c>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001364:	4b36      	ldr	r3, [pc, #216]	@ (8001440 <MX_TIM3_Init+0x12c>)
 8001366:	2200      	movs	r2, #0
 8001368:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800136a:	4835      	ldr	r0, [pc, #212]	@ (8001440 <MX_TIM3_Init+0x12c>)
 800136c:	f003 fc2a 	bl	8004bc4 <HAL_TIM_Base_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001376:	f7ff fdbf 	bl	8000ef8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800137a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800137e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001380:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001384:	4619      	mov	r1, r3
 8001386:	482e      	ldr	r0, [pc, #184]	@ (8001440 <MX_TIM3_Init+0x12c>)
 8001388:	f003 fede 	bl	8005148 <HAL_TIM_ConfigClockSource>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001392:	f7ff fdb1 	bl	8000ef8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001396:	482a      	ldr	r0, [pc, #168]	@ (8001440 <MX_TIM3_Init+0x12c>)
 8001398:	f003 fcd4 	bl	8004d44 <HAL_TIM_PWM_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80013a2:	f7ff fda9 	bl	8000ef8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a6:	2300      	movs	r3, #0
 80013a8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013ae:	f107 0320 	add.w	r3, r7, #32
 80013b2:	4619      	mov	r1, r3
 80013b4:	4822      	ldr	r0, [pc, #136]	@ (8001440 <MX_TIM3_Init+0x12c>)
 80013b6:	f004 faad 	bl	8005914 <HAL_TIMEx_MasterConfigSynchronization>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80013c0:	f7ff fd9a 	bl	8000ef8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013c4:	2360      	movs	r3, #96	@ 0x60
 80013c6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80013cc:	2302      	movs	r3, #2
 80013ce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	2200      	movs	r2, #0
 80013d8:	4619      	mov	r1, r3
 80013da:	4819      	ldr	r0, [pc, #100]	@ (8001440 <MX_TIM3_Init+0x12c>)
 80013dc:	f003 fdf2 	bl	8004fc4 <HAL_TIM_PWM_ConfigChannel>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80013e6:	f7ff fd87 	bl	8000ef8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	2204      	movs	r2, #4
 80013ee:	4619      	mov	r1, r3
 80013f0:	4813      	ldr	r0, [pc, #76]	@ (8001440 <MX_TIM3_Init+0x12c>)
 80013f2:	f003 fde7 	bl	8004fc4 <HAL_TIM_PWM_ConfigChannel>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80013fc:	f7ff fd7c 	bl	8000ef8 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001400:	2300      	movs	r3, #0
 8001402:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	2208      	movs	r2, #8
 8001408:	4619      	mov	r1, r3
 800140a:	480d      	ldr	r0, [pc, #52]	@ (8001440 <MX_TIM3_Init+0x12c>)
 800140c:	f003 fdda 	bl	8004fc4 <HAL_TIM_PWM_ConfigChannel>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 8001416:	f7ff fd6f 	bl	8000ef8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	220c      	movs	r2, #12
 800141e:	4619      	mov	r1, r3
 8001420:	4807      	ldr	r0, [pc, #28]	@ (8001440 <MX_TIM3_Init+0x12c>)
 8001422:	f003 fdcf 	bl	8004fc4 <HAL_TIM_PWM_ConfigChannel>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_TIM3_Init+0x11c>
  {
    Error_Handler();
 800142c:	f7ff fd64 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001430:	4803      	ldr	r0, [pc, #12]	@ (8001440 <MX_TIM3_Init+0x12c>)
 8001432:	f000 f9cf 	bl	80017d4 <HAL_TIM_MspPostInit>

}
 8001436:	bf00      	nop
 8001438:	3738      	adds	r7, #56	@ 0x38
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200002cc 	.word	0x200002cc
 8001444:	40000400 	.word	0x40000400

08001448 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b088      	sub	sp, #32
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
 800145c:	615a      	str	r2, [r3, #20]
 800145e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001460:	4b1e      	ldr	r3, [pc, #120]	@ (80014dc <MX_TIM10_Init+0x94>)
 8001462:	4a1f      	ldr	r2, [pc, #124]	@ (80014e0 <MX_TIM10_Init+0x98>)
 8001464:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8001466:	4b1d      	ldr	r3, [pc, #116]	@ (80014dc <MX_TIM10_Init+0x94>)
 8001468:	2200      	movs	r2, #0
 800146a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146c:	4b1b      	ldr	r3, [pc, #108]	@ (80014dc <MX_TIM10_Init+0x94>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001472:	4b1a      	ldr	r3, [pc, #104]	@ (80014dc <MX_TIM10_Init+0x94>)
 8001474:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001478:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147a:	4b18      	ldr	r3, [pc, #96]	@ (80014dc <MX_TIM10_Init+0x94>)
 800147c:	2200      	movs	r2, #0
 800147e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001480:	4b16      	ldr	r3, [pc, #88]	@ (80014dc <MX_TIM10_Init+0x94>)
 8001482:	2200      	movs	r2, #0
 8001484:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001486:	4815      	ldr	r0, [pc, #84]	@ (80014dc <MX_TIM10_Init+0x94>)
 8001488:	f003 fb9c 	bl	8004bc4 <HAL_TIM_Base_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001492:	f7ff fd31 	bl	8000ef8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001496:	4811      	ldr	r0, [pc, #68]	@ (80014dc <MX_TIM10_Init+0x94>)
 8001498:	f003 fc54 	bl	8004d44 <HAL_TIM_PWM_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80014a2:	f7ff fd29 	bl	8000ef8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014a6:	2360      	movs	r3, #96	@ 0x60
 80014a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80014ae:	2302      	movs	r3, #2
 80014b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	2200      	movs	r2, #0
 80014ba:	4619      	mov	r1, r3
 80014bc:	4807      	ldr	r0, [pc, #28]	@ (80014dc <MX_TIM10_Init+0x94>)
 80014be:	f003 fd81 	bl	8004fc4 <HAL_TIM_PWM_ConfigChannel>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80014c8:	f7ff fd16 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80014cc:	4803      	ldr	r0, [pc, #12]	@ (80014dc <MX_TIM10_Init+0x94>)
 80014ce:	f000 f981 	bl	80017d4 <HAL_TIM_MspPostInit>

}
 80014d2:	bf00      	nop
 80014d4:	3720      	adds	r7, #32
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000314 	.word	0x20000314
 80014e0:	40014400 	.word	0x40014400

080014e4 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b088      	sub	sp, #32
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
 80014f8:	615a      	str	r2, [r3, #20]
 80014fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80014fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001578 <MX_TIM11_Init+0x94>)
 80014fe:	4a1f      	ldr	r2, [pc, #124]	@ (800157c <MX_TIM11_Init+0x98>)
 8001500:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8001502:	4b1d      	ldr	r3, [pc, #116]	@ (8001578 <MX_TIM11_Init+0x94>)
 8001504:	2200      	movs	r2, #0
 8001506:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001508:	4b1b      	ldr	r3, [pc, #108]	@ (8001578 <MX_TIM11_Init+0x94>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800150e:	4b1a      	ldr	r3, [pc, #104]	@ (8001578 <MX_TIM11_Init+0x94>)
 8001510:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001514:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001516:	4b18      	ldr	r3, [pc, #96]	@ (8001578 <MX_TIM11_Init+0x94>)
 8001518:	2200      	movs	r2, #0
 800151a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800151c:	4b16      	ldr	r3, [pc, #88]	@ (8001578 <MX_TIM11_Init+0x94>)
 800151e:	2200      	movs	r2, #0
 8001520:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001522:	4815      	ldr	r0, [pc, #84]	@ (8001578 <MX_TIM11_Init+0x94>)
 8001524:	f003 fb4e 	bl	8004bc4 <HAL_TIM_Base_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800152e:	f7ff fce3 	bl	8000ef8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8001532:	4811      	ldr	r0, [pc, #68]	@ (8001578 <MX_TIM11_Init+0x94>)
 8001534:	f003 fc06 	bl	8004d44 <HAL_TIM_PWM_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800153e:	f7ff fcdb 	bl	8000ef8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001542:	2360      	movs	r3, #96	@ 0x60
 8001544:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800154a:	2302      	movs	r3, #2
 800154c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800154e:	2300      	movs	r3, #0
 8001550:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	2200      	movs	r2, #0
 8001556:	4619      	mov	r1, r3
 8001558:	4807      	ldr	r0, [pc, #28]	@ (8001578 <MX_TIM11_Init+0x94>)
 800155a:	f003 fd33 	bl	8004fc4 <HAL_TIM_PWM_ConfigChannel>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8001564:	f7ff fcc8 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001568:	4803      	ldr	r0, [pc, #12]	@ (8001578 <MX_TIM11_Init+0x94>)
 800156a:	f000 f933 	bl	80017d4 <HAL_TIM_MspPostInit>

}
 800156e:	bf00      	nop
 8001570:	3720      	adds	r7, #32
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	2000035c 	.word	0x2000035c
 800157c:	40014800 	.word	0x40014800

08001580 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
 8001594:	615a      	str	r2, [r3, #20]
 8001596:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001598:	4b1f      	ldr	r3, [pc, #124]	@ (8001618 <MX_TIM12_Init+0x98>)
 800159a:	4a20      	ldr	r2, [pc, #128]	@ (800161c <MX_TIM12_Init+0x9c>)
 800159c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800159e:	4b1e      	ldr	r3, [pc, #120]	@ (8001618 <MX_TIM12_Init+0x98>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001618 <MX_TIM12_Init+0x98>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80015aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001618 <MX_TIM12_Init+0x98>)
 80015ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015b0:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b2:	4b19      	ldr	r3, [pc, #100]	@ (8001618 <MX_TIM12_Init+0x98>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b8:	4b17      	ldr	r3, [pc, #92]	@ (8001618 <MX_TIM12_Init+0x98>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80015be:	4816      	ldr	r0, [pc, #88]	@ (8001618 <MX_TIM12_Init+0x98>)
 80015c0:	f003 fbc0 	bl	8004d44 <HAL_TIM_PWM_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80015ca:	f7ff fc95 	bl	8000ef8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ce:	2360      	movs	r3, #96	@ 0x60
 80015d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80015d6:	2302      	movs	r3, #2
 80015d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	2200      	movs	r2, #0
 80015e2:	4619      	mov	r1, r3
 80015e4:	480c      	ldr	r0, [pc, #48]	@ (8001618 <MX_TIM12_Init+0x98>)
 80015e6:	f003 fced 	bl	8004fc4 <HAL_TIM_PWM_ConfigChannel>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80015f0:	f7ff fc82 	bl	8000ef8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	2204      	movs	r2, #4
 80015f8:	4619      	mov	r1, r3
 80015fa:	4807      	ldr	r0, [pc, #28]	@ (8001618 <MX_TIM12_Init+0x98>)
 80015fc:	f003 fce2 	bl	8004fc4 <HAL_TIM_PWM_ConfigChannel>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8001606:	f7ff fc77 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800160a:	4803      	ldr	r0, [pc, #12]	@ (8001618 <MX_TIM12_Init+0x98>)
 800160c:	f000 f8e2 	bl	80017d4 <HAL_TIM_MspPostInit>

}
 8001610:	bf00      	nop
 8001612:	3720      	adds	r7, #32
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	200003a4 	.word	0x200003a4
 800161c:	40001800 	.word	0x40001800

08001620 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b088      	sub	sp, #32
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
 8001634:	615a      	str	r2, [r3, #20]
 8001636:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001638:	4b1e      	ldr	r3, [pc, #120]	@ (80016b4 <MX_TIM13_Init+0x94>)
 800163a:	4a1f      	ldr	r2, [pc, #124]	@ (80016b8 <MX_TIM13_Init+0x98>)
 800163c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 800163e:	4b1d      	ldr	r3, [pc, #116]	@ (80016b4 <MX_TIM13_Init+0x94>)
 8001640:	2200      	movs	r2, #0
 8001642:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001644:	4b1b      	ldr	r3, [pc, #108]	@ (80016b4 <MX_TIM13_Init+0x94>)
 8001646:	2200      	movs	r2, #0
 8001648:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 800164a:	4b1a      	ldr	r3, [pc, #104]	@ (80016b4 <MX_TIM13_Init+0x94>)
 800164c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001650:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001652:	4b18      	ldr	r3, [pc, #96]	@ (80016b4 <MX_TIM13_Init+0x94>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001658:	4b16      	ldr	r3, [pc, #88]	@ (80016b4 <MX_TIM13_Init+0x94>)
 800165a:	2200      	movs	r2, #0
 800165c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800165e:	4815      	ldr	r0, [pc, #84]	@ (80016b4 <MX_TIM13_Init+0x94>)
 8001660:	f003 fab0 	bl	8004bc4 <HAL_TIM_Base_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800166a:	f7ff fc45 	bl	8000ef8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800166e:	4811      	ldr	r0, [pc, #68]	@ (80016b4 <MX_TIM13_Init+0x94>)
 8001670:	f003 fb68 	bl	8004d44 <HAL_TIM_PWM_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800167a:	f7ff fc3d 	bl	8000ef8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800167e:	2360      	movs	r3, #96	@ 0x60
 8001680:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800168e:	1d3b      	adds	r3, r7, #4
 8001690:	2200      	movs	r2, #0
 8001692:	4619      	mov	r1, r3
 8001694:	4807      	ldr	r0, [pc, #28]	@ (80016b4 <MX_TIM13_Init+0x94>)
 8001696:	f003 fc95 	bl	8004fc4 <HAL_TIM_PWM_ConfigChannel>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80016a0:	f7ff fc2a 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80016a4:	4803      	ldr	r0, [pc, #12]	@ (80016b4 <MX_TIM13_Init+0x94>)
 80016a6:	f000 f895 	bl	80017d4 <HAL_TIM_MspPostInit>

}
 80016aa:	bf00      	nop
 80016ac:	3720      	adds	r7, #32
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	200003ec 	.word	0x200003ec
 80016b8:	40001c00 	.word	0x40001c00

080016bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a2c      	ldr	r2, [pc, #176]	@ (800177c <HAL_TIM_Base_MspInit+0xc0>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d10e      	bne.n	80016ec <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	4b2b      	ldr	r3, [pc, #172]	@ (8001780 <HAL_TIM_Base_MspInit+0xc4>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d6:	4a2a      	ldr	r2, [pc, #168]	@ (8001780 <HAL_TIM_Base_MspInit+0xc4>)
 80016d8:	f043 0302 	orr.w	r3, r3, #2
 80016dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80016de:	4b28      	ldr	r3, [pc, #160]	@ (8001780 <HAL_TIM_Base_MspInit+0xc4>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 80016ea:	e042      	b.n	8001772 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM10)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a24      	ldr	r2, [pc, #144]	@ (8001784 <HAL_TIM_Base_MspInit+0xc8>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d116      	bne.n	8001724 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	613b      	str	r3, [r7, #16]
 80016fa:	4b21      	ldr	r3, [pc, #132]	@ (8001780 <HAL_TIM_Base_MspInit+0xc4>)
 80016fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fe:	4a20      	ldr	r2, [pc, #128]	@ (8001780 <HAL_TIM_Base_MspInit+0xc4>)
 8001700:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001704:	6453      	str	r3, [r2, #68]	@ 0x44
 8001706:	4b1e      	ldr	r3, [pc, #120]	@ (8001780 <HAL_TIM_Base_MspInit+0xc4>)
 8001708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800170a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 8001712:	2200      	movs	r2, #0
 8001714:	210f      	movs	r1, #15
 8001716:	2019      	movs	r0, #25
 8001718:	f001 f9ea 	bl	8002af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800171c:	2019      	movs	r0, #25
 800171e:	f001 fa03 	bl	8002b28 <HAL_NVIC_EnableIRQ>
}
 8001722:	e026      	b.n	8001772 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM11)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a17      	ldr	r2, [pc, #92]	@ (8001788 <HAL_TIM_Base_MspInit+0xcc>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d10e      	bne.n	800174c <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	4b13      	ldr	r3, [pc, #76]	@ (8001780 <HAL_TIM_Base_MspInit+0xc4>)
 8001734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001736:	4a12      	ldr	r2, [pc, #72]	@ (8001780 <HAL_TIM_Base_MspInit+0xc4>)
 8001738:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800173c:	6453      	str	r3, [r2, #68]	@ 0x44
 800173e:	4b10      	ldr	r3, [pc, #64]	@ (8001780 <HAL_TIM_Base_MspInit+0xc4>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001742:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
}
 800174a:	e012      	b.n	8001772 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM13)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a0e      	ldr	r2, [pc, #56]	@ (800178c <HAL_TIM_Base_MspInit+0xd0>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d10d      	bne.n	8001772 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	4b09      	ldr	r3, [pc, #36]	@ (8001780 <HAL_TIM_Base_MspInit+0xc4>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175e:	4a08      	ldr	r2, [pc, #32]	@ (8001780 <HAL_TIM_Base_MspInit+0xc4>)
 8001760:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001764:	6413      	str	r3, [r2, #64]	@ 0x40
 8001766:	4b06      	ldr	r3, [pc, #24]	@ (8001780 <HAL_TIM_Base_MspInit+0xc4>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]
}
 8001772:	bf00      	nop
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40000400 	.word	0x40000400
 8001780:	40023800 	.word	0x40023800
 8001784:	40014400 	.word	0x40014400
 8001788:	40014800 	.word	0x40014800
 800178c:	40001c00 	.word	0x40001c00

08001790 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM12)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a0b      	ldr	r2, [pc, #44]	@ (80017cc <HAL_TIM_PWM_MspInit+0x3c>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d10d      	bne.n	80017be <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	4b0a      	ldr	r3, [pc, #40]	@ (80017d0 <HAL_TIM_PWM_MspInit+0x40>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017aa:	4a09      	ldr	r2, [pc, #36]	@ (80017d0 <HAL_TIM_PWM_MspInit+0x40>)
 80017ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017b2:	4b07      	ldr	r3, [pc, #28]	@ (80017d0 <HAL_TIM_PWM_MspInit+0x40>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 80017be:	bf00      	nop
 80017c0:	3714      	adds	r7, #20
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	40001800 	.word	0x40001800
 80017d0:	40023800 	.word	0x40023800

080017d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08e      	sub	sp, #56	@ 0x38
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a6a      	ldr	r2, [pc, #424]	@ (800199c <HAL_TIM_MspPostInit+0x1c8>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d13c      	bne.n	8001870 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	623b      	str	r3, [r7, #32]
 80017fa:	4b69      	ldr	r3, [pc, #420]	@ (80019a0 <HAL_TIM_MspPostInit+0x1cc>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	4a68      	ldr	r2, [pc, #416]	@ (80019a0 <HAL_TIM_MspPostInit+0x1cc>)
 8001800:	f043 0302 	orr.w	r3, r3, #2
 8001804:	6313      	str	r3, [r2, #48]	@ 0x30
 8001806:	4b66      	ldr	r3, [pc, #408]	@ (80019a0 <HAL_TIM_MspPostInit+0x1cc>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	623b      	str	r3, [r7, #32]
 8001810:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
 8001816:	4b62      	ldr	r3, [pc, #392]	@ (80019a0 <HAL_TIM_MspPostInit+0x1cc>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	4a61      	ldr	r2, [pc, #388]	@ (80019a0 <HAL_TIM_MspPostInit+0x1cc>)
 800181c:	f043 0304 	orr.w	r3, r3, #4
 8001820:	6313      	str	r3, [r2, #48]	@ 0x30
 8001822:	4b5f      	ldr	r3, [pc, #380]	@ (80019a0 <HAL_TIM_MspPostInit+0x1cc>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	61fb      	str	r3, [r7, #28]
 800182c:	69fb      	ldr	r3, [r7, #28]
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800182e:	2303      	movs	r3, #3
 8001830:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001832:	2302      	movs	r3, #2
 8001834:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183a:	2300      	movs	r3, #0
 800183c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800183e:	2302      	movs	r3, #2
 8001840:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001842:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001846:	4619      	mov	r1, r3
 8001848:	4856      	ldr	r0, [pc, #344]	@ (80019a4 <HAL_TIM_MspPostInit+0x1d0>)
 800184a:	f001 fc65 	bl	8003118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800184e:	23c0      	movs	r3, #192	@ 0xc0
 8001850:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001852:	2302      	movs	r3, #2
 8001854:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185a:	2300      	movs	r3, #0
 800185c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800185e:	2302      	movs	r3, #2
 8001860:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001862:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001866:	4619      	mov	r1, r3
 8001868:	484f      	ldr	r0, [pc, #316]	@ (80019a8 <HAL_TIM_MspPostInit+0x1d4>)
 800186a:	f001 fc55 	bl	8003118 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 800186e:	e091      	b.n	8001994 <HAL_TIM_MspPostInit+0x1c0>
  else if(timHandle->Instance==TIM10)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a4d      	ldr	r2, [pc, #308]	@ (80019ac <HAL_TIM_MspPostInit+0x1d8>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d11f      	bne.n	80018ba <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	61bb      	str	r3, [r7, #24]
 800187e:	4b48      	ldr	r3, [pc, #288]	@ (80019a0 <HAL_TIM_MspPostInit+0x1cc>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001882:	4a47      	ldr	r2, [pc, #284]	@ (80019a0 <HAL_TIM_MspPostInit+0x1cc>)
 8001884:	f043 0302 	orr.w	r3, r3, #2
 8001888:	6313      	str	r3, [r2, #48]	@ 0x30
 800188a:	4b45      	ldr	r3, [pc, #276]	@ (80019a0 <HAL_TIM_MspPostInit+0x1cc>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	61bb      	str	r3, [r7, #24]
 8001894:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001896:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800189a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189c:	2302      	movs	r3, #2
 800189e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a4:	2300      	movs	r3, #0
 80018a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80018a8:	2303      	movs	r3, #3
 80018aa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018b0:	4619      	mov	r1, r3
 80018b2:	483c      	ldr	r0, [pc, #240]	@ (80019a4 <HAL_TIM_MspPostInit+0x1d0>)
 80018b4:	f001 fc30 	bl	8003118 <HAL_GPIO_Init>
}
 80018b8:	e06c      	b.n	8001994 <HAL_TIM_MspPostInit+0x1c0>
  else if(timHandle->Instance==TIM11)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a3c      	ldr	r2, [pc, #240]	@ (80019b0 <HAL_TIM_MspPostInit+0x1dc>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d11f      	bne.n	8001904 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	4b35      	ldr	r3, [pc, #212]	@ (80019a0 <HAL_TIM_MspPostInit+0x1cc>)
 80018ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018cc:	4a34      	ldr	r2, [pc, #208]	@ (80019a0 <HAL_TIM_MspPostInit+0x1cc>)
 80018ce:	f043 0302 	orr.w	r3, r3, #2
 80018d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d4:	4b32      	ldr	r3, [pc, #200]	@ (80019a0 <HAL_TIM_MspPostInit+0x1cc>)
 80018d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	617b      	str	r3, [r7, #20]
 80018de:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e6:	2302      	movs	r3, #2
 80018e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ee:	2300      	movs	r3, #0
 80018f0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80018f2:	2303      	movs	r3, #3
 80018f4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018fa:	4619      	mov	r1, r3
 80018fc:	4829      	ldr	r0, [pc, #164]	@ (80019a4 <HAL_TIM_MspPostInit+0x1d0>)
 80018fe:	f001 fc0b 	bl	8003118 <HAL_GPIO_Init>
}
 8001902:	e047      	b.n	8001994 <HAL_TIM_MspPostInit+0x1c0>
  else if(timHandle->Instance==TIM12)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a2a      	ldr	r2, [pc, #168]	@ (80019b4 <HAL_TIM_MspPostInit+0x1e0>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d11f      	bne.n	800194e <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]
 8001912:	4b23      	ldr	r3, [pc, #140]	@ (80019a0 <HAL_TIM_MspPostInit+0x1cc>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001916:	4a22      	ldr	r2, [pc, #136]	@ (80019a0 <HAL_TIM_MspPostInit+0x1cc>)
 8001918:	f043 0302 	orr.w	r3, r3, #2
 800191c:	6313      	str	r3, [r2, #48]	@ 0x30
 800191e:	4b20      	ldr	r3, [pc, #128]	@ (80019a0 <HAL_TIM_MspPostInit+0x1cc>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800192a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800192e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001930:	2302      	movs	r3, #2
 8001932:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001938:	2300      	movs	r3, #0
 800193a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800193c:	2309      	movs	r3, #9
 800193e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001940:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001944:	4619      	mov	r1, r3
 8001946:	4817      	ldr	r0, [pc, #92]	@ (80019a4 <HAL_TIM_MspPostInit+0x1d0>)
 8001948:	f001 fbe6 	bl	8003118 <HAL_GPIO_Init>
}
 800194c:	e022      	b.n	8001994 <HAL_TIM_MspPostInit+0x1c0>
  else if(timHandle->Instance==TIM13)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a19      	ldr	r2, [pc, #100]	@ (80019b8 <HAL_TIM_MspPostInit+0x1e4>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d11d      	bne.n	8001994 <HAL_TIM_MspPostInit+0x1c0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001958:	2300      	movs	r3, #0
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	4b10      	ldr	r3, [pc, #64]	@ (80019a0 <HAL_TIM_MspPostInit+0x1cc>)
 800195e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001960:	4a0f      	ldr	r2, [pc, #60]	@ (80019a0 <HAL_TIM_MspPostInit+0x1cc>)
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	6313      	str	r3, [r2, #48]	@ 0x30
 8001968:	4b0d      	ldr	r3, [pc, #52]	@ (80019a0 <HAL_TIM_MspPostInit+0x1cc>)
 800196a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001974:	2340      	movs	r3, #64	@ 0x40
 8001976:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001978:	2302      	movs	r3, #2
 800197a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001980:	2300      	movs	r3, #0
 8001982:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001984:	2309      	movs	r3, #9
 8001986:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001988:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800198c:	4619      	mov	r1, r3
 800198e:	480b      	ldr	r0, [pc, #44]	@ (80019bc <HAL_TIM_MspPostInit+0x1e8>)
 8001990:	f001 fbc2 	bl	8003118 <HAL_GPIO_Init>
}
 8001994:	bf00      	nop
 8001996:	3738      	adds	r7, #56	@ 0x38
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40000400 	.word	0x40000400
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40020400 	.word	0x40020400
 80019a8:	40020800 	.word	0x40020800
 80019ac:	40014400 	.word	0x40014400
 80019b0:	40014800 	.word	0x40014800
 80019b4:	40001800 	.word	0x40001800
 80019b8:	40001c00 	.word	0x40001c00
 80019bc:	40020000 	.word	0x40020000

080019c0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019c4:	4b11      	ldr	r3, [pc, #68]	@ (8001a0c <MX_USART2_UART_Init+0x4c>)
 80019c6:	4a12      	ldr	r2, [pc, #72]	@ (8001a10 <MX_USART2_UART_Init+0x50>)
 80019c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019ca:	4b10      	ldr	r3, [pc, #64]	@ (8001a0c <MX_USART2_UART_Init+0x4c>)
 80019cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019d2:	4b0e      	ldr	r3, [pc, #56]	@ (8001a0c <MX_USART2_UART_Init+0x4c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019d8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a0c <MX_USART2_UART_Init+0x4c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019de:	4b0b      	ldr	r3, [pc, #44]	@ (8001a0c <MX_USART2_UART_Init+0x4c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019e4:	4b09      	ldr	r3, [pc, #36]	@ (8001a0c <MX_USART2_UART_Init+0x4c>)
 80019e6:	220c      	movs	r2, #12
 80019e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ea:	4b08      	ldr	r3, [pc, #32]	@ (8001a0c <MX_USART2_UART_Init+0x4c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019f0:	4b06      	ldr	r3, [pc, #24]	@ (8001a0c <MX_USART2_UART_Init+0x4c>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019f6:	4805      	ldr	r0, [pc, #20]	@ (8001a0c <MX_USART2_UART_Init+0x4c>)
 80019f8:	f004 f81c 	bl	8005a34 <HAL_UART_Init>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a02:	f7ff fa79 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000434 	.word	0x20000434
 8001a10:	40004400 	.word	0x40004400

08001a14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08a      	sub	sp, #40	@ 0x28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a19      	ldr	r2, [pc, #100]	@ (8001a98 <HAL_UART_MspInit+0x84>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d12b      	bne.n	8001a8e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	4b18      	ldr	r3, [pc, #96]	@ (8001a9c <HAL_UART_MspInit+0x88>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3e:	4a17      	ldr	r2, [pc, #92]	@ (8001a9c <HAL_UART_MspInit+0x88>)
 8001a40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a46:	4b15      	ldr	r3, [pc, #84]	@ (8001a9c <HAL_UART_MspInit+0x88>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a4e:	613b      	str	r3, [r7, #16]
 8001a50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	4b11      	ldr	r3, [pc, #68]	@ (8001a9c <HAL_UART_MspInit+0x88>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5a:	4a10      	ldr	r2, [pc, #64]	@ (8001a9c <HAL_UART_MspInit+0x88>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a62:	4b0e      	ldr	r3, [pc, #56]	@ (8001a9c <HAL_UART_MspInit+0x88>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a6e:	230c      	movs	r3, #12
 8001a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a72:	2302      	movs	r3, #2
 8001a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a7e:	2307      	movs	r3, #7
 8001a80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a82:	f107 0314 	add.w	r3, r7, #20
 8001a86:	4619      	mov	r1, r3
 8001a88:	4805      	ldr	r0, [pc, #20]	@ (8001aa0 <HAL_UART_MspInit+0x8c>)
 8001a8a:	f001 fb45 	bl	8003118 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a8e:	bf00      	nop
 8001a90:	3728      	adds	r7, #40	@ 0x28
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40004400 	.word	0x40004400
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40020000 	.word	0x40020000

08001aa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001aa4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001adc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001aa8:	f7ff fc22 	bl	80012f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001aac:	480c      	ldr	r0, [pc, #48]	@ (8001ae0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001aae:	490d      	ldr	r1, [pc, #52]	@ (8001ae4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ab0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ae8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab4:	e002      	b.n	8001abc <LoopCopyDataInit>

08001ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aba:	3304      	adds	r3, #4

08001abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ac0:	d3f9      	bcc.n	8001ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8001aec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ac4:	4c0a      	ldr	r4, [pc, #40]	@ (8001af0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac8:	e001      	b.n	8001ace <LoopFillZerobss>

08001aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001acc:	3204      	adds	r2, #4

08001ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ad0:	d3fb      	bcc.n	8001aca <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001ad2:	f004 fea5 	bl	8006820 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ad6:	f7ff f8a2 	bl	8000c1e <main>
  bx  lr    
 8001ada:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001adc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ae4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001ae8:	0800738c 	.word	0x0800738c
  ldr r2, =_sbss
 8001aec:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001af0:	200006a8 	.word	0x200006a8

08001af4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001af4:	e7fe      	b.n	8001af4 <ADC_IRQHandler>

08001af6 <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b084      	sub	sp, #16
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d105      	bne.n	8001b10 <stm32_lock_init+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001b04:	b672      	cpsid	i
}
 8001b06:	bf00      	nop
 8001b08:	f7ff f9f6 	bl	8000ef8 <Error_Handler>
 8001b0c:	bf00      	nop
 8001b0e:	e7fd      	b.n	8001b0c <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	e007      	b.n	8001b26 <stm32_lock_init+0x30>
  {
    lock->basepri[i] = 0;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68fa      	ldr	r2, [r7, #12]
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	3301      	adds	r3, #1
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d9f4      	bls.n	8001b16 <stm32_lock_init+0x20>
  }
  lock->nesting_level = 0;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	721a      	strb	r2, [r3, #8]
}
 8001b32:	bf00      	nop
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b084      	sub	sp, #16
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d105      	bne.n	8001b54 <stm32_lock_acquire+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001b48:	b672      	cpsid	i
}
 8001b4a:	bf00      	nop
 8001b4c:	f7ff f9d4 	bl	8000ef8 <Error_Handler>
 8001b50:	bf00      	nop
 8001b52:	e7fd      	b.n	8001b50 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	7a1b      	ldrb	r3, [r3, #8]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d905      	bls.n	8001b68 <stm32_lock_acquire+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8001b5c:	b672      	cpsid	i
}
 8001b5e:	bf00      	nop
 8001b60:	f7ff f9ca 	bl	8000ef8 <Error_Handler>
 8001b64:	bf00      	nop
 8001b66:	e7fd      	b.n	8001b64 <stm32_lock_acquire+0x2a>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	7a1b      	ldrb	r3, [r3, #8]
 8001b6c:	1c5a      	adds	r2, r3, #1
 8001b6e:	b2d1      	uxtb	r1, r2
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	7211      	strb	r1, [r2, #8]
 8001b74:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001b76:	f3ef 8211 	mrs	r2, BASEPRI
 8001b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b7e:	f383 8811 	msr	BASEPRI, r3
 8001b82:	f3bf 8f6f 	isb	sy
 8001b86:	f3bf 8f4f 	dsb	sy
 8001b8a:	60fa      	str	r2, [r7, #12]
 8001b8c:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8001b96:	bf00      	nop
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b084      	sub	sp, #16
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d105      	bne.n	8001bb8 <stm32_lock_release+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001bac:	b672      	cpsid	i
}
 8001bae:	bf00      	nop
 8001bb0:	f7ff f9a2 	bl	8000ef8 <Error_Handler>
 8001bb4:	bf00      	nop
 8001bb6:	e7fd      	b.n	8001bb4 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	7a1b      	ldrb	r3, [r3, #8]
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	7a1b      	ldrb	r3, [r3, #8]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d905      	bls.n	8001bd8 <stm32_lock_release+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001bcc:	b672      	cpsid	i
}
 8001bce:	bf00      	nop
 8001bd0:	f7ff f992 	bl	8000ef8 <Error_Handler>
 8001bd4:	bf00      	nop
 8001bd6:	e7fd      	b.n	8001bd4 <stm32_lock_release+0x36>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	7a1b      	ldrb	r3, [r3, #8]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001be4:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001bec:	bf00      	nop
}
 8001bee:	bf00      	nop
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d105      	bne.n	8001c10 <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8001c04:	f004 fe06 	bl	8006814 <__errno>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2216      	movs	r2, #22
 8001c0c:	601a      	str	r2, [r3, #0]
    return;
 8001c0e:	e016      	b.n	8001c3e <__retarget_lock_init_recursive+0x48>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8001c10:	200c      	movs	r0, #12
 8001c12:	f004 fbcb 	bl	80063ac <malloc>
 8001c16:	4603      	mov	r3, r0
 8001c18:	461a      	mov	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d005      	beq.n	8001c32 <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff ff63 	bl	8001af6 <stm32_lock_init>
    return;
 8001c30:	e005      	b.n	8001c3e <__retarget_lock_init_recursive+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 8001c32:	b672      	cpsid	i
}
 8001c34:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8001c36:	f7ff f95f 	bl	8000ef8 <Error_Handler>
 8001c3a:	bf00      	nop
 8001c3c:	e7fd      	b.n	8001c3a <__retarget_lock_init_recursive+0x44>
}
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d105      	bne.n	8001c5e <__retarget_lock_acquire_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001c52:	b672      	cpsid	i
}
 8001c54:	bf00      	nop
 8001c56:	f7ff f94f 	bl	8000ef8 <Error_Handler>
 8001c5a:	bf00      	nop
 8001c5c:	e7fd      	b.n	8001c5a <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ff6a 	bl	8001b3a <stm32_lock_acquire>
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b082      	sub	sp, #8
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d105      	bne.n	8001c88 <__retarget_lock_release_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001c7c:	b672      	cpsid	i
}
 8001c7e:	bf00      	nop
 8001c80:	f7ff f93a 	bl	8000ef8 <Error_Handler>
 8001c84:	bf00      	nop
 8001c86:	e7fd      	b.n	8001c84 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff ff87 	bl	8001b9e <stm32_lock_release>
}
 8001c90:	bf00      	nop
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <set_duty_cycle>:
    HAL_GPIO_WritePin(DRV8833_EN_GPIO_Port, DRV8833_EN_Pin, GPIO_PIN_SET);
    return pwm_init();
}

void set_duty_cycle(MOTOR motor, MOTION motion, uint8_t duty_cycle)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	71fb      	strb	r3, [r7, #7]
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	71bb      	strb	r3, [r7, #6]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	717b      	strb	r3, [r7, #5]
    switch (motor) {
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d002      	beq.n	8001cb6 <set_duty_cycle+0x1e>
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d02f      	beq.n	8001d14 <set_duty_cycle+0x7c>
                default:
                    break;
            }
            break;
        default:
            break;
 8001cb4:	e05d      	b.n	8001d72 <set_duty_cycle+0xda>
            switch (motion) {
 8001cb6:	79bb      	ldrb	r3, [r7, #6]
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d01e      	beq.n	8001cfa <set_duty_cycle+0x62>
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	dc27      	bgt.n	8001d10 <set_duty_cycle+0x78>
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d002      	beq.n	8001cca <set_duty_cycle+0x32>
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d00c      	beq.n	8001ce2 <set_duty_cycle+0x4a>
                    break;
 8001cc8:	e022      	b.n	8001d10 <set_duty_cycle+0x78>
                    pwm_set_duty_cycle(TIM10, TIM_CHANNEL_1, duty_cycle);
 8001cca:	797b      	ldrb	r3, [r7, #5]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	2100      	movs	r1, #0
 8001cd0:	482c      	ldr	r0, [pc, #176]	@ (8001d84 <set_duty_cycle+0xec>)
 8001cd2:	f000 faa1 	bl	8002218 <pwm_set_duty_cycle>
                    pwm_set_duty_cycle(TIM3, TIM_CHANNEL_3, 0);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2108      	movs	r1, #8
 8001cda:	482b      	ldr	r0, [pc, #172]	@ (8001d88 <set_duty_cycle+0xf0>)
 8001cdc:	f000 fa9c 	bl	8002218 <pwm_set_duty_cycle>
                    break;
 8001ce0:	e017      	b.n	8001d12 <set_duty_cycle+0x7a>
                    pwm_set_duty_cycle(TIM10, TIM_CHANNEL_1, 0);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	4827      	ldr	r0, [pc, #156]	@ (8001d84 <set_duty_cycle+0xec>)
 8001ce8:	f000 fa96 	bl	8002218 <pwm_set_duty_cycle>
                    pwm_set_duty_cycle(TIM3, TIM_CHANNEL_3, duty_cycle);
 8001cec:	797b      	ldrb	r3, [r7, #5]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	2108      	movs	r1, #8
 8001cf2:	4825      	ldr	r0, [pc, #148]	@ (8001d88 <set_duty_cycle+0xf0>)
 8001cf4:	f000 fa90 	bl	8002218 <pwm_set_duty_cycle>
                    break;
 8001cf8:	e00b      	b.n	8001d12 <set_duty_cycle+0x7a>
                    pwm_set_duty_cycle(TIM10, TIM_CHANNEL_1, 0);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	4821      	ldr	r0, [pc, #132]	@ (8001d84 <set_duty_cycle+0xec>)
 8001d00:	f000 fa8a 	bl	8002218 <pwm_set_duty_cycle>
                    pwm_set_duty_cycle(TIM3, TIM_CHANNEL_3, 0);
 8001d04:	2200      	movs	r2, #0
 8001d06:	2108      	movs	r1, #8
 8001d08:	481f      	ldr	r0, [pc, #124]	@ (8001d88 <set_duty_cycle+0xf0>)
 8001d0a:	f000 fa85 	bl	8002218 <pwm_set_duty_cycle>
                    break;
 8001d0e:	e000      	b.n	8001d12 <set_duty_cycle+0x7a>
                    break;
 8001d10:	bf00      	nop
            break;
 8001d12:	e02e      	b.n	8001d72 <set_duty_cycle+0xda>
            switch (motion) {
 8001d14:	79bb      	ldrb	r3, [r7, #6]
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d01e      	beq.n	8001d58 <set_duty_cycle+0xc0>
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	dc27      	bgt.n	8001d6e <set_duty_cycle+0xd6>
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d002      	beq.n	8001d28 <set_duty_cycle+0x90>
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d00c      	beq.n	8001d40 <set_duty_cycle+0xa8>
                    break;
 8001d26:	e022      	b.n	8001d6e <set_duty_cycle+0xd6>
                    pwm_set_duty_cycle(TIM3, TIM_CHANNEL_4, duty_cycle);
 8001d28:	797b      	ldrb	r3, [r7, #5]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	210c      	movs	r1, #12
 8001d2e:	4816      	ldr	r0, [pc, #88]	@ (8001d88 <set_duty_cycle+0xf0>)
 8001d30:	f000 fa72 	bl	8002218 <pwm_set_duty_cycle>
                    pwm_set_duty_cycle(TIM13, TIM_CHANNEL_1, 0);
 8001d34:	2200      	movs	r2, #0
 8001d36:	2100      	movs	r1, #0
 8001d38:	4814      	ldr	r0, [pc, #80]	@ (8001d8c <set_duty_cycle+0xf4>)
 8001d3a:	f000 fa6d 	bl	8002218 <pwm_set_duty_cycle>
                    break;
 8001d3e:	e017      	b.n	8001d70 <set_duty_cycle+0xd8>
                    pwm_set_duty_cycle(TIM3, TIM_CHANNEL_4, 0);
 8001d40:	2200      	movs	r2, #0
 8001d42:	210c      	movs	r1, #12
 8001d44:	4810      	ldr	r0, [pc, #64]	@ (8001d88 <set_duty_cycle+0xf0>)
 8001d46:	f000 fa67 	bl	8002218 <pwm_set_duty_cycle>
                    pwm_set_duty_cycle(TIM13, TIM_CHANNEL_1, duty_cycle);
 8001d4a:	797b      	ldrb	r3, [r7, #5]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	2100      	movs	r1, #0
 8001d50:	480e      	ldr	r0, [pc, #56]	@ (8001d8c <set_duty_cycle+0xf4>)
 8001d52:	f000 fa61 	bl	8002218 <pwm_set_duty_cycle>
                    break;
 8001d56:	e00b      	b.n	8001d70 <set_duty_cycle+0xd8>
                    pwm_set_duty_cycle(TIM3, TIM_CHANNEL_4, 0);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	210c      	movs	r1, #12
 8001d5c:	480a      	ldr	r0, [pc, #40]	@ (8001d88 <set_duty_cycle+0xf0>)
 8001d5e:	f000 fa5b 	bl	8002218 <pwm_set_duty_cycle>
                    pwm_set_duty_cycle(TIM13, TIM_CHANNEL_1, 0);
 8001d62:	2200      	movs	r2, #0
 8001d64:	2100      	movs	r1, #0
 8001d66:	4809      	ldr	r0, [pc, #36]	@ (8001d8c <set_duty_cycle+0xf4>)
 8001d68:	f000 fa56 	bl	8002218 <pwm_set_duty_cycle>
                    break;
 8001d6c:	e000      	b.n	8001d70 <set_duty_cycle+0xd8>
                    break;
 8001d6e:	bf00      	nop
            break;
 8001d70:	bf00      	nop
    }
    HAL_GPIO_WritePin(DRV8833_EN_GPIO_Port, DRV8833_EN_Pin, GPIO_PIN_SET);
 8001d72:	2201      	movs	r2, #1
 8001d74:	2104      	movs	r1, #4
 8001d76:	4806      	ldr	r0, [pc, #24]	@ (8001d90 <set_duty_cycle+0xf8>)
 8001d78:	f001 fb6a 	bl	8003450 <HAL_GPIO_WritePin>
}
 8001d7c:	bf00      	nop
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40014400 	.word	0x40014400
 8001d88:	40000400 	.word	0x40000400
 8001d8c:	40001c00 	.word	0x40001c00
 8001d90:	40020400 	.word	0x40020400

08001d94 <MX_USART2_UART_Init>:

extern UART_HandleTypeDef huart2;
static bool logger_initialised = false;

static void MX_USART2_UART_Init(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 8001d98:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd4 <MX_USART2_UART_Init+0x40>)
 8001d9a:	4a0f      	ldr	r2, [pc, #60]	@ (8001dd8 <MX_USART2_UART_Init+0x44>)
 8001d9c:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8001d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd4 <MX_USART2_UART_Init+0x40>)
 8001da0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001da4:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001da6:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd4 <MX_USART2_UART_Init+0x40>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8001dac:	4b09      	ldr	r3, [pc, #36]	@ (8001dd4 <MX_USART2_UART_Init+0x40>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8001db2:	4b08      	ldr	r3, [pc, #32]	@ (8001dd4 <MX_USART2_UART_Init+0x40>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8001db8:	4b06      	ldr	r3, [pc, #24]	@ (8001dd4 <MX_USART2_UART_Init+0x40>)
 8001dba:	220c      	movs	r2, #12
 8001dbc:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dbe:	4b05      	ldr	r3, [pc, #20]	@ (8001dd4 <MX_USART2_UART_Init+0x40>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dc4:	4b03      	ldr	r3, [pc, #12]	@ (8001dd4 <MX_USART2_UART_Init+0x40>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	61da      	str	r2, [r3, #28]
    // if (HAL_UART_Init(&huart2) != HAL_OK)
    // {
    //   Error_Handler();
    // }
}
 8001dca:	bf00      	nop
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	20000434 	.word	0x20000434
 8001dd8:	40004400 	.word	0x40004400

08001ddc <set_log_level>:

void set_log_level(stm32_log_level_t log_level) {
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	71fb      	strb	r3, [r7, #7]
    if (!logger_initialised) {
 8001de6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e54 <set_log_level+0x78>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	f083 0301 	eor.w	r3, r3, #1
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d004      	beq.n	8001dfe <set_log_level+0x22>
#ifdef SEMIHOSTING
        initialise_monitor_handles();
#else
        MX_USART2_UART_Init();
 8001df4:	f7ff ffce 	bl	8001d94 <MX_USART2_UART_Init>
#endif
        logger_initialised = true; 
 8001df8:	4b16      	ldr	r3, [pc, #88]	@ (8001e54 <set_log_level+0x78>)
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	701a      	strb	r2, [r3, #0]
    }
    switch(log_level) {
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	3b01      	subs	r3, #1
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	d820      	bhi.n	8001e48 <set_log_level+0x6c>
 8001e06:	a201      	add	r2, pc, #4	@ (adr r2, 8001e0c <set_log_level+0x30>)
 8001e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e0c:	08001e21 	.word	0x08001e21
 8001e10:	08001e29 	.word	0x08001e29
 8001e14:	08001e31 	.word	0x08001e31
 8001e18:	08001e39 	.word	0x08001e39
 8001e1c:	08001e41 	.word	0x08001e41
        case LOG_ERROR:
            printf(LOG_COLOR_E);
 8001e20:	480d      	ldr	r0, [pc, #52]	@ (8001e58 <set_log_level+0x7c>)
 8001e22:	f004 fc3b 	bl	800669c <iprintf>
            break;
 8001e26:	e010      	b.n	8001e4a <set_log_level+0x6e>
        case LOG_WARN:
            printf(LOG_COLOR_W);
 8001e28:	480c      	ldr	r0, [pc, #48]	@ (8001e5c <set_log_level+0x80>)
 8001e2a:	f004 fc37 	bl	800669c <iprintf>
            break;
 8001e2e:	e00c      	b.n	8001e4a <set_log_level+0x6e>
        case LOG_INFO:
            printf(LOG_COLOR_I);
 8001e30:	480b      	ldr	r0, [pc, #44]	@ (8001e60 <set_log_level+0x84>)
 8001e32:	f004 fc33 	bl	800669c <iprintf>
            break;
 8001e36:	e008      	b.n	8001e4a <set_log_level+0x6e>
        case LOG_DEBUG:
            printf(LOG_COLOR_D);
 8001e38:	480a      	ldr	r0, [pc, #40]	@ (8001e64 <set_log_level+0x88>)
 8001e3a:	f004 fc2f 	bl	800669c <iprintf>
            break;
 8001e3e:	e004      	b.n	8001e4a <set_log_level+0x6e>
        case LOG_VERBOSE:
            printf(LOG_COLOR_V);
 8001e40:	4809      	ldr	r0, [pc, #36]	@ (8001e68 <set_log_level+0x8c>)
 8001e42:	f004 fc2b 	bl	800669c <iprintf>
            break;
 8001e46:	e000      	b.n	8001e4a <set_log_level+0x6e>
        default:
            break; 
 8001e48:	bf00      	nop
    }
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000494 	.word	0x20000494
 8001e58:	080072a4 	.word	0x080072a4
 8001e5c:	080072ac 	.word	0x080072ac
 8001e60:	080072b4 	.word	0x080072b4
 8001e64:	080072bc 	.word	0x080072bc
 8001e68:	080072c4 	.word	0x080072c4

08001e6c <MPU6500_OnActivate>:
// TODO: Remove this buffer, instead return
static uint8_t _buffer[14];
// static uint8_t _mag_adjust[3];

__weak void MPU6500_OnActivate()
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
}
 8001e70:	bf00      	nop
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
	...

08001e7c <MPU6500_Activate>:

static inline void MPU6500_Activate()
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
    MPU6500_OnActivate();
 8001e80:	f7ff fff4 	bl	8001e6c <MPU6500_OnActivate>
    HAL_GPIO_WritePin(MPU6500_CS_GPIO, MPU6500_CS_PIN, GPIO_PIN_RESET);
 8001e84:	2200      	movs	r2, #0
 8001e86:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e8a:	4802      	ldr	r0, [pc, #8]	@ (8001e94 <MPU6500_Activate+0x18>)
 8001e8c:	f001 fae0 	bl	8003450 <HAL_GPIO_WritePin>
}
 8001e90:	bf00      	nop
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40020000 	.word	0x40020000

08001e98 <MPU6500_Deactivate>:

static inline void MPU6500_Deactivate()
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MPU6500_CS_GPIO, MPU6500_CS_PIN, GPIO_PIN_SET);
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ea2:	4802      	ldr	r0, [pc, #8]	@ (8001eac <MPU6500_Deactivate+0x14>)
 8001ea4:	f001 fad4 	bl	8003450 <HAL_GPIO_WritePin>
}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40020000 	.word	0x40020000

08001eb0 <SPIx_WriteRead>:

uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af02      	add	r7, sp, #8
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	71fb      	strb	r3, [r7, #7]
    uint8_t receivedbyte = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	73fb      	strb	r3, [r7, #15]
    if (HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)&Byte, (uint8_t *)&receivedbyte, 1, 0x1000) != HAL_OK)
 8001ebe:	f107 020f 	add.w	r2, r7, #15
 8001ec2:	1df9      	adds	r1, r7, #7
 8001ec4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	2301      	movs	r3, #1
 8001ecc:	4806      	ldr	r0, [pc, #24]	@ (8001ee8 <SPIx_WriteRead+0x38>)
 8001ece:	f002 fb8d 	bl	80045ec <HAL_SPI_TransmitReceive>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <SPIx_WriteRead+0x2c>
    {
        return -1;
 8001ed8:	23ff      	movs	r3, #255	@ 0xff
 8001eda:	e000      	b.n	8001ede <SPIx_WriteRead+0x2e>
    }
    else
    {
    }
    return receivedbyte;
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20000228 	.word	0x20000228

08001eec <MPU_SPI_Write>:

void MPU_SPI_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	70fb      	strb	r3, [r7, #3]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	803b      	strh	r3, [r7, #0]
    MPU6500_Activate();
 8001efc:	f7ff ffbe 	bl	8001e7c <MPU6500_Activate>
    SPIx_WriteRead(WriteAddr);
 8001f00:	78fb      	ldrb	r3, [r7, #3]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff ffd4 	bl	8001eb0 <SPIx_WriteRead>
    while (NumByteToWrite >= 0x01)
 8001f08:	e00a      	b.n	8001f20 <MPU_SPI_Write+0x34>
    {
        SPIx_WriteRead(*pBuffer);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff ffce 	bl	8001eb0 <SPIx_WriteRead>
        NumByteToWrite--;
 8001f14:	883b      	ldrh	r3, [r7, #0]
 8001f16:	3b01      	subs	r3, #1
 8001f18:	803b      	strh	r3, [r7, #0]
        pBuffer++;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	607b      	str	r3, [r7, #4]
    while (NumByteToWrite >= 0x01)
 8001f20:	883b      	ldrh	r3, [r7, #0]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1f1      	bne.n	8001f0a <MPU_SPI_Write+0x1e>
    }
    MPU6500_Deactivate();
 8001f26:	f7ff ffb7 	bl	8001e98 <MPU6500_Deactivate>
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <MPU_SPI_Read>:

void MPU_SPI_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	70fb      	strb	r3, [r7, #3]
 8001f40:	4613      	mov	r3, r2
 8001f42:	803b      	strh	r3, [r7, #0]
    MPU6500_Activate();
 8001f44:	f7ff ff9a 	bl	8001e7c <MPU6500_Activate>
    uint8_t data = ReadAddr | READWRITE_CMD;
 8001f48:	2280      	movs	r2, #128	@ 0x80
 8001f4a:	78fb      	ldrb	r3, [r7, #3]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	73fb      	strb	r3, [r7, #15]
    HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 8001f52:	f107 010f 	add.w	r1, r7, #15
 8001f56:	f04f 33ff 	mov.w	r3, #4294967295
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	4807      	ldr	r0, [pc, #28]	@ (8001f7c <MPU_SPI_Read+0x48>)
 8001f5e:	f002 f8e8 	bl	8004132 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, pBuffer, NumByteToRead, HAL_MAX_DELAY);
 8001f62:	883a      	ldrh	r2, [r7, #0]
 8001f64:	f04f 33ff 	mov.w	r3, #4294967295
 8001f68:	6879      	ldr	r1, [r7, #4]
 8001f6a:	4804      	ldr	r0, [pc, #16]	@ (8001f7c <MPU_SPI_Read+0x48>)
 8001f6c:	f002 fa25 	bl	80043ba <HAL_SPI_Receive>
    MPU6500_Deactivate();
 8001f70:	f7ff ff92 	bl	8001e98 <MPU6500_Deactivate>
}
 8001f74:	bf00      	nop
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	20000228 	.word	0x20000228

08001f80 <mpu6500_write_register>:

/* writes a byte to MPU6500 register given a register address and data */
void mpu6500_write_register(uint8_t subAddress, uint8_t data)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	460a      	mov	r2, r1
 8001f8a:	71fb      	strb	r3, [r7, #7]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	71bb      	strb	r3, [r7, #6]
    MPU_SPI_Write(&data, subAddress, 1);
 8001f90:	79f9      	ldrb	r1, [r7, #7]
 8001f92:	1dbb      	adds	r3, r7, #6
 8001f94:	2201      	movs	r2, #1
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff ffa8 	bl	8001eec <MPU_SPI_Write>
    HAL_Delay(10);
 8001f9c:	200a      	movs	r0, #10
 8001f9e:	f000 fa69 	bl	8002474 <HAL_Delay>
}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <mpu6500_read_registers>:

/* reads registers from MPU6500 given a starting register address, number of bytes, and a pointer to store data */
void mpu6500_read_registers(uint8_t subAddress, uint8_t count, uint8_t *dest)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	603a      	str	r2, [r7, #0]
 8001fb4:	71fb      	strb	r3, [r7, #7]
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	71bb      	strb	r3, [r7, #6]
    MPU_SPI_Read(dest, subAddress, count);
 8001fba:	79bb      	ldrb	r3, [r7, #6]
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	79fb      	ldrb	r3, [r7, #7]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	6838      	ldr	r0, [r7, #0]
 8001fc4:	f7ff ffb6 	bl	8001f34 <MPU_SPI_Read>
}
 8001fc8:	bf00      	nop
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <whoAmI>:

/* gets the MPU6500 WHO_AM_I register value, expected to be 0x71 */
static uint8_t whoAmI()
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
    uint8_t data;
    // read the WHO AM I register
    mpu6500_read_registers(WHO_AM_I, 1, &data);
 8001fd6:	2075      	movs	r0, #117	@ 0x75
 8001fd8:	1dfb      	adds	r3, r7, #7
 8001fda:	461a      	mov	r2, r3
 8001fdc:	2101      	movs	r1, #1
 8001fde:	f7ff ffe4 	bl	8001faa <mpu6500_read_registers>

    // return the register value
    return data;
 8001fe2:	79fb      	ldrb	r3, [r7, #7]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <mpu6500_init>:

/* starts communication with the MP6500 */
HAL_StatusTypeDef mpu6500_init() //Careful with this, don't use it since Im p sure other things cover it
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b088      	sub	sp, #32
 8001ff0:	af02      	add	r7, sp, #8
    /* Initialising the GPIO of Chip select */
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff2:	463b      	mov	r3, r7
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	611a      	str	r2, [r3, #16]
    HAL_StatusTypeDef err = HAL_SPI_Init(&hspi1);
    HAL_ERROR_CHECK(err == HAL_OK, "Failed to initialise the SPI Driver", err);
    */

    // select clock source to gyro
    mpu6500_write_register(PWR_MGMNT_1, 0x1);
 8002000:	236b      	movs	r3, #107	@ 0x6b
 8002002:	2101      	movs	r1, #1
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff ffbb 	bl	8001f80 <mpu6500_write_register>
    // enable I2C master mode
    mpu6500_write_register(USER_CTRL, I2C_MST_EN);
 800200a:	236a      	movs	r3, #106	@ 0x6a
 800200c:	2220      	movs	r2, #32
 800200e:	4611      	mov	r1, r2
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff ffb5 	bl	8001f80 <mpu6500_write_register>
    // set the I2C bus speed to 400 kHz
    mpu6500_write_register(I2C_MST_CTRL, I2C_MST_CLK);
 8002016:	2324      	movs	r3, #36	@ 0x24
 8002018:	220d      	movs	r2, #13
 800201a:	4611      	mov	r1, r2
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff ffaf 	bl	8001f80 <mpu6500_write_register>

    // reset the MPU6500
    mpu6500_write_register(PWR_MGMNT_1, PWR_RESET);
 8002022:	236b      	movs	r3, #107	@ 0x6b
 8002024:	2280      	movs	r2, #128	@ 0x80
 8002026:	4611      	mov	r1, r2
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff ffa9 	bl	8001f80 <mpu6500_write_register>
    // wait for MPU-6500 to come back up
    HAL_Delay(10);
 800202e:	200a      	movs	r0, #10
 8002030:	f000 fa20 	bl	8002474 <HAL_Delay>
    
    // select clock source to gyro
    mpu6500_write_register(PWR_MGMNT_1, CLOCK_SEL_PLL);
 8002034:	236b      	movs	r3, #107	@ 0x6b
 8002036:	2201      	movs	r2, #1
 8002038:	4611      	mov	r1, r2
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff ffa0 	bl	8001f80 <mpu6500_write_register>

    // check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
    uint8_t who = 0;
 8002040:	2300      	movs	r3, #0
 8002042:	75fb      	strb	r3, [r7, #23]
    who = whoAmI();
 8002044:	f7ff ffc4 	bl	8001fd0 <whoAmI>
 8002048:	4603      	mov	r3, r0
 800204a:	75fb      	strb	r3, [r7, #23]
    HAL_ERROR_CHECK(who == 0x70, "Unable to verify the address of whoami register", HAL_ERROR);
 800204c:	7dfb      	ldrb	r3, [r7, #23]
 800204e:	2b70      	cmp	r3, #112	@ 0x70
 8002050:	d013      	beq.n	800207a <mpu6500_init+0x8e>
 8002052:	2001      	movs	r0, #1
 8002054:	f7ff fec2 	bl	8001ddc <set_log_level>
 8002058:	f000 fa00 	bl	800245c <HAL_GetTick>
 800205c:	4601      	mov	r1, r0
 800205e:	4b24      	ldr	r3, [pc, #144]	@ (80020f0 <mpu6500_init+0x104>)
 8002060:	9301      	str	r3, [sp, #4]
 8002062:	2387      	movs	r3, #135	@ 0x87
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	4b23      	ldr	r3, [pc, #140]	@ (80020f4 <mpu6500_init+0x108>)
 8002068:	4a23      	ldr	r2, [pc, #140]	@ (80020f8 <mpu6500_init+0x10c>)
 800206a:	4824      	ldr	r0, [pc, #144]	@ (80020fc <mpu6500_init+0x110>)
 800206c:	f004 fb16 	bl	800669c <iprintf>
 8002070:	200a      	movs	r0, #10
 8002072:	f004 fb25 	bl	80066c0 <putchar>
 8002076:	2301      	movs	r3, #1
 8002078:	e035      	b.n	80020e6 <mpu6500_init+0xfa>

    // enable accelerometer and gyro
    mpu6500_write_register(PWR_MGMNT_2, SEN_ENABLE);
 800207a:	236c      	movs	r3, #108	@ 0x6c
 800207c:	2200      	movs	r2, #0
 800207e:	4611      	mov	r1, r2
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff ff7d 	bl	8001f80 <mpu6500_write_register>

    // setting accel range to 16G as default
    mpu6500_write_register(ACCEL_CONFIG, ACCEL_FS_SEL_16G);
 8002086:	231c      	movs	r3, #28
 8002088:	2218      	movs	r2, #24
 800208a:	4611      	mov	r1, r2
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff ff77 	bl	8001f80 <mpu6500_write_register>

    // setting the gyro range to 2000DPS as default
    mpu6500_write_register(GYRO_CONFIG, GYRO_FS_SEL_250DPS);
 8002092:	231b      	movs	r3, #27
 8002094:	2200      	movs	r2, #0
 8002096:	4611      	mov	r1, r2
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff ff71 	bl	8001f80 <mpu6500_write_register>

    // setting bandwidth to 184Hz as default
    mpu6500_write_register(ACCEL_CONFIG2, DLPF_184);
 800209e:	231d      	movs	r3, #29
 80020a0:	2201      	movs	r2, #1
 80020a2:	4611      	mov	r1, r2
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff ff6b 	bl	8001f80 <mpu6500_write_register>

    // setting gyro bandwidth to 184Hz
    mpu6500_write_register(CONFIG, DLPF_184);
 80020aa:	231a      	movs	r3, #26
 80020ac:	2201      	movs	r2, #1
 80020ae:	4611      	mov	r1, r2
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff ff65 	bl	8001f80 <mpu6500_write_register>

    // setting the sample rate divider to 0 as default
    mpu6500_write_register(SMPDIV, 0x00);
 80020b6:	2319      	movs	r3, #25
 80020b8:	2100      	movs	r1, #0
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff ff60 	bl	8001f80 <mpu6500_write_register>

    // enable I2C master mode
    mpu6500_write_register(USER_CTRL, I2C_MST_EN);
 80020c0:	236a      	movs	r3, #106	@ 0x6a
 80020c2:	2220      	movs	r2, #32
 80020c4:	4611      	mov	r1, r2
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff ff5a 	bl	8001f80 <mpu6500_write_register>

    // set the I2C bus speed to 400 kHz
    mpu6500_write_register(I2C_MST_CTRL, I2C_MST_CLK);
 80020cc:	2324      	movs	r3, #36	@ 0x24
 80020ce:	220d      	movs	r2, #13
 80020d0:	4611      	mov	r1, r2
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff ff54 	bl	8001f80 <mpu6500_write_register>

    // select clock source to gyro
    mpu6500_write_register(PWR_MGMNT_1, CLOCK_SEL_PLL);
 80020d8:	236b      	movs	r3, #107	@ 0x6b
 80020da:	2201      	movs	r2, #1
 80020dc:	4611      	mov	r1, r2
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff ff4e 	bl	8001f80 <mpu6500_write_register>

    // successful init, return 0
    return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	080072e8 	.word	0x080072e8
 80020f4:	08007330 	.word	0x08007330
 80020f8:	080072cc 	.word	0x080072cc
 80020fc:	080072d4 	.word	0x080072d4

08002100 <mpu6500_get_data>:
    mpu6500_write_register(ACCEL_CONFIG2, bandwidth);
    mpu6500_write_register(CONFIG, bandwidth);
}
/* read the data, each argiment should point to a array for x, y, and x */
void mpu6500_get_data(int16_t *AccData, int16_t *GyroData)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
    // grab the data from the MPU6500
    mpu6500_read_registers(ACCEL_OUT, 14, _buffer);
 800210a:	233b      	movs	r3, #59	@ 0x3b
 800210c:	4a27      	ldr	r2, [pc, #156]	@ (80021ac <mpu6500_get_data+0xac>)
 800210e:	210e      	movs	r1, #14
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ff4a 	bl	8001faa <mpu6500_read_registers>

    // combine into 16 bit values
    AccData[0] = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 8002116:	4b25      	ldr	r3, [pc, #148]	@ (80021ac <mpu6500_get_data+0xac>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	021b      	lsls	r3, r3, #8
 800211c:	b21a      	sxth	r2, r3
 800211e:	4b23      	ldr	r3, [pc, #140]	@ (80021ac <mpu6500_get_data+0xac>)
 8002120:	785b      	ldrb	r3, [r3, #1]
 8002122:	b21b      	sxth	r3, r3
 8002124:	4313      	orrs	r3, r2
 8002126:	b21a      	sxth	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	801a      	strh	r2, [r3, #0]
    AccData[1] = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 800212c:	4b1f      	ldr	r3, [pc, #124]	@ (80021ac <mpu6500_get_data+0xac>)
 800212e:	789b      	ldrb	r3, [r3, #2]
 8002130:	021b      	lsls	r3, r3, #8
 8002132:	b219      	sxth	r1, r3
 8002134:	4b1d      	ldr	r3, [pc, #116]	@ (80021ac <mpu6500_get_data+0xac>)
 8002136:	78db      	ldrb	r3, [r3, #3]
 8002138:	b21a      	sxth	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	3302      	adds	r3, #2
 800213e:	430a      	orrs	r2, r1
 8002140:	b212      	sxth	r2, r2
 8002142:	801a      	strh	r2, [r3, #0]
    AccData[2] = (((int16_t)_buffer[4]) << 8) | _buffer[5];
 8002144:	4b19      	ldr	r3, [pc, #100]	@ (80021ac <mpu6500_get_data+0xac>)
 8002146:	791b      	ldrb	r3, [r3, #4]
 8002148:	021b      	lsls	r3, r3, #8
 800214a:	b219      	sxth	r1, r3
 800214c:	4b17      	ldr	r3, [pc, #92]	@ (80021ac <mpu6500_get_data+0xac>)
 800214e:	795b      	ldrb	r3, [r3, #5]
 8002150:	b21a      	sxth	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	3304      	adds	r3, #4
 8002156:	430a      	orrs	r2, r1
 8002158:	b212      	sxth	r2, r2
 800215a:	801a      	strh	r2, [r3, #0]
    GyroData[0] = (((int16_t)_buffer[8]) << 8) | _buffer[9];
 800215c:	4b13      	ldr	r3, [pc, #76]	@ (80021ac <mpu6500_get_data+0xac>)
 800215e:	7a1b      	ldrb	r3, [r3, #8]
 8002160:	021b      	lsls	r3, r3, #8
 8002162:	b21a      	sxth	r2, r3
 8002164:	4b11      	ldr	r3, [pc, #68]	@ (80021ac <mpu6500_get_data+0xac>)
 8002166:	7a5b      	ldrb	r3, [r3, #9]
 8002168:	b21b      	sxth	r3, r3
 800216a:	4313      	orrs	r3, r2
 800216c:	b21a      	sxth	r2, r3
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	801a      	strh	r2, [r3, #0]
    GyroData[1] = (((int16_t)_buffer[10]) << 8) | _buffer[11];
 8002172:	4b0e      	ldr	r3, [pc, #56]	@ (80021ac <mpu6500_get_data+0xac>)
 8002174:	7a9b      	ldrb	r3, [r3, #10]
 8002176:	021b      	lsls	r3, r3, #8
 8002178:	b219      	sxth	r1, r3
 800217a:	4b0c      	ldr	r3, [pc, #48]	@ (80021ac <mpu6500_get_data+0xac>)
 800217c:	7adb      	ldrb	r3, [r3, #11]
 800217e:	b21a      	sxth	r2, r3
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	3302      	adds	r3, #2
 8002184:	430a      	orrs	r2, r1
 8002186:	b212      	sxth	r2, r2
 8002188:	801a      	strh	r2, [r3, #0]
    GyroData[2] = (((int16_t)_buffer[12]) << 8) | _buffer[13];
 800218a:	4b08      	ldr	r3, [pc, #32]	@ (80021ac <mpu6500_get_data+0xac>)
 800218c:	7b1b      	ldrb	r3, [r3, #12]
 800218e:	021b      	lsls	r3, r3, #8
 8002190:	b219      	sxth	r1, r3
 8002192:	4b06      	ldr	r3, [pc, #24]	@ (80021ac <mpu6500_get_data+0xac>)
 8002194:	7b5b      	ldrb	r3, [r3, #13]
 8002196:	b21a      	sxth	r2, r3
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	3304      	adds	r3, #4
 800219c:	430a      	orrs	r2, r1
 800219e:	b212      	sxth	r2, r2
 80021a0:	801a      	strh	r2, [r3, #0]
}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	20000498 	.word	0x20000498

080021b0 <mpu6500_get_gyro>:
void mpu6500_get_gyro(int16_t *GyroData) {
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  // grab the data from the MPU6500
  mpu6500_read_registers(ACCEL_OUT, 14, _buffer);
 80021b8:	233b      	movs	r3, #59	@ 0x3b
 80021ba:	4a16      	ldr	r2, [pc, #88]	@ (8002214 <mpu6500_get_gyro+0x64>)
 80021bc:	210e      	movs	r1, #14
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff fef3 	bl	8001faa <mpu6500_read_registers>
  GyroData[0] = (((int16_t)_buffer[8]) << 8) | _buffer[9];
 80021c4:	4b13      	ldr	r3, [pc, #76]	@ (8002214 <mpu6500_get_gyro+0x64>)
 80021c6:	7a1b      	ldrb	r3, [r3, #8]
 80021c8:	021b      	lsls	r3, r3, #8
 80021ca:	b21a      	sxth	r2, r3
 80021cc:	4b11      	ldr	r3, [pc, #68]	@ (8002214 <mpu6500_get_gyro+0x64>)
 80021ce:	7a5b      	ldrb	r3, [r3, #9]
 80021d0:	b21b      	sxth	r3, r3
 80021d2:	4313      	orrs	r3, r2
 80021d4:	b21a      	sxth	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	801a      	strh	r2, [r3, #0]
  GyroData[1] = (((int16_t)_buffer[10]) << 8) | _buffer[11];
 80021da:	4b0e      	ldr	r3, [pc, #56]	@ (8002214 <mpu6500_get_gyro+0x64>)
 80021dc:	7a9b      	ldrb	r3, [r3, #10]
 80021de:	021b      	lsls	r3, r3, #8
 80021e0:	b219      	sxth	r1, r3
 80021e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002214 <mpu6500_get_gyro+0x64>)
 80021e4:	7adb      	ldrb	r3, [r3, #11]
 80021e6:	b21a      	sxth	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3302      	adds	r3, #2
 80021ec:	430a      	orrs	r2, r1
 80021ee:	b212      	sxth	r2, r2
 80021f0:	801a      	strh	r2, [r3, #0]
  GyroData[2] = (((int16_t)_buffer[12]) << 8) | _buffer[13];
 80021f2:	4b08      	ldr	r3, [pc, #32]	@ (8002214 <mpu6500_get_gyro+0x64>)
 80021f4:	7b1b      	ldrb	r3, [r3, #12]
 80021f6:	021b      	lsls	r3, r3, #8
 80021f8:	b219      	sxth	r1, r3
 80021fa:	4b06      	ldr	r3, [pc, #24]	@ (8002214 <mpu6500_get_gyro+0x64>)
 80021fc:	7b5b      	ldrb	r3, [r3, #13]
 80021fe:	b21a      	sxth	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3304      	adds	r3, #4
 8002204:	430a      	orrs	r2, r1
 8002206:	b212      	sxth	r2, r2
 8002208:	801a      	strh	r2, [r3, #0]
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20000498 	.word	0x20000498

08002218 <pwm_set_duty_cycle>:
    err |= MX_TIM13_Init();
    return err;
}

void pwm_set_duty_cycle(TIM_TypeDef *instance, uint32_t channel, uint8_t duty_cycle)
{
 8002218:	b480      	push	{r7}
 800221a:	b08b      	sub	sp, #44	@ 0x2c
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	4613      	mov	r3, r2
 8002224:	71fb      	strb	r3, [r7, #7]
    duty_cycle = duty_cycle > 100 ? 100 : (duty_cycle < 0) ? 0 : duty_cycle;
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	2b64      	cmp	r3, #100	@ 0x64
 800222a:	bf28      	it	cs
 800222c:	2364      	movcs	r3, #100	@ 0x64
 800222e:	71fb      	strb	r3, [r7, #7]

    if (instance == TIM3) {
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4a64      	ldr	r2, [pc, #400]	@ (80023c4 <pwm_set_duty_cycle+0x1ac>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d151      	bne.n	80022dc <pwm_set_duty_cycle+0xc4>
        unsigned int ARR = __HAL_TIM_GET_AUTORELOAD(&htim3);
 8002238:	4b63      	ldr	r3, [pc, #396]	@ (80023c8 <pwm_set_duty_cycle+0x1b0>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800223e:	617b      	str	r3, [r7, #20]
        switch (channel)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	2b0c      	cmp	r3, #12
 8002244:	f200 80b1 	bhi.w	80023aa <pwm_set_duty_cycle+0x192>
 8002248:	a201      	add	r2, pc, #4	@ (adr r2, 8002250 <pwm_set_duty_cycle+0x38>)
 800224a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800224e:	bf00      	nop
 8002250:	08002285 	.word	0x08002285
 8002254:	080023ab 	.word	0x080023ab
 8002258:	080023ab 	.word	0x080023ab
 800225c:	080023ab 	.word	0x080023ab
 8002260:	0800229b 	.word	0x0800229b
 8002264:	080023ab 	.word	0x080023ab
 8002268:	080023ab 	.word	0x080023ab
 800226c:	080023ab 	.word	0x080023ab
 8002270:	080022b1 	.word	0x080022b1
 8002274:	080023ab 	.word	0x080023ab
 8002278:	080023ab 	.word	0x080023ab
 800227c:	080023ab 	.word	0x080023ab
 8002280:	080022c7 	.word	0x080022c7
        {
            case TIM_CHANNEL_1:
                TIM3->CCR1 = (uint32_t)((ARR * duty_cycle) / 100);
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	fb02 f303 	mul.w	r3, r2, r3
 800228c:	4a4d      	ldr	r2, [pc, #308]	@ (80023c4 <pwm_set_duty_cycle+0x1ac>)
 800228e:	494f      	ldr	r1, [pc, #316]	@ (80023cc <pwm_set_duty_cycle+0x1b4>)
 8002290:	fba1 1303 	umull	r1, r3, r1, r3
 8002294:	095b      	lsrs	r3, r3, #5
 8002296:	6353      	str	r3, [r2, #52]	@ 0x34
                break;
 8002298:	e08e      	b.n	80023b8 <pwm_set_duty_cycle+0x1a0>
            case TIM_CHANNEL_2:
                TIM3->CCR2 = (uint32_t)((ARR * duty_cycle) / 100);
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	fb02 f303 	mul.w	r3, r2, r3
 80022a2:	4a48      	ldr	r2, [pc, #288]	@ (80023c4 <pwm_set_duty_cycle+0x1ac>)
 80022a4:	4949      	ldr	r1, [pc, #292]	@ (80023cc <pwm_set_duty_cycle+0x1b4>)
 80022a6:	fba1 1303 	umull	r1, r3, r1, r3
 80022aa:	095b      	lsrs	r3, r3, #5
 80022ac:	6393      	str	r3, [r2, #56]	@ 0x38
                break;
 80022ae:	e083      	b.n	80023b8 <pwm_set_duty_cycle+0x1a0>
            case TIM_CHANNEL_3:
                TIM3->CCR3 = (uint32_t)((ARR * duty_cycle) / 100);
 80022b0:	79fb      	ldrb	r3, [r7, #7]
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	fb02 f303 	mul.w	r3, r2, r3
 80022b8:	4a42      	ldr	r2, [pc, #264]	@ (80023c4 <pwm_set_duty_cycle+0x1ac>)
 80022ba:	4944      	ldr	r1, [pc, #272]	@ (80023cc <pwm_set_duty_cycle+0x1b4>)
 80022bc:	fba1 1303 	umull	r1, r3, r1, r3
 80022c0:	095b      	lsrs	r3, r3, #5
 80022c2:	63d3      	str	r3, [r2, #60]	@ 0x3c
                break;
 80022c4:	e078      	b.n	80023b8 <pwm_set_duty_cycle+0x1a0>
            case TIM_CHANNEL_4:
                TIM3->CCR4 = (uint32_t)((ARR * duty_cycle) / 100);
 80022c6:	79fb      	ldrb	r3, [r7, #7]
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	fb02 f303 	mul.w	r3, r2, r3
 80022ce:	4a3d      	ldr	r2, [pc, #244]	@ (80023c4 <pwm_set_duty_cycle+0x1ac>)
 80022d0:	493e      	ldr	r1, [pc, #248]	@ (80023cc <pwm_set_duty_cycle+0x1b4>)
 80022d2:	fba1 1303 	umull	r1, r3, r1, r3
 80022d6:	095b      	lsrs	r3, r3, #5
 80022d8:	6413      	str	r3, [r2, #64]	@ 0x40
                break;
 80022da:	e06d      	b.n	80023b8 <pwm_set_duty_cycle+0x1a0>
            default:
                break;
        }
    }
    else if (instance == TIM10) {
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	4a3c      	ldr	r2, [pc, #240]	@ (80023d0 <pwm_set_duty_cycle+0x1b8>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d111      	bne.n	8002308 <pwm_set_duty_cycle+0xf0>
        unsigned int ARR = __HAL_TIM_GET_AUTORELOAD(&htim10);
 80022e4:	4b3b      	ldr	r3, [pc, #236]	@ (80023d4 <pwm_set_duty_cycle+0x1bc>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ea:	61bb      	str	r3, [r7, #24]
        switch (channel)
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d15d      	bne.n	80023ae <pwm_set_duty_cycle+0x196>
        {
            case TIM_CHANNEL_1:
                TIM10->CCR1 = (uint32_t)((ARR * duty_cycle) / 100);
 80022f2:	79fb      	ldrb	r3, [r7, #7]
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	fb02 f303 	mul.w	r3, r2, r3
 80022fa:	4a35      	ldr	r2, [pc, #212]	@ (80023d0 <pwm_set_duty_cycle+0x1b8>)
 80022fc:	4933      	ldr	r1, [pc, #204]	@ (80023cc <pwm_set_duty_cycle+0x1b4>)
 80022fe:	fba1 1303 	umull	r1, r3, r1, r3
 8002302:	095b      	lsrs	r3, r3, #5
 8002304:	6353      	str	r3, [r2, #52]	@ 0x34
                break;
 8002306:	e057      	b.n	80023b8 <pwm_set_duty_cycle+0x1a0>
            default:
                break;
        }
    }
    else if (instance == TIM11) {
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4a33      	ldr	r2, [pc, #204]	@ (80023d8 <pwm_set_duty_cycle+0x1c0>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d111      	bne.n	8002334 <pwm_set_duty_cycle+0x11c>

        unsigned int ARR = __HAL_TIM_GET_AUTORELOAD(&htim11);
 8002310:	4b32      	ldr	r3, [pc, #200]	@ (80023dc <pwm_set_duty_cycle+0x1c4>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002316:	61fb      	str	r3, [r7, #28]
        switch (channel)
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d149      	bne.n	80023b2 <pwm_set_duty_cycle+0x19a>
        {
            case TIM_CHANNEL_1:
                TIM11->CCR1 = (uint32_t)((ARR * duty_cycle) / 100);
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	69fa      	ldr	r2, [r7, #28]
 8002322:	fb02 f303 	mul.w	r3, r2, r3
 8002326:	4a2c      	ldr	r2, [pc, #176]	@ (80023d8 <pwm_set_duty_cycle+0x1c0>)
 8002328:	4928      	ldr	r1, [pc, #160]	@ (80023cc <pwm_set_duty_cycle+0x1b4>)
 800232a:	fba1 1303 	umull	r1, r3, r1, r3
 800232e:	095b      	lsrs	r3, r3, #5
 8002330:	6353      	str	r3, [r2, #52]	@ 0x34
                break;
 8002332:	e041      	b.n	80023b8 <pwm_set_duty_cycle+0x1a0>
            default:
                break;
        }
    }
    else if (instance == TIM12) {
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4a2a      	ldr	r2, [pc, #168]	@ (80023e0 <pwm_set_duty_cycle+0x1c8>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d120      	bne.n	800237e <pwm_set_duty_cycle+0x166>
        unsigned int ARR = __HAL_TIM_GET_AUTORELOAD(&htim12);
 800233c:	4b29      	ldr	r3, [pc, #164]	@ (80023e4 <pwm_set_duty_cycle+0x1cc>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002342:	623b      	str	r3, [r7, #32]
        switch (channel)
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <pwm_set_duty_cycle+0x13a>
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	2b04      	cmp	r3, #4
 800234e:	d00b      	beq.n	8002368 <pwm_set_duty_cycle+0x150>
                break;
            case TIM_CHANNEL_2:
                TIM12->CCR2 = (uint32_t)((ARR * duty_cycle) / 100);
                break;
            default:
                break;
 8002350:	e032      	b.n	80023b8 <pwm_set_duty_cycle+0x1a0>
                TIM12->CCR1 = (uint32_t)((ARR * duty_cycle) / 100);
 8002352:	79fb      	ldrb	r3, [r7, #7]
 8002354:	6a3a      	ldr	r2, [r7, #32]
 8002356:	fb02 f303 	mul.w	r3, r2, r3
 800235a:	4a21      	ldr	r2, [pc, #132]	@ (80023e0 <pwm_set_duty_cycle+0x1c8>)
 800235c:	491b      	ldr	r1, [pc, #108]	@ (80023cc <pwm_set_duty_cycle+0x1b4>)
 800235e:	fba1 1303 	umull	r1, r3, r1, r3
 8002362:	095b      	lsrs	r3, r3, #5
 8002364:	6353      	str	r3, [r2, #52]	@ 0x34
                break;
 8002366:	e027      	b.n	80023b8 <pwm_set_duty_cycle+0x1a0>
                TIM12->CCR2 = (uint32_t)((ARR * duty_cycle) / 100);
 8002368:	79fb      	ldrb	r3, [r7, #7]
 800236a:	6a3a      	ldr	r2, [r7, #32]
 800236c:	fb02 f303 	mul.w	r3, r2, r3
 8002370:	4a1b      	ldr	r2, [pc, #108]	@ (80023e0 <pwm_set_duty_cycle+0x1c8>)
 8002372:	4916      	ldr	r1, [pc, #88]	@ (80023cc <pwm_set_duty_cycle+0x1b4>)
 8002374:	fba1 1303 	umull	r1, r3, r1, r3
 8002378:	095b      	lsrs	r3, r3, #5
 800237a:	6393      	str	r3, [r2, #56]	@ 0x38
                break;
 800237c:	e01c      	b.n	80023b8 <pwm_set_duty_cycle+0x1a0>
        }
    }
    else if (instance == TIM13) {
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	4a19      	ldr	r2, [pc, #100]	@ (80023e8 <pwm_set_duty_cycle+0x1d0>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d118      	bne.n	80023b8 <pwm_set_duty_cycle+0x1a0>

        unsigned int ARR = __HAL_TIM_GET_AUTORELOAD(&htim13);
 8002386:	4b19      	ldr	r3, [pc, #100]	@ (80023ec <pwm_set_duty_cycle+0x1d4>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800238c:	627b      	str	r3, [r7, #36]	@ 0x24
        switch (channel)
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d110      	bne.n	80023b6 <pwm_set_duty_cycle+0x19e>
        {
            case TIM_CHANNEL_1:
                TIM13->CCR1 = (uint32_t)((ARR * duty_cycle) / 100);
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002398:	fb02 f303 	mul.w	r3, r2, r3
 800239c:	4a12      	ldr	r2, [pc, #72]	@ (80023e8 <pwm_set_duty_cycle+0x1d0>)
 800239e:	490b      	ldr	r1, [pc, #44]	@ (80023cc <pwm_set_duty_cycle+0x1b4>)
 80023a0:	fba1 1303 	umull	r1, r3, r1, r3
 80023a4:	095b      	lsrs	r3, r3, #5
 80023a6:	6353      	str	r3, [r2, #52]	@ 0x34
                break;
 80023a8:	e006      	b.n	80023b8 <pwm_set_duty_cycle+0x1a0>
                break;
 80023aa:	bf00      	nop
 80023ac:	e004      	b.n	80023b8 <pwm_set_duty_cycle+0x1a0>
                break;
 80023ae:	bf00      	nop
 80023b0:	e002      	b.n	80023b8 <pwm_set_duty_cycle+0x1a0>
                break;
 80023b2:	bf00      	nop
 80023b4:	e000      	b.n	80023b8 <pwm_set_duty_cycle+0x1a0>
            default:
                break;
 80023b6:	bf00      	nop
        }
    }
}
 80023b8:	bf00      	nop
 80023ba:	372c      	adds	r7, #44	@ 0x2c
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	40000400 	.word	0x40000400
 80023c8:	200002cc 	.word	0x200002cc
 80023cc:	51eb851f 	.word	0x51eb851f
 80023d0:	40014400 	.word	0x40014400
 80023d4:	20000314 	.word	0x20000314
 80023d8:	40014800 	.word	0x40014800
 80023dc:	2000035c 	.word	0x2000035c
 80023e0:	40001800 	.word	0x40001800
 80023e4:	200003a4 	.word	0x200003a4
 80023e8:	40001c00 	.word	0x40001c00
 80023ec:	200003ec 	.word	0x200003ec

080023f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002430 <HAL_Init+0x40>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002430 <HAL_Init+0x40>)
 80023fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002400:	4b0b      	ldr	r3, [pc, #44]	@ (8002430 <HAL_Init+0x40>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a0a      	ldr	r2, [pc, #40]	@ (8002430 <HAL_Init+0x40>)
 8002406:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800240a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800240c:	4b08      	ldr	r3, [pc, #32]	@ (8002430 <HAL_Init+0x40>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a07      	ldr	r2, [pc, #28]	@ (8002430 <HAL_Init+0x40>)
 8002412:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002416:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002418:	2003      	movs	r0, #3
 800241a:	f000 fb5e 	bl	8002ada <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800241e:	200f      	movs	r0, #15
 8002420:	f7fe fe1a 	bl	8001058 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002424:	f7fe fdec 	bl	8001000 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40023c00 	.word	0x40023c00

08002434 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002438:	4b06      	ldr	r3, [pc, #24]	@ (8002454 <HAL_IncTick+0x20>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	461a      	mov	r2, r3
 800243e:	4b06      	ldr	r3, [pc, #24]	@ (8002458 <HAL_IncTick+0x24>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4413      	add	r3, r2
 8002444:	4a04      	ldr	r2, [pc, #16]	@ (8002458 <HAL_IncTick+0x24>)
 8002446:	6013      	str	r3, [r2, #0]
}
 8002448:	bf00      	nop
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	20000008 	.word	0x20000008
 8002458:	200004a8 	.word	0x200004a8

0800245c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  return uwTick;
 8002460:	4b03      	ldr	r3, [pc, #12]	@ (8002470 <HAL_GetTick+0x14>)
 8002462:	681b      	ldr	r3, [r3, #0]
}
 8002464:	4618      	mov	r0, r3
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	200004a8 	.word	0x200004a8

08002474 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800247c:	f7ff ffee 	bl	800245c <HAL_GetTick>
 8002480:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800248c:	d005      	beq.n	800249a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800248e:	4b0a      	ldr	r3, [pc, #40]	@ (80024b8 <HAL_Delay+0x44>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	461a      	mov	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	4413      	add	r3, r2
 8002498:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800249a:	bf00      	nop
 800249c:	f7ff ffde 	bl	800245c <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d8f7      	bhi.n	800249c <HAL_Delay+0x28>
  {
  }
}
 80024ac:	bf00      	nop
 80024ae:	bf00      	nop
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20000008 	.word	0x20000008

080024bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024c4:	2300      	movs	r3, #0
 80024c6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e033      	b.n	800253a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d109      	bne.n	80024ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7fe f8ca 	bl	8000674 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f2:	f003 0310 	and.w	r3, r3, #16
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d118      	bne.n	800252c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002502:	f023 0302 	bic.w	r3, r3, #2
 8002506:	f043 0202 	orr.w	r2, r3, #2
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 f93a 	bl	8002788 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251e:	f023 0303 	bic.w	r3, r3, #3
 8002522:	f043 0201 	orr.w	r2, r3, #1
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	641a      	str	r2, [r3, #64]	@ 0x40
 800252a:	e001      	b.n	8002530 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002538:	7bfb      	ldrb	r3, [r7, #15]
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
	...

08002544 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800254e:	2300      	movs	r3, #0
 8002550:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002558:	2b01      	cmp	r3, #1
 800255a:	d101      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x1c>
 800255c:	2302      	movs	r3, #2
 800255e:	e105      	b.n	800276c <HAL_ADC_ConfigChannel+0x228>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b09      	cmp	r3, #9
 800256e:	d925      	bls.n	80025bc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68d9      	ldr	r1, [r3, #12]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	b29b      	uxth	r3, r3
 800257c:	461a      	mov	r2, r3
 800257e:	4613      	mov	r3, r2
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	4413      	add	r3, r2
 8002584:	3b1e      	subs	r3, #30
 8002586:	2207      	movs	r2, #7
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	43da      	mvns	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	400a      	ands	r2, r1
 8002594:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68d9      	ldr	r1, [r3, #12]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	4618      	mov	r0, r3
 80025a8:	4603      	mov	r3, r0
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	4403      	add	r3, r0
 80025ae:	3b1e      	subs	r3, #30
 80025b0:	409a      	lsls	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	60da      	str	r2, [r3, #12]
 80025ba:	e022      	b.n	8002602 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6919      	ldr	r1, [r3, #16]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	461a      	mov	r2, r3
 80025ca:	4613      	mov	r3, r2
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	4413      	add	r3, r2
 80025d0:	2207      	movs	r2, #7
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43da      	mvns	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	400a      	ands	r2, r1
 80025de:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6919      	ldr	r1, [r3, #16]
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	689a      	ldr	r2, [r3, #8]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	4618      	mov	r0, r3
 80025f2:	4603      	mov	r3, r0
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	4403      	add	r3, r0
 80025f8:	409a      	lsls	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2b06      	cmp	r3, #6
 8002608:	d824      	bhi.n	8002654 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	4613      	mov	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	3b05      	subs	r3, #5
 800261c:	221f      	movs	r2, #31
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43da      	mvns	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	400a      	ands	r2, r1
 800262a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	b29b      	uxth	r3, r3
 8002638:	4618      	mov	r0, r3
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	4613      	mov	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4413      	add	r3, r2
 8002644:	3b05      	subs	r3, #5
 8002646:	fa00 f203 	lsl.w	r2, r0, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	635a      	str	r2, [r3, #52]	@ 0x34
 8002652:	e04c      	b.n	80026ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2b0c      	cmp	r3, #12
 800265a:	d824      	bhi.n	80026a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	4613      	mov	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4413      	add	r3, r2
 800266c:	3b23      	subs	r3, #35	@ 0x23
 800266e:	221f      	movs	r2, #31
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43da      	mvns	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	400a      	ands	r2, r1
 800267c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	b29b      	uxth	r3, r3
 800268a:	4618      	mov	r0, r3
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	4613      	mov	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	3b23      	subs	r3, #35	@ 0x23
 8002698:	fa00 f203 	lsl.w	r2, r0, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80026a4:	e023      	b.n	80026ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	4613      	mov	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	3b41      	subs	r3, #65	@ 0x41
 80026b8:	221f      	movs	r2, #31
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	43da      	mvns	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	400a      	ands	r2, r1
 80026c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	4618      	mov	r0, r3
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	4613      	mov	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	4413      	add	r3, r2
 80026e0:	3b41      	subs	r3, #65	@ 0x41
 80026e2:	fa00 f203 	lsl.w	r2, r0, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	430a      	orrs	r2, r1
 80026ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026ee:	4b22      	ldr	r3, [pc, #136]	@ (8002778 <HAL_ADC_ConfigChannel+0x234>)
 80026f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a21      	ldr	r2, [pc, #132]	@ (800277c <HAL_ADC_ConfigChannel+0x238>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d109      	bne.n	8002710 <HAL_ADC_ConfigChannel+0x1cc>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2b12      	cmp	r3, #18
 8002702:	d105      	bne.n	8002710 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a19      	ldr	r2, [pc, #100]	@ (800277c <HAL_ADC_ConfigChannel+0x238>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d123      	bne.n	8002762 <HAL_ADC_ConfigChannel+0x21e>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2b10      	cmp	r3, #16
 8002720:	d003      	beq.n	800272a <HAL_ADC_ConfigChannel+0x1e6>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2b11      	cmp	r3, #17
 8002728:	d11b      	bne.n	8002762 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2b10      	cmp	r3, #16
 800273c:	d111      	bne.n	8002762 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800273e:	4b10      	ldr	r3, [pc, #64]	@ (8002780 <HAL_ADC_ConfigChannel+0x23c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a10      	ldr	r2, [pc, #64]	@ (8002784 <HAL_ADC_ConfigChannel+0x240>)
 8002744:	fba2 2303 	umull	r2, r3, r2, r3
 8002748:	0c9a      	lsrs	r2, r3, #18
 800274a:	4613      	mov	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002754:	e002      	b.n	800275c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	3b01      	subs	r3, #1
 800275a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1f9      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	40012300 	.word	0x40012300
 800277c:	40012000 	.word	0x40012000
 8002780:	20000000 	.word	0x20000000
 8002784:	431bde83 	.word	0x431bde83

08002788 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002790:	4b79      	ldr	r3, [pc, #484]	@ (8002978 <ADC_Init+0x1f0>)
 8002792:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	431a      	orrs	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6859      	ldr	r1, [r3, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	021a      	lsls	r2, r3, #8
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80027e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6859      	ldr	r1, [r3, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	430a      	orrs	r2, r1
 80027f2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002802:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6899      	ldr	r1, [r3, #8]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	430a      	orrs	r2, r1
 8002814:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800281a:	4a58      	ldr	r2, [pc, #352]	@ (800297c <ADC_Init+0x1f4>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d022      	beq.n	8002866 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800282e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6899      	ldr	r1, [r3, #8]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	430a      	orrs	r2, r1
 8002840:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002850:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6899      	ldr	r1, [r3, #8]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	430a      	orrs	r2, r1
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	e00f      	b.n	8002886 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002874:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002884:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 0202 	bic.w	r2, r2, #2
 8002894:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6899      	ldr	r1, [r3, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	7e1b      	ldrb	r3, [r3, #24]
 80028a0:	005a      	lsls	r2, r3, #1
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d01b      	beq.n	80028ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028c2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80028d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6859      	ldr	r1, [r3, #4]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028de:	3b01      	subs	r3, #1
 80028e0:	035a      	lsls	r2, r3, #13
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	605a      	str	r2, [r3, #4]
 80028ea:	e007      	b.n	80028fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028fa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800290a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	3b01      	subs	r3, #1
 8002918:	051a      	lsls	r2, r3, #20
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	430a      	orrs	r2, r1
 8002920:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002930:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6899      	ldr	r1, [r3, #8]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800293e:	025a      	lsls	r2, r3, #9
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	430a      	orrs	r2, r1
 8002946:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002956:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6899      	ldr	r1, [r3, #8]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	029a      	lsls	r2, r3, #10
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	430a      	orrs	r2, r1
 800296a:	609a      	str	r2, [r3, #8]
}
 800296c:	bf00      	nop
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	40012300 	.word	0x40012300
 800297c:	0f000001 	.word	0x0f000001

08002980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002990:	4b0c      	ldr	r3, [pc, #48]	@ (80029c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800299c:	4013      	ands	r3, r2
 800299e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80029ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029b2:	4a04      	ldr	r2, [pc, #16]	@ (80029c4 <__NVIC_SetPriorityGrouping+0x44>)
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	60d3      	str	r3, [r2, #12]
}
 80029b8:	bf00      	nop
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	e000ed00 	.word	0xe000ed00

080029c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029cc:	4b04      	ldr	r3, [pc, #16]	@ (80029e0 <__NVIC_GetPriorityGrouping+0x18>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	0a1b      	lsrs	r3, r3, #8
 80029d2:	f003 0307 	and.w	r3, r3, #7
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	db0b      	blt.n	8002a0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	f003 021f 	and.w	r2, r3, #31
 80029fc:	4907      	ldr	r1, [pc, #28]	@ (8002a1c <__NVIC_EnableIRQ+0x38>)
 80029fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a02:	095b      	lsrs	r3, r3, #5
 8002a04:	2001      	movs	r0, #1
 8002a06:	fa00 f202 	lsl.w	r2, r0, r2
 8002a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	e000e100 	.word	0xe000e100

08002a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	6039      	str	r1, [r7, #0]
 8002a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	db0a      	blt.n	8002a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	490c      	ldr	r1, [pc, #48]	@ (8002a6c <__NVIC_SetPriority+0x4c>)
 8002a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3e:	0112      	lsls	r2, r2, #4
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	440b      	add	r3, r1
 8002a44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a48:	e00a      	b.n	8002a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	4908      	ldr	r1, [pc, #32]	@ (8002a70 <__NVIC_SetPriority+0x50>)
 8002a50:	79fb      	ldrb	r3, [r7, #7]
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	3b04      	subs	r3, #4
 8002a58:	0112      	lsls	r2, r2, #4
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	761a      	strb	r2, [r3, #24]
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	e000e100 	.word	0xe000e100
 8002a70:	e000ed00 	.word	0xe000ed00

08002a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b089      	sub	sp, #36	@ 0x24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f1c3 0307 	rsb	r3, r3, #7
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	bf28      	it	cs
 8002a92:	2304      	movcs	r3, #4
 8002a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	3304      	adds	r3, #4
 8002a9a:	2b06      	cmp	r3, #6
 8002a9c:	d902      	bls.n	8002aa4 <NVIC_EncodePriority+0x30>
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	3b03      	subs	r3, #3
 8002aa2:	e000      	b.n	8002aa6 <NVIC_EncodePriority+0x32>
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43da      	mvns	r2, r3
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	401a      	ands	r2, r3
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002abc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac6:	43d9      	mvns	r1, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002acc:	4313      	orrs	r3, r2
         );
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3724      	adds	r7, #36	@ 0x24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b082      	sub	sp, #8
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7ff ff4c 	bl	8002980 <__NVIC_SetPriorityGrouping>
}
 8002ae8:	bf00      	nop
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	4603      	mov	r3, r0
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
 8002afc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002afe:	2300      	movs	r3, #0
 8002b00:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b02:	f7ff ff61 	bl	80029c8 <__NVIC_GetPriorityGrouping>
 8002b06:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	68b9      	ldr	r1, [r7, #8]
 8002b0c:	6978      	ldr	r0, [r7, #20]
 8002b0e:	f7ff ffb1 	bl	8002a74 <NVIC_EncodePriority>
 8002b12:	4602      	mov	r2, r0
 8002b14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b18:	4611      	mov	r1, r2
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff ff80 	bl	8002a20 <__NVIC_SetPriority>
}
 8002b20:	bf00      	nop
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	4603      	mov	r3, r0
 8002b30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff ff54 	bl	80029e4 <__NVIC_EnableIRQ>
}
 8002b3c:	bf00      	nop
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b50:	f7ff fc84 	bl	800245c <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d101      	bne.n	8002b60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e099      	b.n	8002c94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2202      	movs	r2, #2
 8002b64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 0201 	bic.w	r2, r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b80:	e00f      	b.n	8002ba2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b82:	f7ff fc6b 	bl	800245c <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b05      	cmp	r3, #5
 8002b8e:	d908      	bls.n	8002ba2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2220      	movs	r2, #32
 8002b94:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2203      	movs	r2, #3
 8002b9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e078      	b.n	8002c94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1e8      	bne.n	8002b82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	4b38      	ldr	r3, [pc, #224]	@ (8002c9c <HAL_DMA_Init+0x158>)
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685a      	ldr	r2, [r3, #4]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002be6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf8:	2b04      	cmp	r3, #4
 8002bfa:	d107      	bne.n	8002c0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c04:	4313      	orrs	r3, r2
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	f023 0307 	bic.w	r3, r3, #7
 8002c22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	d117      	bne.n	8002c66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00e      	beq.n	8002c66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 f9e9 	bl	8003020 <DMA_CheckFifoParam>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2240      	movs	r2, #64	@ 0x40
 8002c58:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002c62:	2301      	movs	r3, #1
 8002c64:	e016      	b.n	8002c94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f9a0 	bl	8002fb4 <DMA_CalcBaseAndBitshift>
 8002c74:	4603      	mov	r3, r0
 8002c76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c7c:	223f      	movs	r2, #63	@ 0x3f
 8002c7e:	409a      	lsls	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3718      	adds	r7, #24
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	f010803f 	.word	0xf010803f

08002ca0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002cac:	4b8e      	ldr	r3, [pc, #568]	@ (8002ee8 <HAL_DMA_IRQHandler+0x248>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a8e      	ldr	r2, [pc, #568]	@ (8002eec <HAL_DMA_IRQHandler+0x24c>)
 8002cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb6:	0a9b      	lsrs	r3, r3, #10
 8002cb8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cbe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cca:	2208      	movs	r2, #8
 8002ccc:	409a      	lsls	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d01a      	beq.n	8002d0c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d013      	beq.n	8002d0c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0204 	bic.w	r2, r2, #4
 8002cf2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf8:	2208      	movs	r2, #8
 8002cfa:	409a      	lsls	r2, r3
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d04:	f043 0201 	orr.w	r2, r3, #1
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d10:	2201      	movs	r2, #1
 8002d12:	409a      	lsls	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	4013      	ands	r3, r2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d012      	beq.n	8002d42 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00b      	beq.n	8002d42 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d2e:	2201      	movs	r2, #1
 8002d30:	409a      	lsls	r2, r3
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d3a:	f043 0202 	orr.w	r2, r3, #2
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d46:	2204      	movs	r2, #4
 8002d48:	409a      	lsls	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d012      	beq.n	8002d78 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00b      	beq.n	8002d78 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d64:	2204      	movs	r2, #4
 8002d66:	409a      	lsls	r2, r3
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d70:	f043 0204 	orr.w	r2, r3, #4
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d7c:	2210      	movs	r2, #16
 8002d7e:	409a      	lsls	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	4013      	ands	r3, r2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d043      	beq.n	8002e10 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d03c      	beq.n	8002e10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d9a:	2210      	movs	r2, #16
 8002d9c:	409a      	lsls	r2, r3
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d018      	beq.n	8002de2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d108      	bne.n	8002dd0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d024      	beq.n	8002e10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	4798      	blx	r3
 8002dce:	e01f      	b.n	8002e10 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d01b      	beq.n	8002e10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	4798      	blx	r3
 8002de0:	e016      	b.n	8002e10 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d107      	bne.n	8002e00 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f022 0208 	bic.w	r2, r2, #8
 8002dfe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d003      	beq.n	8002e10 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e14:	2220      	movs	r2, #32
 8002e16:	409a      	lsls	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 808f 	beq.w	8002f40 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0310 	and.w	r3, r3, #16
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 8087 	beq.w	8002f40 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e36:	2220      	movs	r2, #32
 8002e38:	409a      	lsls	r2, r3
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b05      	cmp	r3, #5
 8002e48:	d136      	bne.n	8002eb8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0216 	bic.w	r2, r2, #22
 8002e58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695a      	ldr	r2, [r3, #20]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e68:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d103      	bne.n	8002e7a <HAL_DMA_IRQHandler+0x1da>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d007      	beq.n	8002e8a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 0208 	bic.w	r2, r2, #8
 8002e88:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e8e:	223f      	movs	r2, #63	@ 0x3f
 8002e90:	409a      	lsls	r2, r3
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d07e      	beq.n	8002fac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	4798      	blx	r3
        }
        return;
 8002eb6:	e079      	b.n	8002fac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d01d      	beq.n	8002f02 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10d      	bne.n	8002ef0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d031      	beq.n	8002f40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	4798      	blx	r3
 8002ee4:	e02c      	b.n	8002f40 <HAL_DMA_IRQHandler+0x2a0>
 8002ee6:	bf00      	nop
 8002ee8:	20000000 	.word	0x20000000
 8002eec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d023      	beq.n	8002f40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	4798      	blx	r3
 8002f00:	e01e      	b.n	8002f40 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10f      	bne.n	8002f30 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 0210 	bic.w	r2, r2, #16
 8002f1e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d032      	beq.n	8002fae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d022      	beq.n	8002f9a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2205      	movs	r2, #5
 8002f58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0201 	bic.w	r2, r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	60bb      	str	r3, [r7, #8]
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d307      	bcc.n	8002f88 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f2      	bne.n	8002f6c <HAL_DMA_IRQHandler+0x2cc>
 8002f86:	e000      	b.n	8002f8a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f88:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d005      	beq.n	8002fae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	4798      	blx	r3
 8002faa:	e000      	b.n	8002fae <HAL_DMA_IRQHandler+0x30e>
        return;
 8002fac:	bf00      	nop
    }
  }
}
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	3b10      	subs	r3, #16
 8002fc4:	4a14      	ldr	r2, [pc, #80]	@ (8003018 <DMA_CalcBaseAndBitshift+0x64>)
 8002fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fca:	091b      	lsrs	r3, r3, #4
 8002fcc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002fce:	4a13      	ldr	r2, [pc, #76]	@ (800301c <DMA_CalcBaseAndBitshift+0x68>)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2b03      	cmp	r3, #3
 8002fe0:	d909      	bls.n	8002ff6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002fea:	f023 0303 	bic.w	r3, r3, #3
 8002fee:	1d1a      	adds	r2, r3, #4
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ff4:	e007      	b.n	8003006 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002ffe:	f023 0303 	bic.w	r3, r3, #3
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800300a:	4618      	mov	r0, r3
 800300c:	3714      	adds	r7, #20
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	aaaaaaab 	.word	0xaaaaaaab
 800301c:	08007340 	.word	0x08007340

08003020 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003028:	2300      	movs	r3, #0
 800302a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003030:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d11f      	bne.n	800307a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	2b03      	cmp	r3, #3
 800303e:	d856      	bhi.n	80030ee <DMA_CheckFifoParam+0xce>
 8003040:	a201      	add	r2, pc, #4	@ (adr r2, 8003048 <DMA_CheckFifoParam+0x28>)
 8003042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003046:	bf00      	nop
 8003048:	08003059 	.word	0x08003059
 800304c:	0800306b 	.word	0x0800306b
 8003050:	08003059 	.word	0x08003059
 8003054:	080030ef 	.word	0x080030ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800305c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d046      	beq.n	80030f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003068:	e043      	b.n	80030f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800306e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003072:	d140      	bne.n	80030f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003078:	e03d      	b.n	80030f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003082:	d121      	bne.n	80030c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	2b03      	cmp	r3, #3
 8003088:	d837      	bhi.n	80030fa <DMA_CheckFifoParam+0xda>
 800308a:	a201      	add	r2, pc, #4	@ (adr r2, 8003090 <DMA_CheckFifoParam+0x70>)
 800308c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003090:	080030a1 	.word	0x080030a1
 8003094:	080030a7 	.word	0x080030a7
 8003098:	080030a1 	.word	0x080030a1
 800309c:	080030b9 	.word	0x080030b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	73fb      	strb	r3, [r7, #15]
      break;
 80030a4:	e030      	b.n	8003108 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d025      	beq.n	80030fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030b6:	e022      	b.n	80030fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030bc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80030c0:	d11f      	bne.n	8003102 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030c6:	e01c      	b.n	8003102 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d903      	bls.n	80030d6 <DMA_CheckFifoParam+0xb6>
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	2b03      	cmp	r3, #3
 80030d2:	d003      	beq.n	80030dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030d4:	e018      	b.n	8003108 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	73fb      	strb	r3, [r7, #15]
      break;
 80030da:	e015      	b.n	8003108 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00e      	beq.n	8003106 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
      break;
 80030ec:	e00b      	b.n	8003106 <DMA_CheckFifoParam+0xe6>
      break;
 80030ee:	bf00      	nop
 80030f0:	e00a      	b.n	8003108 <DMA_CheckFifoParam+0xe8>
      break;
 80030f2:	bf00      	nop
 80030f4:	e008      	b.n	8003108 <DMA_CheckFifoParam+0xe8>
      break;
 80030f6:	bf00      	nop
 80030f8:	e006      	b.n	8003108 <DMA_CheckFifoParam+0xe8>
      break;
 80030fa:	bf00      	nop
 80030fc:	e004      	b.n	8003108 <DMA_CheckFifoParam+0xe8>
      break;
 80030fe:	bf00      	nop
 8003100:	e002      	b.n	8003108 <DMA_CheckFifoParam+0xe8>
      break;   
 8003102:	bf00      	nop
 8003104:	e000      	b.n	8003108 <DMA_CheckFifoParam+0xe8>
      break;
 8003106:	bf00      	nop
    }
  } 
  
  return status; 
 8003108:	7bfb      	ldrb	r3, [r7, #15]
}
 800310a:	4618      	mov	r0, r3
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop

08003118 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003118:	b480      	push	{r7}
 800311a:	b089      	sub	sp, #36	@ 0x24
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003122:	2300      	movs	r3, #0
 8003124:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003126:	2300      	movs	r3, #0
 8003128:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800312a:	2300      	movs	r3, #0
 800312c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800312e:	2300      	movs	r3, #0
 8003130:	61fb      	str	r3, [r7, #28]
 8003132:	e16b      	b.n	800340c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003134:	2201      	movs	r2, #1
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	4013      	ands	r3, r2
 8003146:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	429a      	cmp	r2, r3
 800314e:	f040 815a 	bne.w	8003406 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	2b01      	cmp	r3, #1
 800315c:	d005      	beq.n	800316a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003166:	2b02      	cmp	r3, #2
 8003168:	d130      	bne.n	80031cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	2203      	movs	r2, #3
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	43db      	mvns	r3, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4013      	ands	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	68da      	ldr	r2, [r3, #12]
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	4313      	orrs	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031a0:	2201      	movs	r2, #1
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	43db      	mvns	r3, r3
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	4013      	ands	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	091b      	lsrs	r3, r3, #4
 80031b6:	f003 0201 	and.w	r2, r3, #1
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f003 0303 	and.w	r3, r3, #3
 80031d4:	2b03      	cmp	r3, #3
 80031d6:	d017      	beq.n	8003208 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	2203      	movs	r2, #3
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	43db      	mvns	r3, r3
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	4013      	ands	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	4313      	orrs	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f003 0303 	and.w	r3, r3, #3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d123      	bne.n	800325c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	08da      	lsrs	r2, r3, #3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3208      	adds	r2, #8
 800321c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003220:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	220f      	movs	r2, #15
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4013      	ands	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	691a      	ldr	r2, [r3, #16]
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4313      	orrs	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	08da      	lsrs	r2, r3, #3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	3208      	adds	r2, #8
 8003256:	69b9      	ldr	r1, [r7, #24]
 8003258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	2203      	movs	r2, #3
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	43db      	mvns	r3, r3
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	4013      	ands	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f003 0203 	and.w	r2, r3, #3
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	4313      	orrs	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 80b4 	beq.w	8003406 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800329e:	2300      	movs	r3, #0
 80032a0:	60fb      	str	r3, [r7, #12]
 80032a2:	4b60      	ldr	r3, [pc, #384]	@ (8003424 <HAL_GPIO_Init+0x30c>)
 80032a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a6:	4a5f      	ldr	r2, [pc, #380]	@ (8003424 <HAL_GPIO_Init+0x30c>)
 80032a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80032ae:	4b5d      	ldr	r3, [pc, #372]	@ (8003424 <HAL_GPIO_Init+0x30c>)
 80032b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032b6:	60fb      	str	r3, [r7, #12]
 80032b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032ba:	4a5b      	ldr	r2, [pc, #364]	@ (8003428 <HAL_GPIO_Init+0x310>)
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	089b      	lsrs	r3, r3, #2
 80032c0:	3302      	adds	r3, #2
 80032c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	220f      	movs	r2, #15
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	43db      	mvns	r3, r3
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	4013      	ands	r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a52      	ldr	r2, [pc, #328]	@ (800342c <HAL_GPIO_Init+0x314>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d02b      	beq.n	800333e <HAL_GPIO_Init+0x226>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a51      	ldr	r2, [pc, #324]	@ (8003430 <HAL_GPIO_Init+0x318>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d025      	beq.n	800333a <HAL_GPIO_Init+0x222>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a50      	ldr	r2, [pc, #320]	@ (8003434 <HAL_GPIO_Init+0x31c>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d01f      	beq.n	8003336 <HAL_GPIO_Init+0x21e>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a4f      	ldr	r2, [pc, #316]	@ (8003438 <HAL_GPIO_Init+0x320>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d019      	beq.n	8003332 <HAL_GPIO_Init+0x21a>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a4e      	ldr	r2, [pc, #312]	@ (800343c <HAL_GPIO_Init+0x324>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d013      	beq.n	800332e <HAL_GPIO_Init+0x216>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a4d      	ldr	r2, [pc, #308]	@ (8003440 <HAL_GPIO_Init+0x328>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d00d      	beq.n	800332a <HAL_GPIO_Init+0x212>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a4c      	ldr	r2, [pc, #304]	@ (8003444 <HAL_GPIO_Init+0x32c>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d007      	beq.n	8003326 <HAL_GPIO_Init+0x20e>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a4b      	ldr	r2, [pc, #300]	@ (8003448 <HAL_GPIO_Init+0x330>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d101      	bne.n	8003322 <HAL_GPIO_Init+0x20a>
 800331e:	2307      	movs	r3, #7
 8003320:	e00e      	b.n	8003340 <HAL_GPIO_Init+0x228>
 8003322:	2308      	movs	r3, #8
 8003324:	e00c      	b.n	8003340 <HAL_GPIO_Init+0x228>
 8003326:	2306      	movs	r3, #6
 8003328:	e00a      	b.n	8003340 <HAL_GPIO_Init+0x228>
 800332a:	2305      	movs	r3, #5
 800332c:	e008      	b.n	8003340 <HAL_GPIO_Init+0x228>
 800332e:	2304      	movs	r3, #4
 8003330:	e006      	b.n	8003340 <HAL_GPIO_Init+0x228>
 8003332:	2303      	movs	r3, #3
 8003334:	e004      	b.n	8003340 <HAL_GPIO_Init+0x228>
 8003336:	2302      	movs	r3, #2
 8003338:	e002      	b.n	8003340 <HAL_GPIO_Init+0x228>
 800333a:	2301      	movs	r3, #1
 800333c:	e000      	b.n	8003340 <HAL_GPIO_Init+0x228>
 800333e:	2300      	movs	r3, #0
 8003340:	69fa      	ldr	r2, [r7, #28]
 8003342:	f002 0203 	and.w	r2, r2, #3
 8003346:	0092      	lsls	r2, r2, #2
 8003348:	4093      	lsls	r3, r2
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	4313      	orrs	r3, r2
 800334e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003350:	4935      	ldr	r1, [pc, #212]	@ (8003428 <HAL_GPIO_Init+0x310>)
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	089b      	lsrs	r3, r3, #2
 8003356:	3302      	adds	r3, #2
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800335e:	4b3b      	ldr	r3, [pc, #236]	@ (800344c <HAL_GPIO_Init+0x334>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	43db      	mvns	r3, r3
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	4013      	ands	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d003      	beq.n	8003382 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	4313      	orrs	r3, r2
 8003380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003382:	4a32      	ldr	r2, [pc, #200]	@ (800344c <HAL_GPIO_Init+0x334>)
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003388:	4b30      	ldr	r3, [pc, #192]	@ (800344c <HAL_GPIO_Init+0x334>)
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	43db      	mvns	r3, r3
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	4013      	ands	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d003      	beq.n	80033ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033ac:	4a27      	ldr	r2, [pc, #156]	@ (800344c <HAL_GPIO_Init+0x334>)
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033b2:	4b26      	ldr	r3, [pc, #152]	@ (800344c <HAL_GPIO_Init+0x334>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	43db      	mvns	r3, r3
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	4013      	ands	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033d6:	4a1d      	ldr	r2, [pc, #116]	@ (800344c <HAL_GPIO_Init+0x334>)
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033dc:	4b1b      	ldr	r3, [pc, #108]	@ (800344c <HAL_GPIO_Init+0x334>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	43db      	mvns	r3, r3
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	4013      	ands	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d003      	beq.n	8003400 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003400:	4a12      	ldr	r2, [pc, #72]	@ (800344c <HAL_GPIO_Init+0x334>)
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	3301      	adds	r3, #1
 800340a:	61fb      	str	r3, [r7, #28]
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	2b0f      	cmp	r3, #15
 8003410:	f67f ae90 	bls.w	8003134 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003414:	bf00      	nop
 8003416:	bf00      	nop
 8003418:	3724      	adds	r7, #36	@ 0x24
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	40023800 	.word	0x40023800
 8003428:	40013800 	.word	0x40013800
 800342c:	40020000 	.word	0x40020000
 8003430:	40020400 	.word	0x40020400
 8003434:	40020800 	.word	0x40020800
 8003438:	40020c00 	.word	0x40020c00
 800343c:	40021000 	.word	0x40021000
 8003440:	40021400 	.word	0x40021400
 8003444:	40021800 	.word	0x40021800
 8003448:	40021c00 	.word	0x40021c00
 800344c:	40013c00 	.word	0x40013c00

08003450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	460b      	mov	r3, r1
 800345a:	807b      	strh	r3, [r7, #2]
 800345c:	4613      	mov	r3, r2
 800345e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003460:	787b      	ldrb	r3, [r7, #1]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003466:	887a      	ldrh	r2, [r7, #2]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800346c:	e003      	b.n	8003476 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800346e:	887b      	ldrh	r3, [r7, #2]
 8003470:	041a      	lsls	r2, r3, #16
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	619a      	str	r2, [r3, #24]
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
	...

08003484 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e12b      	b.n	80036ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d106      	bne.n	80034b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7fd facc 	bl	8000a48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2224      	movs	r2, #36	@ 0x24
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 0201 	bic.w	r2, r2, #1
 80034c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034e8:	f000 fd40 	bl	8003f6c <HAL_RCC_GetPCLK1Freq>
 80034ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	4a81      	ldr	r2, [pc, #516]	@ (80036f8 <HAL_I2C_Init+0x274>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d807      	bhi.n	8003508 <HAL_I2C_Init+0x84>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	4a80      	ldr	r2, [pc, #512]	@ (80036fc <HAL_I2C_Init+0x278>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	bf94      	ite	ls
 8003500:	2301      	movls	r3, #1
 8003502:	2300      	movhi	r3, #0
 8003504:	b2db      	uxtb	r3, r3
 8003506:	e006      	b.n	8003516 <HAL_I2C_Init+0x92>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	4a7d      	ldr	r2, [pc, #500]	@ (8003700 <HAL_I2C_Init+0x27c>)
 800350c:	4293      	cmp	r3, r2
 800350e:	bf94      	ite	ls
 8003510:	2301      	movls	r3, #1
 8003512:	2300      	movhi	r3, #0
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e0e7      	b.n	80036ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	4a78      	ldr	r2, [pc, #480]	@ (8003704 <HAL_I2C_Init+0x280>)
 8003522:	fba2 2303 	umull	r2, r3, r2, r3
 8003526:	0c9b      	lsrs	r3, r3, #18
 8003528:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	430a      	orrs	r2, r1
 800353c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	4a6a      	ldr	r2, [pc, #424]	@ (80036f8 <HAL_I2C_Init+0x274>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d802      	bhi.n	8003558 <HAL_I2C_Init+0xd4>
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	3301      	adds	r3, #1
 8003556:	e009      	b.n	800356c <HAL_I2C_Init+0xe8>
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800355e:	fb02 f303 	mul.w	r3, r2, r3
 8003562:	4a69      	ldr	r2, [pc, #420]	@ (8003708 <HAL_I2C_Init+0x284>)
 8003564:	fba2 2303 	umull	r2, r3, r2, r3
 8003568:	099b      	lsrs	r3, r3, #6
 800356a:	3301      	adds	r3, #1
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	6812      	ldr	r2, [r2, #0]
 8003570:	430b      	orrs	r3, r1
 8003572:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800357e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	495c      	ldr	r1, [pc, #368]	@ (80036f8 <HAL_I2C_Init+0x274>)
 8003588:	428b      	cmp	r3, r1
 800358a:	d819      	bhi.n	80035c0 <HAL_I2C_Init+0x13c>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	1e59      	subs	r1, r3, #1
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	fbb1 f3f3 	udiv	r3, r1, r3
 800359a:	1c59      	adds	r1, r3, #1
 800359c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80035a0:	400b      	ands	r3, r1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00a      	beq.n	80035bc <HAL_I2C_Init+0x138>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	1e59      	subs	r1, r3, #1
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80035b4:	3301      	adds	r3, #1
 80035b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ba:	e051      	b.n	8003660 <HAL_I2C_Init+0x1dc>
 80035bc:	2304      	movs	r3, #4
 80035be:	e04f      	b.n	8003660 <HAL_I2C_Init+0x1dc>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d111      	bne.n	80035ec <HAL_I2C_Init+0x168>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	1e58      	subs	r0, r3, #1
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6859      	ldr	r1, [r3, #4]
 80035d0:	460b      	mov	r3, r1
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	440b      	add	r3, r1
 80035d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035da:	3301      	adds	r3, #1
 80035dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	bf0c      	ite	eq
 80035e4:	2301      	moveq	r3, #1
 80035e6:	2300      	movne	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	e012      	b.n	8003612 <HAL_I2C_Init+0x18e>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	1e58      	subs	r0, r3, #1
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6859      	ldr	r1, [r3, #4]
 80035f4:	460b      	mov	r3, r1
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	0099      	lsls	r1, r3, #2
 80035fc:	440b      	add	r3, r1
 80035fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003602:	3301      	adds	r3, #1
 8003604:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003608:	2b00      	cmp	r3, #0
 800360a:	bf0c      	ite	eq
 800360c:	2301      	moveq	r3, #1
 800360e:	2300      	movne	r3, #0
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <HAL_I2C_Init+0x196>
 8003616:	2301      	movs	r3, #1
 8003618:	e022      	b.n	8003660 <HAL_I2C_Init+0x1dc>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10e      	bne.n	8003640 <HAL_I2C_Init+0x1bc>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	1e58      	subs	r0, r3, #1
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6859      	ldr	r1, [r3, #4]
 800362a:	460b      	mov	r3, r1
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	440b      	add	r3, r1
 8003630:	fbb0 f3f3 	udiv	r3, r0, r3
 8003634:	3301      	adds	r3, #1
 8003636:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800363a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800363e:	e00f      	b.n	8003660 <HAL_I2C_Init+0x1dc>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	1e58      	subs	r0, r3, #1
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6859      	ldr	r1, [r3, #4]
 8003648:	460b      	mov	r3, r1
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	440b      	add	r3, r1
 800364e:	0099      	lsls	r1, r3, #2
 8003650:	440b      	add	r3, r1
 8003652:	fbb0 f3f3 	udiv	r3, r0, r3
 8003656:	3301      	adds	r3, #1
 8003658:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800365c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003660:	6879      	ldr	r1, [r7, #4]
 8003662:	6809      	ldr	r1, [r1, #0]
 8003664:	4313      	orrs	r3, r2
 8003666:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	69da      	ldr	r2, [r3, #28]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	430a      	orrs	r2, r1
 8003682:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800368e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	6911      	ldr	r1, [r2, #16]
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	68d2      	ldr	r2, [r2, #12]
 800369a:	4311      	orrs	r1, r2
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	6812      	ldr	r2, [r2, #0]
 80036a0:	430b      	orrs	r3, r1
 80036a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	695a      	ldr	r2, [r3, #20]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	431a      	orrs	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 0201 	orr.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2220      	movs	r2, #32
 80036da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	000186a0 	.word	0x000186a0
 80036fc:	001e847f 	.word	0x001e847f
 8003700:	003d08ff 	.word	0x003d08ff
 8003704:	431bde83 	.word	0x431bde83
 8003708:	10624dd3 	.word	0x10624dd3

0800370c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e267      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d075      	beq.n	8003816 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800372a:	4b88      	ldr	r3, [pc, #544]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 030c 	and.w	r3, r3, #12
 8003732:	2b04      	cmp	r3, #4
 8003734:	d00c      	beq.n	8003750 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003736:	4b85      	ldr	r3, [pc, #532]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800373e:	2b08      	cmp	r3, #8
 8003740:	d112      	bne.n	8003768 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003742:	4b82      	ldr	r3, [pc, #520]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800374a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800374e:	d10b      	bne.n	8003768 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003750:	4b7e      	ldr	r3, [pc, #504]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d05b      	beq.n	8003814 <HAL_RCC_OscConfig+0x108>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d157      	bne.n	8003814 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e242      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003770:	d106      	bne.n	8003780 <HAL_RCC_OscConfig+0x74>
 8003772:	4b76      	ldr	r3, [pc, #472]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a75      	ldr	r2, [pc, #468]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 8003778:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800377c:	6013      	str	r3, [r2, #0]
 800377e:	e01d      	b.n	80037bc <HAL_RCC_OscConfig+0xb0>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003788:	d10c      	bne.n	80037a4 <HAL_RCC_OscConfig+0x98>
 800378a:	4b70      	ldr	r3, [pc, #448]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a6f      	ldr	r2, [pc, #444]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 8003790:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003794:	6013      	str	r3, [r2, #0]
 8003796:	4b6d      	ldr	r3, [pc, #436]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a6c      	ldr	r2, [pc, #432]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 800379c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037a0:	6013      	str	r3, [r2, #0]
 80037a2:	e00b      	b.n	80037bc <HAL_RCC_OscConfig+0xb0>
 80037a4:	4b69      	ldr	r3, [pc, #420]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a68      	ldr	r2, [pc, #416]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 80037aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037ae:	6013      	str	r3, [r2, #0]
 80037b0:	4b66      	ldr	r3, [pc, #408]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a65      	ldr	r2, [pc, #404]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 80037b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d013      	beq.n	80037ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c4:	f7fe fe4a 	bl	800245c <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037cc:	f7fe fe46 	bl	800245c <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b64      	cmp	r3, #100	@ 0x64
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e207      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037de:	4b5b      	ldr	r3, [pc, #364]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0f0      	beq.n	80037cc <HAL_RCC_OscConfig+0xc0>
 80037ea:	e014      	b.n	8003816 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ec:	f7fe fe36 	bl	800245c <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037f4:	f7fe fe32 	bl	800245c <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b64      	cmp	r3, #100	@ 0x64
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e1f3      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003806:	4b51      	ldr	r3, [pc, #324]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1f0      	bne.n	80037f4 <HAL_RCC_OscConfig+0xe8>
 8003812:	e000      	b.n	8003816 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d063      	beq.n	80038ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003822:	4b4a      	ldr	r3, [pc, #296]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f003 030c 	and.w	r3, r3, #12
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00b      	beq.n	8003846 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800382e:	4b47      	ldr	r3, [pc, #284]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003836:	2b08      	cmp	r3, #8
 8003838:	d11c      	bne.n	8003874 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800383a:	4b44      	ldr	r3, [pc, #272]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d116      	bne.n	8003874 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003846:	4b41      	ldr	r3, [pc, #260]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d005      	beq.n	800385e <HAL_RCC_OscConfig+0x152>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d001      	beq.n	800385e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e1c7      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800385e:	4b3b      	ldr	r3, [pc, #236]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	4937      	ldr	r1, [pc, #220]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 800386e:	4313      	orrs	r3, r2
 8003870:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003872:	e03a      	b.n	80038ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d020      	beq.n	80038be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800387c:	4b34      	ldr	r3, [pc, #208]	@ (8003950 <HAL_RCC_OscConfig+0x244>)
 800387e:	2201      	movs	r2, #1
 8003880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003882:	f7fe fdeb 	bl	800245c <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003888:	e008      	b.n	800389c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800388a:	f7fe fde7 	bl	800245c <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d901      	bls.n	800389c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e1a8      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800389c:	4b2b      	ldr	r3, [pc, #172]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d0f0      	beq.n	800388a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038a8:	4b28      	ldr	r3, [pc, #160]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	4925      	ldr	r1, [pc, #148]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	600b      	str	r3, [r1, #0]
 80038bc:	e015      	b.n	80038ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038be:	4b24      	ldr	r3, [pc, #144]	@ (8003950 <HAL_RCC_OscConfig+0x244>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c4:	f7fe fdca 	bl	800245c <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038cc:	f7fe fdc6 	bl	800245c <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e187      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038de:	4b1b      	ldr	r3, [pc, #108]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1f0      	bne.n	80038cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0308 	and.w	r3, r3, #8
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d036      	beq.n	8003964 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d016      	beq.n	800392c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038fe:	4b15      	ldr	r3, [pc, #84]	@ (8003954 <HAL_RCC_OscConfig+0x248>)
 8003900:	2201      	movs	r2, #1
 8003902:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003904:	f7fe fdaa 	bl	800245c <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800390a:	e008      	b.n	800391e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800390c:	f7fe fda6 	bl	800245c <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e167      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800391e:	4b0b      	ldr	r3, [pc, #44]	@ (800394c <HAL_RCC_OscConfig+0x240>)
 8003920:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d0f0      	beq.n	800390c <HAL_RCC_OscConfig+0x200>
 800392a:	e01b      	b.n	8003964 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800392c:	4b09      	ldr	r3, [pc, #36]	@ (8003954 <HAL_RCC_OscConfig+0x248>)
 800392e:	2200      	movs	r2, #0
 8003930:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003932:	f7fe fd93 	bl	800245c <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003938:	e00e      	b.n	8003958 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800393a:	f7fe fd8f 	bl	800245c <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d907      	bls.n	8003958 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e150      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
 800394c:	40023800 	.word	0x40023800
 8003950:	42470000 	.word	0x42470000
 8003954:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003958:	4b88      	ldr	r3, [pc, #544]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 800395a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1ea      	bne.n	800393a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0304 	and.w	r3, r3, #4
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 8097 	beq.w	8003aa0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003972:	2300      	movs	r3, #0
 8003974:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003976:	4b81      	ldr	r3, [pc, #516]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10f      	bne.n	80039a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003982:	2300      	movs	r3, #0
 8003984:	60bb      	str	r3, [r7, #8]
 8003986:	4b7d      	ldr	r3, [pc, #500]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398a:	4a7c      	ldr	r2, [pc, #496]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 800398c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003990:	6413      	str	r3, [r2, #64]	@ 0x40
 8003992:	4b7a      	ldr	r3, [pc, #488]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800399a:	60bb      	str	r3, [r7, #8]
 800399c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800399e:	2301      	movs	r3, #1
 80039a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a2:	4b77      	ldr	r3, [pc, #476]	@ (8003b80 <HAL_RCC_OscConfig+0x474>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d118      	bne.n	80039e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ae:	4b74      	ldr	r3, [pc, #464]	@ (8003b80 <HAL_RCC_OscConfig+0x474>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a73      	ldr	r2, [pc, #460]	@ (8003b80 <HAL_RCC_OscConfig+0x474>)
 80039b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ba:	f7fe fd4f 	bl	800245c <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c0:	e008      	b.n	80039d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039c2:	f7fe fd4b 	bl	800245c <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e10c      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d4:	4b6a      	ldr	r3, [pc, #424]	@ (8003b80 <HAL_RCC_OscConfig+0x474>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0f0      	beq.n	80039c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d106      	bne.n	80039f6 <HAL_RCC_OscConfig+0x2ea>
 80039e8:	4b64      	ldr	r3, [pc, #400]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 80039ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ec:	4a63      	ldr	r2, [pc, #396]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 80039ee:	f043 0301 	orr.w	r3, r3, #1
 80039f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80039f4:	e01c      	b.n	8003a30 <HAL_RCC_OscConfig+0x324>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	2b05      	cmp	r3, #5
 80039fc:	d10c      	bne.n	8003a18 <HAL_RCC_OscConfig+0x30c>
 80039fe:	4b5f      	ldr	r3, [pc, #380]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a02:	4a5e      	ldr	r2, [pc, #376]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a04:	f043 0304 	orr.w	r3, r3, #4
 8003a08:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a0a:	4b5c      	ldr	r3, [pc, #368]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a0e:	4a5b      	ldr	r2, [pc, #364]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a10:	f043 0301 	orr.w	r3, r3, #1
 8003a14:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a16:	e00b      	b.n	8003a30 <HAL_RCC_OscConfig+0x324>
 8003a18:	4b58      	ldr	r3, [pc, #352]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a1c:	4a57      	ldr	r2, [pc, #348]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a1e:	f023 0301 	bic.w	r3, r3, #1
 8003a22:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a24:	4b55      	ldr	r3, [pc, #340]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a28:	4a54      	ldr	r2, [pc, #336]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a2a:	f023 0304 	bic.w	r3, r3, #4
 8003a2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d015      	beq.n	8003a64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a38:	f7fe fd10 	bl	800245c <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a3e:	e00a      	b.n	8003a56 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a40:	f7fe fd0c 	bl	800245c <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e0cb      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a56:	4b49      	ldr	r3, [pc, #292]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0ee      	beq.n	8003a40 <HAL_RCC_OscConfig+0x334>
 8003a62:	e014      	b.n	8003a8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a64:	f7fe fcfa 	bl	800245c <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a6a:	e00a      	b.n	8003a82 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a6c:	f7fe fcf6 	bl	800245c <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e0b5      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a82:	4b3e      	ldr	r3, [pc, #248]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1ee      	bne.n	8003a6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a8e:	7dfb      	ldrb	r3, [r7, #23]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d105      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a94:	4b39      	ldr	r3, [pc, #228]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a98:	4a38      	ldr	r2, [pc, #224]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a9e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 80a1 	beq.w	8003bec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003aaa:	4b34      	ldr	r3, [pc, #208]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 030c 	and.w	r3, r3, #12
 8003ab2:	2b08      	cmp	r3, #8
 8003ab4:	d05c      	beq.n	8003b70 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d141      	bne.n	8003b42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003abe:	4b31      	ldr	r3, [pc, #196]	@ (8003b84 <HAL_RCC_OscConfig+0x478>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac4:	f7fe fcca 	bl	800245c <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003acc:	f7fe fcc6 	bl	800245c <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e087      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ade:	4b27      	ldr	r3, [pc, #156]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1f0      	bne.n	8003acc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69da      	ldr	r2, [r3, #28]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af8:	019b      	lsls	r3, r3, #6
 8003afa:	431a      	orrs	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b00:	085b      	lsrs	r3, r3, #1
 8003b02:	3b01      	subs	r3, #1
 8003b04:	041b      	lsls	r3, r3, #16
 8003b06:	431a      	orrs	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b0c:	061b      	lsls	r3, r3, #24
 8003b0e:	491b      	ldr	r1, [pc, #108]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b14:	4b1b      	ldr	r3, [pc, #108]	@ (8003b84 <HAL_RCC_OscConfig+0x478>)
 8003b16:	2201      	movs	r2, #1
 8003b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1a:	f7fe fc9f 	bl	800245c <HAL_GetTick>
 8003b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b20:	e008      	b.n	8003b34 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b22:	f7fe fc9b 	bl	800245c <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e05c      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b34:	4b11      	ldr	r3, [pc, #68]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d0f0      	beq.n	8003b22 <HAL_RCC_OscConfig+0x416>
 8003b40:	e054      	b.n	8003bec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b42:	4b10      	ldr	r3, [pc, #64]	@ (8003b84 <HAL_RCC_OscConfig+0x478>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b48:	f7fe fc88 	bl	800245c <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b4e:	e008      	b.n	8003b62 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b50:	f7fe fc84 	bl	800245c <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e045      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b62:	4b06      	ldr	r3, [pc, #24]	@ (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1f0      	bne.n	8003b50 <HAL_RCC_OscConfig+0x444>
 8003b6e:	e03d      	b.n	8003bec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d107      	bne.n	8003b88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e038      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
 8003b7c:	40023800 	.word	0x40023800
 8003b80:	40007000 	.word	0x40007000
 8003b84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b88:	4b1b      	ldr	r3, [pc, #108]	@ (8003bf8 <HAL_RCC_OscConfig+0x4ec>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d028      	beq.n	8003be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d121      	bne.n	8003be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d11a      	bne.n	8003be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003bb8:	4013      	ands	r3, r2
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003bbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d111      	bne.n	8003be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bce:	085b      	lsrs	r3, r3, #1
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d107      	bne.n	8003be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d001      	beq.n	8003bec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e000      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3718      	adds	r7, #24
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40023800 	.word	0x40023800

08003bfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d101      	bne.n	8003c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e0cc      	b.n	8003daa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c10:	4b68      	ldr	r3, [pc, #416]	@ (8003db4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0307 	and.w	r3, r3, #7
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d90c      	bls.n	8003c38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c1e:	4b65      	ldr	r3, [pc, #404]	@ (8003db4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	b2d2      	uxtb	r2, r2
 8003c24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c26:	4b63      	ldr	r3, [pc, #396]	@ (8003db4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0307 	and.w	r3, r3, #7
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d001      	beq.n	8003c38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e0b8      	b.n	8003daa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d020      	beq.n	8003c86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0304 	and.w	r3, r3, #4
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d005      	beq.n	8003c5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c50:	4b59      	ldr	r3, [pc, #356]	@ (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	4a58      	ldr	r2, [pc, #352]	@ (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003c5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0308 	and.w	r3, r3, #8
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d005      	beq.n	8003c74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c68:	4b53      	ldr	r3, [pc, #332]	@ (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	4a52      	ldr	r2, [pc, #328]	@ (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003c72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c74:	4b50      	ldr	r3, [pc, #320]	@ (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	494d      	ldr	r1, [pc, #308]	@ (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d044      	beq.n	8003d1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d107      	bne.n	8003caa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c9a:	4b47      	ldr	r3, [pc, #284]	@ (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d119      	bne.n	8003cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e07f      	b.n	8003daa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d003      	beq.n	8003cba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cb6:	2b03      	cmp	r3, #3
 8003cb8:	d107      	bne.n	8003cca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cba:	4b3f      	ldr	r3, [pc, #252]	@ (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d109      	bne.n	8003cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e06f      	b.n	8003daa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cca:	4b3b      	ldr	r3, [pc, #236]	@ (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e067      	b.n	8003daa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cda:	4b37      	ldr	r3, [pc, #220]	@ (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f023 0203 	bic.w	r2, r3, #3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	4934      	ldr	r1, [pc, #208]	@ (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cec:	f7fe fbb6 	bl	800245c <HAL_GetTick>
 8003cf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cf2:	e00a      	b.n	8003d0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cf4:	f7fe fbb2 	bl	800245c <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e04f      	b.n	8003daa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d0a:	4b2b      	ldr	r3, [pc, #172]	@ (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 020c 	and.w	r2, r3, #12
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d1eb      	bne.n	8003cf4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d1c:	4b25      	ldr	r3, [pc, #148]	@ (8003db4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d20c      	bcs.n	8003d44 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d2a:	4b22      	ldr	r3, [pc, #136]	@ (8003db4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d32:	4b20      	ldr	r3, [pc, #128]	@ (8003db4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0307 	and.w	r3, r3, #7
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d001      	beq.n	8003d44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e032      	b.n	8003daa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d008      	beq.n	8003d62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d50:	4b19      	ldr	r3, [pc, #100]	@ (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	4916      	ldr	r1, [pc, #88]	@ (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0308 	and.w	r3, r3, #8
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d009      	beq.n	8003d82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d6e:	4b12      	ldr	r3, [pc, #72]	@ (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	490e      	ldr	r1, [pc, #56]	@ (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d82:	f000 f821 	bl	8003dc8 <HAL_RCC_GetSysClockFreq>
 8003d86:	4602      	mov	r2, r0
 8003d88:	4b0b      	ldr	r3, [pc, #44]	@ (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	091b      	lsrs	r3, r3, #4
 8003d8e:	f003 030f 	and.w	r3, r3, #15
 8003d92:	490a      	ldr	r1, [pc, #40]	@ (8003dbc <HAL_RCC_ClockConfig+0x1c0>)
 8003d94:	5ccb      	ldrb	r3, [r1, r3]
 8003d96:	fa22 f303 	lsr.w	r3, r2, r3
 8003d9a:	4a09      	ldr	r2, [pc, #36]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003d9e:	4b09      	ldr	r3, [pc, #36]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fd f958 	bl	8001058 <HAL_InitTick>

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	40023c00 	.word	0x40023c00
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	08007318 	.word	0x08007318
 8003dc0:	20000000 	.word	0x20000000
 8003dc4:	20000004 	.word	0x20000004

08003dc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dcc:	b090      	sub	sp, #64	@ 0x40
 8003dce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003de0:	4b59      	ldr	r3, [pc, #356]	@ (8003f48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f003 030c 	and.w	r3, r3, #12
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	d00d      	beq.n	8003e08 <HAL_RCC_GetSysClockFreq+0x40>
 8003dec:	2b08      	cmp	r3, #8
 8003dee:	f200 80a1 	bhi.w	8003f34 <HAL_RCC_GetSysClockFreq+0x16c>
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d002      	beq.n	8003dfc <HAL_RCC_GetSysClockFreq+0x34>
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d003      	beq.n	8003e02 <HAL_RCC_GetSysClockFreq+0x3a>
 8003dfa:	e09b      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003dfc:	4b53      	ldr	r3, [pc, #332]	@ (8003f4c <HAL_RCC_GetSysClockFreq+0x184>)
 8003dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e00:	e09b      	b.n	8003f3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e02:	4b53      	ldr	r3, [pc, #332]	@ (8003f50 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e04:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e06:	e098      	b.n	8003f3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e08:	4b4f      	ldr	r3, [pc, #316]	@ (8003f48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e10:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e12:	4b4d      	ldr	r3, [pc, #308]	@ (8003f48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d028      	beq.n	8003e70 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e1e:	4b4a      	ldr	r3, [pc, #296]	@ (8003f48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	099b      	lsrs	r3, r3, #6
 8003e24:	2200      	movs	r2, #0
 8003e26:	623b      	str	r3, [r7, #32]
 8003e28:	627a      	str	r2, [r7, #36]	@ 0x24
 8003e2a:	6a3b      	ldr	r3, [r7, #32]
 8003e2c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003e30:	2100      	movs	r1, #0
 8003e32:	4b47      	ldr	r3, [pc, #284]	@ (8003f50 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e34:	fb03 f201 	mul.w	r2, r3, r1
 8003e38:	2300      	movs	r3, #0
 8003e3a:	fb00 f303 	mul.w	r3, r0, r3
 8003e3e:	4413      	add	r3, r2
 8003e40:	4a43      	ldr	r2, [pc, #268]	@ (8003f50 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e42:	fba0 1202 	umull	r1, r2, r0, r2
 8003e46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e48:	460a      	mov	r2, r1
 8003e4a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003e4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e4e:	4413      	add	r3, r2
 8003e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e54:	2200      	movs	r2, #0
 8003e56:	61bb      	str	r3, [r7, #24]
 8003e58:	61fa      	str	r2, [r7, #28]
 8003e5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e5e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003e62:	f7fc fa05 	bl	8000270 <__aeabi_uldivmod>
 8003e66:	4602      	mov	r2, r0
 8003e68:	460b      	mov	r3, r1
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e6e:	e053      	b.n	8003f18 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e70:	4b35      	ldr	r3, [pc, #212]	@ (8003f48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	099b      	lsrs	r3, r3, #6
 8003e76:	2200      	movs	r2, #0
 8003e78:	613b      	str	r3, [r7, #16]
 8003e7a:	617a      	str	r2, [r7, #20]
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003e82:	f04f 0b00 	mov.w	fp, #0
 8003e86:	4652      	mov	r2, sl
 8003e88:	465b      	mov	r3, fp
 8003e8a:	f04f 0000 	mov.w	r0, #0
 8003e8e:	f04f 0100 	mov.w	r1, #0
 8003e92:	0159      	lsls	r1, r3, #5
 8003e94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e98:	0150      	lsls	r0, r2, #5
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	ebb2 080a 	subs.w	r8, r2, sl
 8003ea2:	eb63 090b 	sbc.w	r9, r3, fp
 8003ea6:	f04f 0200 	mov.w	r2, #0
 8003eaa:	f04f 0300 	mov.w	r3, #0
 8003eae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003eb2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003eb6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003eba:	ebb2 0408 	subs.w	r4, r2, r8
 8003ebe:	eb63 0509 	sbc.w	r5, r3, r9
 8003ec2:	f04f 0200 	mov.w	r2, #0
 8003ec6:	f04f 0300 	mov.w	r3, #0
 8003eca:	00eb      	lsls	r3, r5, #3
 8003ecc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ed0:	00e2      	lsls	r2, r4, #3
 8003ed2:	4614      	mov	r4, r2
 8003ed4:	461d      	mov	r5, r3
 8003ed6:	eb14 030a 	adds.w	r3, r4, sl
 8003eda:	603b      	str	r3, [r7, #0]
 8003edc:	eb45 030b 	adc.w	r3, r5, fp
 8003ee0:	607b      	str	r3, [r7, #4]
 8003ee2:	f04f 0200 	mov.w	r2, #0
 8003ee6:	f04f 0300 	mov.w	r3, #0
 8003eea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003eee:	4629      	mov	r1, r5
 8003ef0:	028b      	lsls	r3, r1, #10
 8003ef2:	4621      	mov	r1, r4
 8003ef4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ef8:	4621      	mov	r1, r4
 8003efa:	028a      	lsls	r2, r1, #10
 8003efc:	4610      	mov	r0, r2
 8003efe:	4619      	mov	r1, r3
 8003f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f02:	2200      	movs	r2, #0
 8003f04:	60bb      	str	r3, [r7, #8]
 8003f06:	60fa      	str	r2, [r7, #12]
 8003f08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f0c:	f7fc f9b0 	bl	8000270 <__aeabi_uldivmod>
 8003f10:	4602      	mov	r2, r0
 8003f12:	460b      	mov	r3, r1
 8003f14:	4613      	mov	r3, r2
 8003f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003f18:	4b0b      	ldr	r3, [pc, #44]	@ (8003f48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	0c1b      	lsrs	r3, r3, #16
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	3301      	adds	r3, #1
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003f28:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f30:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f32:	e002      	b.n	8003f3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f34:	4b05      	ldr	r3, [pc, #20]	@ (8003f4c <HAL_RCC_GetSysClockFreq+0x184>)
 8003f36:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3740      	adds	r7, #64	@ 0x40
 8003f40:	46bd      	mov	sp, r7
 8003f42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f46:	bf00      	nop
 8003f48:	40023800 	.word	0x40023800
 8003f4c:	00f42400 	.word	0x00f42400
 8003f50:	017d7840 	.word	0x017d7840

08003f54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f58:	4b03      	ldr	r3, [pc, #12]	@ (8003f68 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	20000000 	.word	0x20000000

08003f6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f70:	f7ff fff0 	bl	8003f54 <HAL_RCC_GetHCLKFreq>
 8003f74:	4602      	mov	r2, r0
 8003f76:	4b05      	ldr	r3, [pc, #20]	@ (8003f8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	0a9b      	lsrs	r3, r3, #10
 8003f7c:	f003 0307 	and.w	r3, r3, #7
 8003f80:	4903      	ldr	r1, [pc, #12]	@ (8003f90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f82:	5ccb      	ldrb	r3, [r1, r3]
 8003f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	40023800 	.word	0x40023800
 8003f90:	08007328 	.word	0x08007328

08003f94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f98:	f7ff ffdc 	bl	8003f54 <HAL_RCC_GetHCLKFreq>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	4b05      	ldr	r3, [pc, #20]	@ (8003fb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	0b5b      	lsrs	r3, r3, #13
 8003fa4:	f003 0307 	and.w	r3, r3, #7
 8003fa8:	4903      	ldr	r1, [pc, #12]	@ (8003fb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003faa:	5ccb      	ldrb	r3, [r1, r3]
 8003fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	40023800 	.word	0x40023800
 8003fb8:	08007328 	.word	0x08007328

08003fbc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	220f      	movs	r2, #15
 8003fca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003fcc:	4b12      	ldr	r3, [pc, #72]	@ (8004018 <HAL_RCC_GetClockConfig+0x5c>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f003 0203 	and.w	r2, r3, #3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8004018 <HAL_RCC_GetClockConfig+0x5c>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8004018 <HAL_RCC_GetClockConfig+0x5c>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003ff0:	4b09      	ldr	r3, [pc, #36]	@ (8004018 <HAL_RCC_GetClockConfig+0x5c>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	08db      	lsrs	r3, r3, #3
 8003ff6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ffe:	4b07      	ldr	r3, [pc, #28]	@ (800401c <HAL_RCC_GetClockConfig+0x60>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0207 	and.w	r2, r3, #7
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	601a      	str	r2, [r3, #0]
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	40023800 	.word	0x40023800
 800401c:	40023c00 	.word	0x40023c00

08004020 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e07b      	b.n	800412a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004036:	2b00      	cmp	r3, #0
 8004038:	d108      	bne.n	800404c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004042:	d009      	beq.n	8004058 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	61da      	str	r2, [r3, #28]
 800404a:	e005      	b.n	8004058 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d106      	bne.n	8004078 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f7fc ff7c 	bl	8000f70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2202      	movs	r2, #2
 800407c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800408e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80040a0:	431a      	orrs	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040aa:	431a      	orrs	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	431a      	orrs	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	431a      	orrs	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040c8:	431a      	orrs	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040d2:	431a      	orrs	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040dc:	ea42 0103 	orr.w	r1, r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	0c1b      	lsrs	r3, r3, #16
 80040f6:	f003 0104 	and.w	r1, r3, #4
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fe:	f003 0210 	and.w	r2, r3, #16
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	69da      	ldr	r2, [r3, #28]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004118:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b088      	sub	sp, #32
 8004136:	af00      	add	r7, sp, #0
 8004138:	60f8      	str	r0, [r7, #12]
 800413a:	60b9      	str	r1, [r7, #8]
 800413c:	603b      	str	r3, [r7, #0]
 800413e:	4613      	mov	r3, r2
 8004140:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004142:	f7fe f98b 	bl	800245c <HAL_GetTick>
 8004146:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004148:	88fb      	ldrh	r3, [r7, #6]
 800414a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b01      	cmp	r3, #1
 8004156:	d001      	beq.n	800415c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004158:	2302      	movs	r3, #2
 800415a:	e12a      	b.n	80043b2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d002      	beq.n	8004168 <HAL_SPI_Transmit+0x36>
 8004162:	88fb      	ldrh	r3, [r7, #6]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d101      	bne.n	800416c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e122      	b.n	80043b2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004172:	2b01      	cmp	r3, #1
 8004174:	d101      	bne.n	800417a <HAL_SPI_Transmit+0x48>
 8004176:	2302      	movs	r3, #2
 8004178:	e11b      	b.n	80043b2 <HAL_SPI_Transmit+0x280>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2203      	movs	r2, #3
 8004186:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	88fa      	ldrh	r2, [r7, #6]
 800419a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	88fa      	ldrh	r2, [r7, #6]
 80041a0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041c8:	d10f      	bne.n	80041ea <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80041e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041f4:	2b40      	cmp	r3, #64	@ 0x40
 80041f6:	d007      	beq.n	8004208 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004206:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004210:	d152      	bne.n	80042b8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d002      	beq.n	8004220 <HAL_SPI_Transmit+0xee>
 800421a:	8b7b      	ldrh	r3, [r7, #26]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d145      	bne.n	80042ac <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004224:	881a      	ldrh	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004230:	1c9a      	adds	r2, r3, #2
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800423a:	b29b      	uxth	r3, r3
 800423c:	3b01      	subs	r3, #1
 800423e:	b29a      	uxth	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004244:	e032      	b.n	80042ac <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	2b02      	cmp	r3, #2
 8004252:	d112      	bne.n	800427a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004258:	881a      	ldrh	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004264:	1c9a      	adds	r2, r3, #2
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800426e:	b29b      	uxth	r3, r3
 8004270:	3b01      	subs	r3, #1
 8004272:	b29a      	uxth	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004278:	e018      	b.n	80042ac <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800427a:	f7fe f8ef 	bl	800245c <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	683a      	ldr	r2, [r7, #0]
 8004286:	429a      	cmp	r2, r3
 8004288:	d803      	bhi.n	8004292 <HAL_SPI_Transmit+0x160>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004290:	d102      	bne.n	8004298 <HAL_SPI_Transmit+0x166>
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d109      	bne.n	80042ac <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e082      	b.n	80043b2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1c7      	bne.n	8004246 <HAL_SPI_Transmit+0x114>
 80042b6:	e053      	b.n	8004360 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d002      	beq.n	80042c6 <HAL_SPI_Transmit+0x194>
 80042c0:	8b7b      	ldrh	r3, [r7, #26]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d147      	bne.n	8004356 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	330c      	adds	r3, #12
 80042d0:	7812      	ldrb	r2, [r2, #0]
 80042d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d8:	1c5a      	adds	r2, r3, #1
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	3b01      	subs	r3, #1
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80042ec:	e033      	b.n	8004356 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d113      	bne.n	8004324 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	330c      	adds	r3, #12
 8004306:	7812      	ldrb	r2, [r2, #0]
 8004308:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800430e:	1c5a      	adds	r2, r3, #1
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004318:	b29b      	uxth	r3, r3
 800431a:	3b01      	subs	r3, #1
 800431c:	b29a      	uxth	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004322:	e018      	b.n	8004356 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004324:	f7fe f89a 	bl	800245c <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	429a      	cmp	r2, r3
 8004332:	d803      	bhi.n	800433c <HAL_SPI_Transmit+0x20a>
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433a:	d102      	bne.n	8004342 <HAL_SPI_Transmit+0x210>
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d109      	bne.n	8004356 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e02d      	b.n	80043b2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800435a:	b29b      	uxth	r3, r3
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1c6      	bne.n	80042ee <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004360:	69fa      	ldr	r2, [r7, #28]
 8004362:	6839      	ldr	r1, [r7, #0]
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	f000 fbd9 	bl	8004b1c <SPI_EndRxTxTransaction>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d002      	beq.n	8004376 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2220      	movs	r2, #32
 8004374:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10a      	bne.n	8004394 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800437e:	2300      	movs	r3, #0
 8004380:	617b      	str	r3, [r7, #20]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	617b      	str	r3, [r7, #20]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	617b      	str	r3, [r7, #20]
 8004392:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d001      	beq.n	80043b0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e000      	b.n	80043b2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80043b0:	2300      	movs	r3, #0
  }
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3720      	adds	r7, #32
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b088      	sub	sp, #32
 80043be:	af02      	add	r7, sp, #8
 80043c0:	60f8      	str	r0, [r7, #12]
 80043c2:	60b9      	str	r1, [r7, #8]
 80043c4:	603b      	str	r3, [r7, #0]
 80043c6:	4613      	mov	r3, r2
 80043c8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d001      	beq.n	80043da <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80043d6:	2302      	movs	r3, #2
 80043d8:	e104      	b.n	80045e4 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043e2:	d112      	bne.n	800440a <HAL_SPI_Receive+0x50>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10e      	bne.n	800440a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2204      	movs	r2, #4
 80043f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80043f4:	88fa      	ldrh	r2, [r7, #6]
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	4613      	mov	r3, r2
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	68b9      	ldr	r1, [r7, #8]
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f000 f8f3 	bl	80045ec <HAL_SPI_TransmitReceive>
 8004406:	4603      	mov	r3, r0
 8004408:	e0ec      	b.n	80045e4 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800440a:	f7fe f827 	bl	800245c <HAL_GetTick>
 800440e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d002      	beq.n	800441c <HAL_SPI_Receive+0x62>
 8004416:	88fb      	ldrh	r3, [r7, #6]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e0e1      	b.n	80045e4 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004426:	2b01      	cmp	r3, #1
 8004428:	d101      	bne.n	800442e <HAL_SPI_Receive+0x74>
 800442a:	2302      	movs	r3, #2
 800442c:	e0da      	b.n	80045e4 <HAL_SPI_Receive+0x22a>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2204      	movs	r2, #4
 800443a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	68ba      	ldr	r2, [r7, #8]
 8004448:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	88fa      	ldrh	r2, [r7, #6]
 800444e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	88fa      	ldrh	r2, [r7, #6]
 8004454:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800447c:	d10f      	bne.n	800449e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800448c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800449c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044a8:	2b40      	cmp	r3, #64	@ 0x40
 80044aa:	d007      	beq.n	80044bc <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044ba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d170      	bne.n	80045a6 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80044c4:	e035      	b.n	8004532 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d115      	bne.n	8004500 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f103 020c 	add.w	r2, r3, #12
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044e0:	7812      	ldrb	r2, [r2, #0]
 80044e2:	b2d2      	uxtb	r2, r2
 80044e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ea:	1c5a      	adds	r2, r3, #1
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	3b01      	subs	r3, #1
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80044fe:	e018      	b.n	8004532 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004500:	f7fd ffac 	bl	800245c <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	429a      	cmp	r2, r3
 800450e:	d803      	bhi.n	8004518 <HAL_SPI_Receive+0x15e>
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004516:	d102      	bne.n	800451e <HAL_SPI_Receive+0x164>
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d109      	bne.n	8004532 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e058      	b.n	80045e4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004536:	b29b      	uxth	r3, r3
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1c4      	bne.n	80044c6 <HAL_SPI_Receive+0x10c>
 800453c:	e038      	b.n	80045b0 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	2b01      	cmp	r3, #1
 800454a:	d113      	bne.n	8004574 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68da      	ldr	r2, [r3, #12]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004556:	b292      	uxth	r2, r2
 8004558:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800455e:	1c9a      	adds	r2, r3, #2
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004568:	b29b      	uxth	r3, r3
 800456a:	3b01      	subs	r3, #1
 800456c:	b29a      	uxth	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004572:	e018      	b.n	80045a6 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004574:	f7fd ff72 	bl	800245c <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	429a      	cmp	r2, r3
 8004582:	d803      	bhi.n	800458c <HAL_SPI_Receive+0x1d2>
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800458a:	d102      	bne.n	8004592 <HAL_SPI_Receive+0x1d8>
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d109      	bne.n	80045a6 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e01e      	b.n	80045e4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1c6      	bne.n	800453e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	6839      	ldr	r1, [r7, #0]
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f000 fa4b 	bl	8004a50 <SPI_EndRxTransaction>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d002      	beq.n	80045c6 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2220      	movs	r2, #32
 80045c4:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e000      	b.n	80045e4 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80045e2:	2300      	movs	r3, #0
  }
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3718      	adds	r7, #24
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b08a      	sub	sp, #40	@ 0x28
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
 80045f8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80045fa:	2301      	movs	r3, #1
 80045fc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045fe:	f7fd ff2d 	bl	800245c <HAL_GetTick>
 8004602:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800460a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004612:	887b      	ldrh	r3, [r7, #2]
 8004614:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004616:	7ffb      	ldrb	r3, [r7, #31]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d00c      	beq.n	8004636 <HAL_SPI_TransmitReceive+0x4a>
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004622:	d106      	bne.n	8004632 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d102      	bne.n	8004632 <HAL_SPI_TransmitReceive+0x46>
 800462c:	7ffb      	ldrb	r3, [r7, #31]
 800462e:	2b04      	cmp	r3, #4
 8004630:	d001      	beq.n	8004636 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004632:	2302      	movs	r3, #2
 8004634:	e17f      	b.n	8004936 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d005      	beq.n	8004648 <HAL_SPI_TransmitReceive+0x5c>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <HAL_SPI_TransmitReceive+0x5c>
 8004642:	887b      	ldrh	r3, [r7, #2]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e174      	b.n	8004936 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004652:	2b01      	cmp	r3, #1
 8004654:	d101      	bne.n	800465a <HAL_SPI_TransmitReceive+0x6e>
 8004656:	2302      	movs	r3, #2
 8004658:	e16d      	b.n	8004936 <HAL_SPI_TransmitReceive+0x34a>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b04      	cmp	r3, #4
 800466c:	d003      	beq.n	8004676 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2205      	movs	r2, #5
 8004672:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	887a      	ldrh	r2, [r7, #2]
 8004686:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	887a      	ldrh	r2, [r7, #2]
 800468c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	887a      	ldrh	r2, [r7, #2]
 8004698:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	887a      	ldrh	r2, [r7, #2]
 800469e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046b6:	2b40      	cmp	r3, #64	@ 0x40
 80046b8:	d007      	beq.n	80046ca <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046d2:	d17e      	bne.n	80047d2 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d002      	beq.n	80046e2 <HAL_SPI_TransmitReceive+0xf6>
 80046dc:	8afb      	ldrh	r3, [r7, #22]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d16c      	bne.n	80047bc <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e6:	881a      	ldrh	r2, [r3, #0]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f2:	1c9a      	adds	r2, r3, #2
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	3b01      	subs	r3, #1
 8004700:	b29a      	uxth	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004706:	e059      	b.n	80047bc <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b02      	cmp	r3, #2
 8004714:	d11b      	bne.n	800474e <HAL_SPI_TransmitReceive+0x162>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800471a:	b29b      	uxth	r3, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	d016      	beq.n	800474e <HAL_SPI_TransmitReceive+0x162>
 8004720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004722:	2b01      	cmp	r3, #1
 8004724:	d113      	bne.n	800474e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800472a:	881a      	ldrh	r2, [r3, #0]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004736:	1c9a      	adds	r2, r3, #2
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004740:	b29b      	uxth	r3, r3
 8004742:	3b01      	subs	r3, #1
 8004744:	b29a      	uxth	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800474a:	2300      	movs	r3, #0
 800474c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b01      	cmp	r3, #1
 800475a:	d119      	bne.n	8004790 <HAL_SPI_TransmitReceive+0x1a4>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004760:	b29b      	uxth	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d014      	beq.n	8004790 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68da      	ldr	r2, [r3, #12]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004770:	b292      	uxth	r2, r2
 8004772:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004778:	1c9a      	adds	r2, r3, #2
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004782:	b29b      	uxth	r3, r3
 8004784:	3b01      	subs	r3, #1
 8004786:	b29a      	uxth	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800478c:	2301      	movs	r3, #1
 800478e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004790:	f7fd fe64 	bl	800245c <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	6a3b      	ldr	r3, [r7, #32]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800479c:	429a      	cmp	r2, r3
 800479e:	d80d      	bhi.n	80047bc <HAL_SPI_TransmitReceive+0x1d0>
 80047a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a6:	d009      	beq.n	80047bc <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e0bc      	b.n	8004936 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1a0      	bne.n	8004708 <HAL_SPI_TransmitReceive+0x11c>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d19b      	bne.n	8004708 <HAL_SPI_TransmitReceive+0x11c>
 80047d0:	e082      	b.n	80048d8 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d002      	beq.n	80047e0 <HAL_SPI_TransmitReceive+0x1f4>
 80047da:	8afb      	ldrh	r3, [r7, #22]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d171      	bne.n	80048c4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	330c      	adds	r3, #12
 80047ea:	7812      	ldrb	r2, [r2, #0]
 80047ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f2:	1c5a      	adds	r2, r3, #1
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	3b01      	subs	r3, #1
 8004800:	b29a      	uxth	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004806:	e05d      	b.n	80048c4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b02      	cmp	r3, #2
 8004814:	d11c      	bne.n	8004850 <HAL_SPI_TransmitReceive+0x264>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800481a:	b29b      	uxth	r3, r3
 800481c:	2b00      	cmp	r3, #0
 800481e:	d017      	beq.n	8004850 <HAL_SPI_TransmitReceive+0x264>
 8004820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004822:	2b01      	cmp	r3, #1
 8004824:	d114      	bne.n	8004850 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	330c      	adds	r3, #12
 8004830:	7812      	ldrb	r2, [r2, #0]
 8004832:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004838:	1c5a      	adds	r2, r3, #1
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004842:	b29b      	uxth	r3, r3
 8004844:	3b01      	subs	r3, #1
 8004846:	b29a      	uxth	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800484c:	2300      	movs	r3, #0
 800484e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b01      	cmp	r3, #1
 800485c:	d119      	bne.n	8004892 <HAL_SPI_TransmitReceive+0x2a6>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004862:	b29b      	uxth	r3, r3
 8004864:	2b00      	cmp	r3, #0
 8004866:	d014      	beq.n	8004892 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68da      	ldr	r2, [r3, #12]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004872:	b2d2      	uxtb	r2, r2
 8004874:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800487a:	1c5a      	adds	r2, r3, #1
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004884:	b29b      	uxth	r3, r3
 8004886:	3b01      	subs	r3, #1
 8004888:	b29a      	uxth	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800488e:	2301      	movs	r3, #1
 8004890:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004892:	f7fd fde3 	bl	800245c <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	6a3b      	ldr	r3, [r7, #32]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800489e:	429a      	cmp	r2, r3
 80048a0:	d803      	bhi.n	80048aa <HAL_SPI_TransmitReceive+0x2be>
 80048a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a8:	d102      	bne.n	80048b0 <HAL_SPI_TransmitReceive+0x2c4>
 80048aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d109      	bne.n	80048c4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e038      	b.n	8004936 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d19c      	bne.n	8004808 <HAL_SPI_TransmitReceive+0x21c>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d197      	bne.n	8004808 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048d8:	6a3a      	ldr	r2, [r7, #32]
 80048da:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f000 f91d 	bl	8004b1c <SPI_EndRxTxTransaction>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d008      	beq.n	80048fa <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2220      	movs	r2, #32
 80048ec:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e01d      	b.n	8004936 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10a      	bne.n	8004918 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004902:	2300      	movs	r3, #0
 8004904:	613b      	str	r3, [r7, #16]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	613b      	str	r3, [r7, #16]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	613b      	str	r3, [r7, #16]
 8004916:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e000      	b.n	8004936 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004934:	2300      	movs	r3, #0
  }
}
 8004936:	4618      	mov	r0, r3
 8004938:	3728      	adds	r7, #40	@ 0x28
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
	...

08004940 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b088      	sub	sp, #32
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	603b      	str	r3, [r7, #0]
 800494c:	4613      	mov	r3, r2
 800494e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004950:	f7fd fd84 	bl	800245c <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004958:	1a9b      	subs	r3, r3, r2
 800495a:	683a      	ldr	r2, [r7, #0]
 800495c:	4413      	add	r3, r2
 800495e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004960:	f7fd fd7c 	bl	800245c <HAL_GetTick>
 8004964:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004966:	4b39      	ldr	r3, [pc, #228]	@ (8004a4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	015b      	lsls	r3, r3, #5
 800496c:	0d1b      	lsrs	r3, r3, #20
 800496e:	69fa      	ldr	r2, [r7, #28]
 8004970:	fb02 f303 	mul.w	r3, r2, r3
 8004974:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004976:	e054      	b.n	8004a22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497e:	d050      	beq.n	8004a22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004980:	f7fd fd6c 	bl	800245c <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	69fa      	ldr	r2, [r7, #28]
 800498c:	429a      	cmp	r2, r3
 800498e:	d902      	bls.n	8004996 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d13d      	bne.n	8004a12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80049a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049ae:	d111      	bne.n	80049d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049b8:	d004      	beq.n	80049c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049c2:	d107      	bne.n	80049d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049dc:	d10f      	bne.n	80049fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80049ec:	601a      	str	r2, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80049fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2201      	movs	r2, #1
 8004a02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e017      	b.n	8004a42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d101      	bne.n	8004a1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689a      	ldr	r2, [r3, #8]
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	bf0c      	ite	eq
 8004a32:	2301      	moveq	r3, #1
 8004a34:	2300      	movne	r3, #0
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	461a      	mov	r2, r3
 8004a3a:	79fb      	ldrb	r3, [r7, #7]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d19b      	bne.n	8004978 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3720      	adds	r7, #32
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	20000000 	.word	0x20000000

08004a50 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af02      	add	r7, sp, #8
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a64:	d111      	bne.n	8004a8a <SPI_EndRxTransaction+0x3a>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a6e:	d004      	beq.n	8004a7a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a78:	d107      	bne.n	8004a8a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a88:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a92:	d12a      	bne.n	8004aea <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a9c:	d012      	beq.n	8004ac4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	9300      	str	r3, [sp, #0]
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	2180      	movs	r1, #128	@ 0x80
 8004aa8:	68f8      	ldr	r0, [r7, #12]
 8004aaa:	f7ff ff49 	bl	8004940 <SPI_WaitFlagStateUntilTimeout>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d02d      	beq.n	8004b10 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ab8:	f043 0220 	orr.w	r2, r3, #32
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e026      	b.n	8004b12 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	2200      	movs	r2, #0
 8004acc:	2101      	movs	r1, #1
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f7ff ff36 	bl	8004940 <SPI_WaitFlagStateUntilTimeout>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d01a      	beq.n	8004b10 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ade:	f043 0220 	orr.w	r2, r3, #32
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e013      	b.n	8004b12 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	2200      	movs	r2, #0
 8004af2:	2101      	movs	r1, #1
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f7ff ff23 	bl	8004940 <SPI_WaitFlagStateUntilTimeout>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d007      	beq.n	8004b10 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b04:	f043 0220 	orr.w	r2, r3, #32
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e000      	b.n	8004b12 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
	...

08004b1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b088      	sub	sp, #32
 8004b20:	af02      	add	r7, sp, #8
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	2102      	movs	r1, #2
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f7ff ff04 	bl	8004940 <SPI_WaitFlagStateUntilTimeout>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d007      	beq.n	8004b4e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b42:	f043 0220 	orr.w	r2, r3, #32
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e032      	b.n	8004bb4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004b4e:	4b1b      	ldr	r3, [pc, #108]	@ (8004bbc <SPI_EndRxTxTransaction+0xa0>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a1b      	ldr	r2, [pc, #108]	@ (8004bc0 <SPI_EndRxTxTransaction+0xa4>)
 8004b54:	fba2 2303 	umull	r2, r3, r2, r3
 8004b58:	0d5b      	lsrs	r3, r3, #21
 8004b5a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004b5e:	fb02 f303 	mul.w	r3, r2, r3
 8004b62:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b6c:	d112      	bne.n	8004b94 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	9300      	str	r3, [sp, #0]
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	2200      	movs	r2, #0
 8004b76:	2180      	movs	r1, #128	@ 0x80
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	f7ff fee1 	bl	8004940 <SPI_WaitFlagStateUntilTimeout>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d016      	beq.n	8004bb2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b88:	f043 0220 	orr.w	r2, r3, #32
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e00f      	b.n	8004bb4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00a      	beq.n	8004bb0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004baa:	2b80      	cmp	r3, #128	@ 0x80
 8004bac:	d0f2      	beq.n	8004b94 <SPI_EndRxTxTransaction+0x78>
 8004bae:	e000      	b.n	8004bb2 <SPI_EndRxTxTransaction+0x96>
        break;
 8004bb0:	bf00      	nop
  }

  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3718      	adds	r7, #24
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	20000000 	.word	0x20000000
 8004bc0:	165e9f81 	.word	0x165e9f81

08004bc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e041      	b.n	8004c5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d106      	bne.n	8004bf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7fc fd66 	bl	80016bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	3304      	adds	r3, #4
 8004c00:	4619      	mov	r1, r3
 8004c02:	4610      	mov	r0, r2
 8004c04:	f000 fb90 	bl	8005328 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3708      	adds	r7, #8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
	...

08004c64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d001      	beq.n	8004c7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e04e      	b.n	8004d1a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2202      	movs	r2, #2
 8004c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68da      	ldr	r2, [r3, #12]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f042 0201 	orr.w	r2, r2, #1
 8004c92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a23      	ldr	r2, [pc, #140]	@ (8004d28 <HAL_TIM_Base_Start_IT+0xc4>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d022      	beq.n	8004ce4 <HAL_TIM_Base_Start_IT+0x80>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ca6:	d01d      	beq.n	8004ce4 <HAL_TIM_Base_Start_IT+0x80>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a1f      	ldr	r2, [pc, #124]	@ (8004d2c <HAL_TIM_Base_Start_IT+0xc8>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d018      	beq.n	8004ce4 <HAL_TIM_Base_Start_IT+0x80>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a1e      	ldr	r2, [pc, #120]	@ (8004d30 <HAL_TIM_Base_Start_IT+0xcc>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d013      	beq.n	8004ce4 <HAL_TIM_Base_Start_IT+0x80>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a1c      	ldr	r2, [pc, #112]	@ (8004d34 <HAL_TIM_Base_Start_IT+0xd0>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d00e      	beq.n	8004ce4 <HAL_TIM_Base_Start_IT+0x80>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a1b      	ldr	r2, [pc, #108]	@ (8004d38 <HAL_TIM_Base_Start_IT+0xd4>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d009      	beq.n	8004ce4 <HAL_TIM_Base_Start_IT+0x80>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a19      	ldr	r2, [pc, #100]	@ (8004d3c <HAL_TIM_Base_Start_IT+0xd8>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d004      	beq.n	8004ce4 <HAL_TIM_Base_Start_IT+0x80>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a18      	ldr	r2, [pc, #96]	@ (8004d40 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d111      	bne.n	8004d08 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f003 0307 	and.w	r3, r3, #7
 8004cee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2b06      	cmp	r3, #6
 8004cf4:	d010      	beq.n	8004d18 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f042 0201 	orr.w	r2, r2, #1
 8004d04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d06:	e007      	b.n	8004d18 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f042 0201 	orr.w	r2, r2, #1
 8004d16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	40010000 	.word	0x40010000
 8004d2c:	40000400 	.word	0x40000400
 8004d30:	40000800 	.word	0x40000800
 8004d34:	40000c00 	.word	0x40000c00
 8004d38:	40010400 	.word	0x40010400
 8004d3c:	40014000 	.word	0x40014000
 8004d40:	40001800 	.word	0x40001800

08004d44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e041      	b.n	8004dda <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d106      	bne.n	8004d70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f7fc fd10 	bl	8001790 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2202      	movs	r2, #2
 8004d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	3304      	adds	r3, #4
 8004d80:	4619      	mov	r1, r3
 8004d82:	4610      	mov	r0, r2
 8004d84:	f000 fad0 	bl	8005328 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3708      	adds	r7, #8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b084      	sub	sp, #16
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d020      	beq.n	8004e46 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d01b      	beq.n	8004e46 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f06f 0202 	mvn.w	r2, #2
 8004e16:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	f003 0303 	and.w	r3, r3, #3
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d003      	beq.n	8004e34 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 fa5c 	bl	80052ea <HAL_TIM_IC_CaptureCallback>
 8004e32:	e005      	b.n	8004e40 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 fa4e 	bl	80052d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 fa5f 	bl	80052fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	f003 0304 	and.w	r3, r3, #4
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d020      	beq.n	8004e92 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f003 0304 	and.w	r3, r3, #4
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d01b      	beq.n	8004e92 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f06f 0204 	mvn.w	r2, #4
 8004e62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2202      	movs	r2, #2
 8004e68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d003      	beq.n	8004e80 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 fa36 	bl	80052ea <HAL_TIM_IC_CaptureCallback>
 8004e7e:	e005      	b.n	8004e8c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 fa28 	bl	80052d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 fa39 	bl	80052fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	f003 0308 	and.w	r3, r3, #8
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d020      	beq.n	8004ede <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f003 0308 	and.w	r3, r3, #8
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d01b      	beq.n	8004ede <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f06f 0208 	mvn.w	r2, #8
 8004eae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2204      	movs	r2, #4
 8004eb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	69db      	ldr	r3, [r3, #28]
 8004ebc:	f003 0303 	and.w	r3, r3, #3
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d003      	beq.n	8004ecc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 fa10 	bl	80052ea <HAL_TIM_IC_CaptureCallback>
 8004eca:	e005      	b.n	8004ed8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 fa02 	bl	80052d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 fa13 	bl	80052fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	f003 0310 	and.w	r3, r3, #16
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d020      	beq.n	8004f2a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f003 0310 	and.w	r3, r3, #16
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d01b      	beq.n	8004f2a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f06f 0210 	mvn.w	r2, #16
 8004efa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2208      	movs	r2, #8
 8004f00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	69db      	ldr	r3, [r3, #28]
 8004f08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d003      	beq.n	8004f18 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 f9ea 	bl	80052ea <HAL_TIM_IC_CaptureCallback>
 8004f16:	e005      	b.n	8004f24 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 f9dc 	bl	80052d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f9ed 	bl	80052fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00c      	beq.n	8004f4e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d007      	beq.n	8004f4e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f06f 0201 	mvn.w	r2, #1
 8004f46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f7fb ffc3 	bl	8000ed4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00c      	beq.n	8004f72 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d007      	beq.n	8004f72 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004f6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 fd57 	bl	8005a20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00c      	beq.n	8004f96 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d007      	beq.n	8004f96 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004f8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 f9be 	bl	8005312 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	f003 0320 	and.w	r3, r3, #32
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00c      	beq.n	8004fba <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f003 0320 	and.w	r3, r3, #32
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d007      	beq.n	8004fba <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f06f 0220 	mvn.w	r2, #32
 8004fb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 fd29 	bl	8005a0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fba:	bf00      	nop
 8004fbc:	3710      	adds	r7, #16
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
	...

08004fc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d101      	bne.n	8004fe2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004fde:	2302      	movs	r3, #2
 8004fe0:	e0ae      	b.n	8005140 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2b0c      	cmp	r3, #12
 8004fee:	f200 809f 	bhi.w	8005130 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ff8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff8:	0800502d 	.word	0x0800502d
 8004ffc:	08005131 	.word	0x08005131
 8005000:	08005131 	.word	0x08005131
 8005004:	08005131 	.word	0x08005131
 8005008:	0800506d 	.word	0x0800506d
 800500c:	08005131 	.word	0x08005131
 8005010:	08005131 	.word	0x08005131
 8005014:	08005131 	.word	0x08005131
 8005018:	080050af 	.word	0x080050af
 800501c:	08005131 	.word	0x08005131
 8005020:	08005131 	.word	0x08005131
 8005024:	08005131 	.word	0x08005131
 8005028:	080050ef 	.word	0x080050ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68b9      	ldr	r1, [r7, #8]
 8005032:	4618      	mov	r0, r3
 8005034:	f000 fa24 	bl	8005480 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	699a      	ldr	r2, [r3, #24]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f042 0208 	orr.w	r2, r2, #8
 8005046:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	699a      	ldr	r2, [r3, #24]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f022 0204 	bic.w	r2, r2, #4
 8005056:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6999      	ldr	r1, [r3, #24]
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	691a      	ldr	r2, [r3, #16]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	430a      	orrs	r2, r1
 8005068:	619a      	str	r2, [r3, #24]
      break;
 800506a:	e064      	b.n	8005136 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68b9      	ldr	r1, [r7, #8]
 8005072:	4618      	mov	r0, r3
 8005074:	f000 fa74 	bl	8005560 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	699a      	ldr	r2, [r3, #24]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005086:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	699a      	ldr	r2, [r3, #24]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005096:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6999      	ldr	r1, [r3, #24]
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	021a      	lsls	r2, r3, #8
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	430a      	orrs	r2, r1
 80050aa:	619a      	str	r2, [r3, #24]
      break;
 80050ac:	e043      	b.n	8005136 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68b9      	ldr	r1, [r7, #8]
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 fac9 	bl	800564c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	69da      	ldr	r2, [r3, #28]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f042 0208 	orr.w	r2, r2, #8
 80050c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	69da      	ldr	r2, [r3, #28]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 0204 	bic.w	r2, r2, #4
 80050d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	69d9      	ldr	r1, [r3, #28]
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	691a      	ldr	r2, [r3, #16]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	61da      	str	r2, [r3, #28]
      break;
 80050ec:	e023      	b.n	8005136 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68b9      	ldr	r1, [r7, #8]
 80050f4:	4618      	mov	r0, r3
 80050f6:	f000 fb1d 	bl	8005734 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	69da      	ldr	r2, [r3, #28]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005108:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	69da      	ldr	r2, [r3, #28]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005118:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	69d9      	ldr	r1, [r3, #28]
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	021a      	lsls	r2, r3, #8
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	430a      	orrs	r2, r1
 800512c:	61da      	str	r2, [r3, #28]
      break;
 800512e:	e002      	b.n	8005136 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	75fb      	strb	r3, [r7, #23]
      break;
 8005134:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800513e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005140:	4618      	mov	r0, r3
 8005142:	3718      	adds	r7, #24
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005152:	2300      	movs	r3, #0
 8005154:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800515c:	2b01      	cmp	r3, #1
 800515e:	d101      	bne.n	8005164 <HAL_TIM_ConfigClockSource+0x1c>
 8005160:	2302      	movs	r3, #2
 8005162:	e0b4      	b.n	80052ce <HAL_TIM_ConfigClockSource+0x186>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005182:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800518a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800519c:	d03e      	beq.n	800521c <HAL_TIM_ConfigClockSource+0xd4>
 800519e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051a2:	f200 8087 	bhi.w	80052b4 <HAL_TIM_ConfigClockSource+0x16c>
 80051a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051aa:	f000 8086 	beq.w	80052ba <HAL_TIM_ConfigClockSource+0x172>
 80051ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051b2:	d87f      	bhi.n	80052b4 <HAL_TIM_ConfigClockSource+0x16c>
 80051b4:	2b70      	cmp	r3, #112	@ 0x70
 80051b6:	d01a      	beq.n	80051ee <HAL_TIM_ConfigClockSource+0xa6>
 80051b8:	2b70      	cmp	r3, #112	@ 0x70
 80051ba:	d87b      	bhi.n	80052b4 <HAL_TIM_ConfigClockSource+0x16c>
 80051bc:	2b60      	cmp	r3, #96	@ 0x60
 80051be:	d050      	beq.n	8005262 <HAL_TIM_ConfigClockSource+0x11a>
 80051c0:	2b60      	cmp	r3, #96	@ 0x60
 80051c2:	d877      	bhi.n	80052b4 <HAL_TIM_ConfigClockSource+0x16c>
 80051c4:	2b50      	cmp	r3, #80	@ 0x50
 80051c6:	d03c      	beq.n	8005242 <HAL_TIM_ConfigClockSource+0xfa>
 80051c8:	2b50      	cmp	r3, #80	@ 0x50
 80051ca:	d873      	bhi.n	80052b4 <HAL_TIM_ConfigClockSource+0x16c>
 80051cc:	2b40      	cmp	r3, #64	@ 0x40
 80051ce:	d058      	beq.n	8005282 <HAL_TIM_ConfigClockSource+0x13a>
 80051d0:	2b40      	cmp	r3, #64	@ 0x40
 80051d2:	d86f      	bhi.n	80052b4 <HAL_TIM_ConfigClockSource+0x16c>
 80051d4:	2b30      	cmp	r3, #48	@ 0x30
 80051d6:	d064      	beq.n	80052a2 <HAL_TIM_ConfigClockSource+0x15a>
 80051d8:	2b30      	cmp	r3, #48	@ 0x30
 80051da:	d86b      	bhi.n	80052b4 <HAL_TIM_ConfigClockSource+0x16c>
 80051dc:	2b20      	cmp	r3, #32
 80051de:	d060      	beq.n	80052a2 <HAL_TIM_ConfigClockSource+0x15a>
 80051e0:	2b20      	cmp	r3, #32
 80051e2:	d867      	bhi.n	80052b4 <HAL_TIM_ConfigClockSource+0x16c>
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d05c      	beq.n	80052a2 <HAL_TIM_ConfigClockSource+0x15a>
 80051e8:	2b10      	cmp	r3, #16
 80051ea:	d05a      	beq.n	80052a2 <HAL_TIM_ConfigClockSource+0x15a>
 80051ec:	e062      	b.n	80052b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051fe:	f000 fb69 	bl	80058d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005210:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	609a      	str	r2, [r3, #8]
      break;
 800521a:	e04f      	b.n	80052bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800522c:	f000 fb52 	bl	80058d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	689a      	ldr	r2, [r3, #8]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800523e:	609a      	str	r2, [r3, #8]
      break;
 8005240:	e03c      	b.n	80052bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800524e:	461a      	mov	r2, r3
 8005250:	f000 fac6 	bl	80057e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2150      	movs	r1, #80	@ 0x50
 800525a:	4618      	mov	r0, r3
 800525c:	f000 fb1f 	bl	800589e <TIM_ITRx_SetConfig>
      break;
 8005260:	e02c      	b.n	80052bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800526e:	461a      	mov	r2, r3
 8005270:	f000 fae5 	bl	800583e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2160      	movs	r1, #96	@ 0x60
 800527a:	4618      	mov	r0, r3
 800527c:	f000 fb0f 	bl	800589e <TIM_ITRx_SetConfig>
      break;
 8005280:	e01c      	b.n	80052bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800528e:	461a      	mov	r2, r3
 8005290:	f000 faa6 	bl	80057e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2140      	movs	r1, #64	@ 0x40
 800529a:	4618      	mov	r0, r3
 800529c:	f000 faff 	bl	800589e <TIM_ITRx_SetConfig>
      break;
 80052a0:	e00c      	b.n	80052bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4619      	mov	r1, r3
 80052ac:	4610      	mov	r0, r2
 80052ae:	f000 faf6 	bl	800589e <TIM_ITRx_SetConfig>
      break;
 80052b2:	e003      	b.n	80052bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	73fb      	strb	r3, [r7, #15]
      break;
 80052b8:	e000      	b.n	80052bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80052ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80052cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b083      	sub	sp, #12
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052de:	bf00      	nop
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052ea:	b480      	push	{r7}
 80052ec:	b083      	sub	sp, #12
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052f2:	bf00      	nop
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052fe:	b480      	push	{r7}
 8005300:	b083      	sub	sp, #12
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005306:	bf00      	nop
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr

08005312 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005312:	b480      	push	{r7}
 8005314:	b083      	sub	sp, #12
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800531a:	bf00      	nop
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
	...

08005328 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a46      	ldr	r2, [pc, #280]	@ (8005454 <TIM_Base_SetConfig+0x12c>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d013      	beq.n	8005368 <TIM_Base_SetConfig+0x40>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005346:	d00f      	beq.n	8005368 <TIM_Base_SetConfig+0x40>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a43      	ldr	r2, [pc, #268]	@ (8005458 <TIM_Base_SetConfig+0x130>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d00b      	beq.n	8005368 <TIM_Base_SetConfig+0x40>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a42      	ldr	r2, [pc, #264]	@ (800545c <TIM_Base_SetConfig+0x134>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d007      	beq.n	8005368 <TIM_Base_SetConfig+0x40>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a41      	ldr	r2, [pc, #260]	@ (8005460 <TIM_Base_SetConfig+0x138>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d003      	beq.n	8005368 <TIM_Base_SetConfig+0x40>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a40      	ldr	r2, [pc, #256]	@ (8005464 <TIM_Base_SetConfig+0x13c>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d108      	bne.n	800537a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800536e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	4313      	orrs	r3, r2
 8005378:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a35      	ldr	r2, [pc, #212]	@ (8005454 <TIM_Base_SetConfig+0x12c>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d02b      	beq.n	80053da <TIM_Base_SetConfig+0xb2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005388:	d027      	beq.n	80053da <TIM_Base_SetConfig+0xb2>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a32      	ldr	r2, [pc, #200]	@ (8005458 <TIM_Base_SetConfig+0x130>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d023      	beq.n	80053da <TIM_Base_SetConfig+0xb2>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a31      	ldr	r2, [pc, #196]	@ (800545c <TIM_Base_SetConfig+0x134>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d01f      	beq.n	80053da <TIM_Base_SetConfig+0xb2>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a30      	ldr	r2, [pc, #192]	@ (8005460 <TIM_Base_SetConfig+0x138>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d01b      	beq.n	80053da <TIM_Base_SetConfig+0xb2>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a2f      	ldr	r2, [pc, #188]	@ (8005464 <TIM_Base_SetConfig+0x13c>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d017      	beq.n	80053da <TIM_Base_SetConfig+0xb2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a2e      	ldr	r2, [pc, #184]	@ (8005468 <TIM_Base_SetConfig+0x140>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d013      	beq.n	80053da <TIM_Base_SetConfig+0xb2>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a2d      	ldr	r2, [pc, #180]	@ (800546c <TIM_Base_SetConfig+0x144>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d00f      	beq.n	80053da <TIM_Base_SetConfig+0xb2>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a2c      	ldr	r2, [pc, #176]	@ (8005470 <TIM_Base_SetConfig+0x148>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d00b      	beq.n	80053da <TIM_Base_SetConfig+0xb2>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a2b      	ldr	r2, [pc, #172]	@ (8005474 <TIM_Base_SetConfig+0x14c>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d007      	beq.n	80053da <TIM_Base_SetConfig+0xb2>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a2a      	ldr	r2, [pc, #168]	@ (8005478 <TIM_Base_SetConfig+0x150>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d003      	beq.n	80053da <TIM_Base_SetConfig+0xb2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a29      	ldr	r2, [pc, #164]	@ (800547c <TIM_Base_SetConfig+0x154>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d108      	bne.n	80053ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	689a      	ldr	r2, [r3, #8]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a10      	ldr	r2, [pc, #64]	@ (8005454 <TIM_Base_SetConfig+0x12c>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d003      	beq.n	8005420 <TIM_Base_SetConfig+0xf8>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a12      	ldr	r2, [pc, #72]	@ (8005464 <TIM_Base_SetConfig+0x13c>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d103      	bne.n	8005428 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	691a      	ldr	r2, [r3, #16]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b01      	cmp	r3, #1
 8005438:	d105      	bne.n	8005446 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	f023 0201 	bic.w	r2, r3, #1
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	611a      	str	r2, [r3, #16]
  }
}
 8005446:	bf00      	nop
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	40010000 	.word	0x40010000
 8005458:	40000400 	.word	0x40000400
 800545c:	40000800 	.word	0x40000800
 8005460:	40000c00 	.word	0x40000c00
 8005464:	40010400 	.word	0x40010400
 8005468:	40014000 	.word	0x40014000
 800546c:	40014400 	.word	0x40014400
 8005470:	40014800 	.word	0x40014800
 8005474:	40001800 	.word	0x40001800
 8005478:	40001c00 	.word	0x40001c00
 800547c:	40002000 	.word	0x40002000

08005480 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005480:	b480      	push	{r7}
 8005482:	b087      	sub	sp, #28
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a1b      	ldr	r3, [r3, #32]
 8005494:	f023 0201 	bic.w	r2, r3, #1
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f023 0303 	bic.w	r3, r3, #3
 80054b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	4313      	orrs	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f023 0302 	bic.w	r3, r3, #2
 80054c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a20      	ldr	r2, [pc, #128]	@ (8005558 <TIM_OC1_SetConfig+0xd8>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d003      	beq.n	80054e4 <TIM_OC1_SetConfig+0x64>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a1f      	ldr	r2, [pc, #124]	@ (800555c <TIM_OC1_SetConfig+0xdc>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d10c      	bne.n	80054fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	f023 0308 	bic.w	r3, r3, #8
 80054ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	697a      	ldr	r2, [r7, #20]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	f023 0304 	bic.w	r3, r3, #4
 80054fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a15      	ldr	r2, [pc, #84]	@ (8005558 <TIM_OC1_SetConfig+0xd8>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d003      	beq.n	800550e <TIM_OC1_SetConfig+0x8e>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a14      	ldr	r2, [pc, #80]	@ (800555c <TIM_OC1_SetConfig+0xdc>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d111      	bne.n	8005532 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005514:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800551c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	4313      	orrs	r3, r2
 8005526:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	4313      	orrs	r3, r2
 8005530:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	685a      	ldr	r2, [r3, #4]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	621a      	str	r2, [r3, #32]
}
 800554c:	bf00      	nop
 800554e:	371c      	adds	r7, #28
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr
 8005558:	40010000 	.word	0x40010000
 800555c:	40010400 	.word	0x40010400

08005560 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005560:	b480      	push	{r7}
 8005562:	b087      	sub	sp, #28
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a1b      	ldr	r3, [r3, #32]
 8005574:	f023 0210 	bic.w	r2, r3, #16
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800558e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005596:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	021b      	lsls	r3, r3, #8
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	f023 0320 	bic.w	r3, r3, #32
 80055aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	011b      	lsls	r3, r3, #4
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a22      	ldr	r2, [pc, #136]	@ (8005644 <TIM_OC2_SetConfig+0xe4>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d003      	beq.n	80055c8 <TIM_OC2_SetConfig+0x68>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a21      	ldr	r2, [pc, #132]	@ (8005648 <TIM_OC2_SetConfig+0xe8>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d10d      	bne.n	80055e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	011b      	lsls	r3, r3, #4
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	4313      	orrs	r3, r2
 80055da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a17      	ldr	r2, [pc, #92]	@ (8005644 <TIM_OC2_SetConfig+0xe4>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d003      	beq.n	80055f4 <TIM_OC2_SetConfig+0x94>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a16      	ldr	r2, [pc, #88]	@ (8005648 <TIM_OC2_SetConfig+0xe8>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d113      	bne.n	800561c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80055fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005602:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	695b      	ldr	r3, [r3, #20]
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	4313      	orrs	r3, r2
 800560e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	4313      	orrs	r3, r2
 800561a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	693a      	ldr	r2, [r7, #16]
 8005620:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	685a      	ldr	r2, [r3, #4]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	621a      	str	r2, [r3, #32]
}
 8005636:	bf00      	nop
 8005638:	371c      	adds	r7, #28
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	40010000 	.word	0x40010000
 8005648:	40010400 	.word	0x40010400

0800564c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800564c:	b480      	push	{r7}
 800564e:	b087      	sub	sp, #28
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	69db      	ldr	r3, [r3, #28]
 8005672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800567a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f023 0303 	bic.w	r3, r3, #3
 8005682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	4313      	orrs	r3, r2
 800568c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005694:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	021b      	lsls	r3, r3, #8
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	4313      	orrs	r3, r2
 80056a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a21      	ldr	r2, [pc, #132]	@ (800572c <TIM_OC3_SetConfig+0xe0>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d003      	beq.n	80056b2 <TIM_OC3_SetConfig+0x66>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a20      	ldr	r2, [pc, #128]	@ (8005730 <TIM_OC3_SetConfig+0xe4>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d10d      	bne.n	80056ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80056b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	021b      	lsls	r3, r3, #8
 80056c0:	697a      	ldr	r2, [r7, #20]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80056cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a16      	ldr	r2, [pc, #88]	@ (800572c <TIM_OC3_SetConfig+0xe0>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d003      	beq.n	80056de <TIM_OC3_SetConfig+0x92>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a15      	ldr	r2, [pc, #84]	@ (8005730 <TIM_OC3_SetConfig+0xe4>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d113      	bne.n	8005706 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80056e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80056ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	011b      	lsls	r3, r3, #4
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	011b      	lsls	r3, r3, #4
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	4313      	orrs	r3, r2
 8005704:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	685a      	ldr	r2, [r3, #4]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	621a      	str	r2, [r3, #32]
}
 8005720:	bf00      	nop
 8005722:	371c      	adds	r7, #28
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr
 800572c:	40010000 	.word	0x40010000
 8005730:	40010400 	.word	0x40010400

08005734 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005734:	b480      	push	{r7}
 8005736:	b087      	sub	sp, #28
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a1b      	ldr	r3, [r3, #32]
 8005748:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	69db      	ldr	r3, [r3, #28]
 800575a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800576a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	021b      	lsls	r3, r3, #8
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	4313      	orrs	r3, r2
 8005776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800577e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	031b      	lsls	r3, r3, #12
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	4313      	orrs	r3, r2
 800578a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a12      	ldr	r2, [pc, #72]	@ (80057d8 <TIM_OC4_SetConfig+0xa4>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d003      	beq.n	800579c <TIM_OC4_SetConfig+0x68>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a11      	ldr	r2, [pc, #68]	@ (80057dc <TIM_OC4_SetConfig+0xa8>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d109      	bne.n	80057b0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	019b      	lsls	r3, r3, #6
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	685a      	ldr	r2, [r3, #4]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	621a      	str	r2, [r3, #32]
}
 80057ca:	bf00      	nop
 80057cc:	371c      	adds	r7, #28
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	40010000 	.word	0x40010000
 80057dc:	40010400 	.word	0x40010400

080057e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b087      	sub	sp, #28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6a1b      	ldr	r3, [r3, #32]
 80057f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	f023 0201 	bic.w	r2, r3, #1
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800580a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	011b      	lsls	r3, r3, #4
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	4313      	orrs	r3, r2
 8005814:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	f023 030a 	bic.w	r3, r3, #10
 800581c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	4313      	orrs	r3, r2
 8005824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	621a      	str	r2, [r3, #32]
}
 8005832:	bf00      	nop
 8005834:	371c      	adds	r7, #28
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800583e:	b480      	push	{r7}
 8005840:	b087      	sub	sp, #28
 8005842:	af00      	add	r7, sp, #0
 8005844:	60f8      	str	r0, [r7, #12]
 8005846:	60b9      	str	r1, [r7, #8]
 8005848:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6a1b      	ldr	r3, [r3, #32]
 800584e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6a1b      	ldr	r3, [r3, #32]
 8005854:	f023 0210 	bic.w	r2, r3, #16
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005868:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	031b      	lsls	r3, r3, #12
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	4313      	orrs	r3, r2
 8005872:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800587a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	011b      	lsls	r3, r3, #4
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	4313      	orrs	r3, r2
 8005884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	693a      	ldr	r2, [r7, #16]
 800588a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	621a      	str	r2, [r3, #32]
}
 8005892:	bf00      	nop
 8005894:	371c      	adds	r7, #28
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr

0800589e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800589e:	b480      	push	{r7}
 80058a0:	b085      	sub	sp, #20
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
 80058a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	f043 0307 	orr.w	r3, r3, #7
 80058c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	609a      	str	r2, [r3, #8]
}
 80058c8:	bf00      	nop
 80058ca:	3714      	adds	r7, #20
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b087      	sub	sp, #28
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
 80058e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	021a      	lsls	r2, r3, #8
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	431a      	orrs	r2, r3
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	4313      	orrs	r3, r2
 8005900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	609a      	str	r2, [r3, #8]
}
 8005908:	bf00      	nop
 800590a:	371c      	adds	r7, #28
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005924:	2b01      	cmp	r3, #1
 8005926:	d101      	bne.n	800592c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005928:	2302      	movs	r3, #2
 800592a:	e05a      	b.n	80059e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2202      	movs	r2, #2
 8005938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005952:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	4313      	orrs	r3, r2
 800595c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a21      	ldr	r2, [pc, #132]	@ (80059f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d022      	beq.n	80059b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005978:	d01d      	beq.n	80059b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a1d      	ldr	r2, [pc, #116]	@ (80059f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d018      	beq.n	80059b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a1b      	ldr	r2, [pc, #108]	@ (80059f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d013      	beq.n	80059b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a1a      	ldr	r2, [pc, #104]	@ (80059fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d00e      	beq.n	80059b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a18      	ldr	r2, [pc, #96]	@ (8005a00 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d009      	beq.n	80059b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a17      	ldr	r2, [pc, #92]	@ (8005a04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d004      	beq.n	80059b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a15      	ldr	r2, [pc, #84]	@ (8005a08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d10c      	bne.n	80059d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	68ba      	ldr	r2, [r7, #8]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68ba      	ldr	r2, [r7, #8]
 80059ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3714      	adds	r7, #20
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	40010000 	.word	0x40010000
 80059f4:	40000400 	.word	0x40000400
 80059f8:	40000800 	.word	0x40000800
 80059fc:	40000c00 	.word	0x40000c00
 8005a00:	40010400 	.word	0x40010400
 8005a04:	40014000 	.word	0x40014000
 8005a08:	40001800 	.word	0x40001800

08005a0c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e042      	b.n	8005acc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d106      	bne.n	8005a60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f7fb ffda 	bl	8001a14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2224      	movs	r2, #36	@ 0x24
 8005a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68da      	ldr	r2, [r3, #12]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 f82b 	bl	8005ad4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	691a      	ldr	r2, [r3, #16]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	695a      	ldr	r2, [r3, #20]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68da      	ldr	r2, [r3, #12]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005aac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3708      	adds	r7, #8
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ad8:	b0c0      	sub	sp, #256	@ 0x100
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005af0:	68d9      	ldr	r1, [r3, #12]
 8005af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	ea40 0301 	orr.w	r3, r0, r1
 8005afc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b02:	689a      	ldr	r2, [r3, #8]
 8005b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	431a      	orrs	r2, r3
 8005b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	431a      	orrs	r2, r3
 8005b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b18:	69db      	ldr	r3, [r3, #28]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005b2c:	f021 010c 	bic.w	r1, r1, #12
 8005b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005b3a:	430b      	orrs	r3, r1
 8005b3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b4e:	6999      	ldr	r1, [r3, #24]
 8005b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	ea40 0301 	orr.w	r3, r0, r1
 8005b5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	4b8f      	ldr	r3, [pc, #572]	@ (8005da0 <UART_SetConfig+0x2cc>)
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d005      	beq.n	8005b74 <UART_SetConfig+0xa0>
 8005b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	4b8d      	ldr	r3, [pc, #564]	@ (8005da4 <UART_SetConfig+0x2d0>)
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d104      	bne.n	8005b7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b74:	f7fe fa0e 	bl	8003f94 <HAL_RCC_GetPCLK2Freq>
 8005b78:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005b7c:	e003      	b.n	8005b86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b7e:	f7fe f9f5 	bl	8003f6c <HAL_RCC_GetPCLK1Freq>
 8005b82:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b8a:	69db      	ldr	r3, [r3, #28]
 8005b8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b90:	f040 810c 	bne.w	8005dac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005b9e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005ba2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005ba6:	4622      	mov	r2, r4
 8005ba8:	462b      	mov	r3, r5
 8005baa:	1891      	adds	r1, r2, r2
 8005bac:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005bae:	415b      	adcs	r3, r3
 8005bb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005bb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005bb6:	4621      	mov	r1, r4
 8005bb8:	eb12 0801 	adds.w	r8, r2, r1
 8005bbc:	4629      	mov	r1, r5
 8005bbe:	eb43 0901 	adc.w	r9, r3, r1
 8005bc2:	f04f 0200 	mov.w	r2, #0
 8005bc6:	f04f 0300 	mov.w	r3, #0
 8005bca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005bd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005bd6:	4690      	mov	r8, r2
 8005bd8:	4699      	mov	r9, r3
 8005bda:	4623      	mov	r3, r4
 8005bdc:	eb18 0303 	adds.w	r3, r8, r3
 8005be0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005be4:	462b      	mov	r3, r5
 8005be6:	eb49 0303 	adc.w	r3, r9, r3
 8005bea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005bfa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005bfe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005c02:	460b      	mov	r3, r1
 8005c04:	18db      	adds	r3, r3, r3
 8005c06:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c08:	4613      	mov	r3, r2
 8005c0a:	eb42 0303 	adc.w	r3, r2, r3
 8005c0e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005c14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005c18:	f7fa fb2a 	bl	8000270 <__aeabi_uldivmod>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	460b      	mov	r3, r1
 8005c20:	4b61      	ldr	r3, [pc, #388]	@ (8005da8 <UART_SetConfig+0x2d4>)
 8005c22:	fba3 2302 	umull	r2, r3, r3, r2
 8005c26:	095b      	lsrs	r3, r3, #5
 8005c28:	011c      	lsls	r4, r3, #4
 8005c2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c34:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005c38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005c3c:	4642      	mov	r2, r8
 8005c3e:	464b      	mov	r3, r9
 8005c40:	1891      	adds	r1, r2, r2
 8005c42:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005c44:	415b      	adcs	r3, r3
 8005c46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005c4c:	4641      	mov	r1, r8
 8005c4e:	eb12 0a01 	adds.w	sl, r2, r1
 8005c52:	4649      	mov	r1, r9
 8005c54:	eb43 0b01 	adc.w	fp, r3, r1
 8005c58:	f04f 0200 	mov.w	r2, #0
 8005c5c:	f04f 0300 	mov.w	r3, #0
 8005c60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c6c:	4692      	mov	sl, r2
 8005c6e:	469b      	mov	fp, r3
 8005c70:	4643      	mov	r3, r8
 8005c72:	eb1a 0303 	adds.w	r3, sl, r3
 8005c76:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c7a:	464b      	mov	r3, r9
 8005c7c:	eb4b 0303 	adc.w	r3, fp, r3
 8005c80:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c90:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005c94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005c98:	460b      	mov	r3, r1
 8005c9a:	18db      	adds	r3, r3, r3
 8005c9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	eb42 0303 	adc.w	r3, r2, r3
 8005ca4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ca6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005caa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005cae:	f7fa fadf 	bl	8000270 <__aeabi_uldivmod>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	4611      	mov	r1, r2
 8005cb8:	4b3b      	ldr	r3, [pc, #236]	@ (8005da8 <UART_SetConfig+0x2d4>)
 8005cba:	fba3 2301 	umull	r2, r3, r3, r1
 8005cbe:	095b      	lsrs	r3, r3, #5
 8005cc0:	2264      	movs	r2, #100	@ 0x64
 8005cc2:	fb02 f303 	mul.w	r3, r2, r3
 8005cc6:	1acb      	subs	r3, r1, r3
 8005cc8:	00db      	lsls	r3, r3, #3
 8005cca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005cce:	4b36      	ldr	r3, [pc, #216]	@ (8005da8 <UART_SetConfig+0x2d4>)
 8005cd0:	fba3 2302 	umull	r2, r3, r3, r2
 8005cd4:	095b      	lsrs	r3, r3, #5
 8005cd6:	005b      	lsls	r3, r3, #1
 8005cd8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005cdc:	441c      	add	r4, r3
 8005cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ce8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005cec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005cf0:	4642      	mov	r2, r8
 8005cf2:	464b      	mov	r3, r9
 8005cf4:	1891      	adds	r1, r2, r2
 8005cf6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005cf8:	415b      	adcs	r3, r3
 8005cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cfc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005d00:	4641      	mov	r1, r8
 8005d02:	1851      	adds	r1, r2, r1
 8005d04:	6339      	str	r1, [r7, #48]	@ 0x30
 8005d06:	4649      	mov	r1, r9
 8005d08:	414b      	adcs	r3, r1
 8005d0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d0c:	f04f 0200 	mov.w	r2, #0
 8005d10:	f04f 0300 	mov.w	r3, #0
 8005d14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005d18:	4659      	mov	r1, fp
 8005d1a:	00cb      	lsls	r3, r1, #3
 8005d1c:	4651      	mov	r1, sl
 8005d1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d22:	4651      	mov	r1, sl
 8005d24:	00ca      	lsls	r2, r1, #3
 8005d26:	4610      	mov	r0, r2
 8005d28:	4619      	mov	r1, r3
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	4642      	mov	r2, r8
 8005d2e:	189b      	adds	r3, r3, r2
 8005d30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d34:	464b      	mov	r3, r9
 8005d36:	460a      	mov	r2, r1
 8005d38:	eb42 0303 	adc.w	r3, r2, r3
 8005d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005d4c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005d50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005d54:	460b      	mov	r3, r1
 8005d56:	18db      	adds	r3, r3, r3
 8005d58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	eb42 0303 	adc.w	r3, r2, r3
 8005d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005d66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005d6a:	f7fa fa81 	bl	8000270 <__aeabi_uldivmod>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	460b      	mov	r3, r1
 8005d72:	4b0d      	ldr	r3, [pc, #52]	@ (8005da8 <UART_SetConfig+0x2d4>)
 8005d74:	fba3 1302 	umull	r1, r3, r3, r2
 8005d78:	095b      	lsrs	r3, r3, #5
 8005d7a:	2164      	movs	r1, #100	@ 0x64
 8005d7c:	fb01 f303 	mul.w	r3, r1, r3
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	00db      	lsls	r3, r3, #3
 8005d84:	3332      	adds	r3, #50	@ 0x32
 8005d86:	4a08      	ldr	r2, [pc, #32]	@ (8005da8 <UART_SetConfig+0x2d4>)
 8005d88:	fba2 2303 	umull	r2, r3, r2, r3
 8005d8c:	095b      	lsrs	r3, r3, #5
 8005d8e:	f003 0207 	and.w	r2, r3, #7
 8005d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4422      	add	r2, r4
 8005d9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d9c:	e106      	b.n	8005fac <UART_SetConfig+0x4d8>
 8005d9e:	bf00      	nop
 8005da0:	40011000 	.word	0x40011000
 8005da4:	40011400 	.word	0x40011400
 8005da8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005dac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005db0:	2200      	movs	r2, #0
 8005db2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005db6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005dba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005dbe:	4642      	mov	r2, r8
 8005dc0:	464b      	mov	r3, r9
 8005dc2:	1891      	adds	r1, r2, r2
 8005dc4:	6239      	str	r1, [r7, #32]
 8005dc6:	415b      	adcs	r3, r3
 8005dc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005dce:	4641      	mov	r1, r8
 8005dd0:	1854      	adds	r4, r2, r1
 8005dd2:	4649      	mov	r1, r9
 8005dd4:	eb43 0501 	adc.w	r5, r3, r1
 8005dd8:	f04f 0200 	mov.w	r2, #0
 8005ddc:	f04f 0300 	mov.w	r3, #0
 8005de0:	00eb      	lsls	r3, r5, #3
 8005de2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005de6:	00e2      	lsls	r2, r4, #3
 8005de8:	4614      	mov	r4, r2
 8005dea:	461d      	mov	r5, r3
 8005dec:	4643      	mov	r3, r8
 8005dee:	18e3      	adds	r3, r4, r3
 8005df0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005df4:	464b      	mov	r3, r9
 8005df6:	eb45 0303 	adc.w	r3, r5, r3
 8005dfa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e0a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005e0e:	f04f 0200 	mov.w	r2, #0
 8005e12:	f04f 0300 	mov.w	r3, #0
 8005e16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005e1a:	4629      	mov	r1, r5
 8005e1c:	008b      	lsls	r3, r1, #2
 8005e1e:	4621      	mov	r1, r4
 8005e20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e24:	4621      	mov	r1, r4
 8005e26:	008a      	lsls	r2, r1, #2
 8005e28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005e2c:	f7fa fa20 	bl	8000270 <__aeabi_uldivmod>
 8005e30:	4602      	mov	r2, r0
 8005e32:	460b      	mov	r3, r1
 8005e34:	4b60      	ldr	r3, [pc, #384]	@ (8005fb8 <UART_SetConfig+0x4e4>)
 8005e36:	fba3 2302 	umull	r2, r3, r3, r2
 8005e3a:	095b      	lsrs	r3, r3, #5
 8005e3c:	011c      	lsls	r4, r3, #4
 8005e3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e42:	2200      	movs	r2, #0
 8005e44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005e48:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005e4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005e50:	4642      	mov	r2, r8
 8005e52:	464b      	mov	r3, r9
 8005e54:	1891      	adds	r1, r2, r2
 8005e56:	61b9      	str	r1, [r7, #24]
 8005e58:	415b      	adcs	r3, r3
 8005e5a:	61fb      	str	r3, [r7, #28]
 8005e5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e60:	4641      	mov	r1, r8
 8005e62:	1851      	adds	r1, r2, r1
 8005e64:	6139      	str	r1, [r7, #16]
 8005e66:	4649      	mov	r1, r9
 8005e68:	414b      	adcs	r3, r1
 8005e6a:	617b      	str	r3, [r7, #20]
 8005e6c:	f04f 0200 	mov.w	r2, #0
 8005e70:	f04f 0300 	mov.w	r3, #0
 8005e74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e78:	4659      	mov	r1, fp
 8005e7a:	00cb      	lsls	r3, r1, #3
 8005e7c:	4651      	mov	r1, sl
 8005e7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e82:	4651      	mov	r1, sl
 8005e84:	00ca      	lsls	r2, r1, #3
 8005e86:	4610      	mov	r0, r2
 8005e88:	4619      	mov	r1, r3
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	4642      	mov	r2, r8
 8005e8e:	189b      	adds	r3, r3, r2
 8005e90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005e94:	464b      	mov	r3, r9
 8005e96:	460a      	mov	r2, r1
 8005e98:	eb42 0303 	adc.w	r3, r2, r3
 8005e9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005eaa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005eac:	f04f 0200 	mov.w	r2, #0
 8005eb0:	f04f 0300 	mov.w	r3, #0
 8005eb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005eb8:	4649      	mov	r1, r9
 8005eba:	008b      	lsls	r3, r1, #2
 8005ebc:	4641      	mov	r1, r8
 8005ebe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ec2:	4641      	mov	r1, r8
 8005ec4:	008a      	lsls	r2, r1, #2
 8005ec6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005eca:	f7fa f9d1 	bl	8000270 <__aeabi_uldivmod>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	4611      	mov	r1, r2
 8005ed4:	4b38      	ldr	r3, [pc, #224]	@ (8005fb8 <UART_SetConfig+0x4e4>)
 8005ed6:	fba3 2301 	umull	r2, r3, r3, r1
 8005eda:	095b      	lsrs	r3, r3, #5
 8005edc:	2264      	movs	r2, #100	@ 0x64
 8005ede:	fb02 f303 	mul.w	r3, r2, r3
 8005ee2:	1acb      	subs	r3, r1, r3
 8005ee4:	011b      	lsls	r3, r3, #4
 8005ee6:	3332      	adds	r3, #50	@ 0x32
 8005ee8:	4a33      	ldr	r2, [pc, #204]	@ (8005fb8 <UART_SetConfig+0x4e4>)
 8005eea:	fba2 2303 	umull	r2, r3, r2, r3
 8005eee:	095b      	lsrs	r3, r3, #5
 8005ef0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ef4:	441c      	add	r4, r3
 8005ef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005efa:	2200      	movs	r2, #0
 8005efc:	673b      	str	r3, [r7, #112]	@ 0x70
 8005efe:	677a      	str	r2, [r7, #116]	@ 0x74
 8005f00:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005f04:	4642      	mov	r2, r8
 8005f06:	464b      	mov	r3, r9
 8005f08:	1891      	adds	r1, r2, r2
 8005f0a:	60b9      	str	r1, [r7, #8]
 8005f0c:	415b      	adcs	r3, r3
 8005f0e:	60fb      	str	r3, [r7, #12]
 8005f10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f14:	4641      	mov	r1, r8
 8005f16:	1851      	adds	r1, r2, r1
 8005f18:	6039      	str	r1, [r7, #0]
 8005f1a:	4649      	mov	r1, r9
 8005f1c:	414b      	adcs	r3, r1
 8005f1e:	607b      	str	r3, [r7, #4]
 8005f20:	f04f 0200 	mov.w	r2, #0
 8005f24:	f04f 0300 	mov.w	r3, #0
 8005f28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f2c:	4659      	mov	r1, fp
 8005f2e:	00cb      	lsls	r3, r1, #3
 8005f30:	4651      	mov	r1, sl
 8005f32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f36:	4651      	mov	r1, sl
 8005f38:	00ca      	lsls	r2, r1, #3
 8005f3a:	4610      	mov	r0, r2
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	4603      	mov	r3, r0
 8005f40:	4642      	mov	r2, r8
 8005f42:	189b      	adds	r3, r3, r2
 8005f44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f46:	464b      	mov	r3, r9
 8005f48:	460a      	mov	r2, r1
 8005f4a:	eb42 0303 	adc.w	r3, r2, r3
 8005f4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f5a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005f5c:	f04f 0200 	mov.w	r2, #0
 8005f60:	f04f 0300 	mov.w	r3, #0
 8005f64:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005f68:	4649      	mov	r1, r9
 8005f6a:	008b      	lsls	r3, r1, #2
 8005f6c:	4641      	mov	r1, r8
 8005f6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f72:	4641      	mov	r1, r8
 8005f74:	008a      	lsls	r2, r1, #2
 8005f76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005f7a:	f7fa f979 	bl	8000270 <__aeabi_uldivmod>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	460b      	mov	r3, r1
 8005f82:	4b0d      	ldr	r3, [pc, #52]	@ (8005fb8 <UART_SetConfig+0x4e4>)
 8005f84:	fba3 1302 	umull	r1, r3, r3, r2
 8005f88:	095b      	lsrs	r3, r3, #5
 8005f8a:	2164      	movs	r1, #100	@ 0x64
 8005f8c:	fb01 f303 	mul.w	r3, r1, r3
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	011b      	lsls	r3, r3, #4
 8005f94:	3332      	adds	r3, #50	@ 0x32
 8005f96:	4a08      	ldr	r2, [pc, #32]	@ (8005fb8 <UART_SetConfig+0x4e4>)
 8005f98:	fba2 2303 	umull	r2, r3, r2, r3
 8005f9c:	095b      	lsrs	r3, r3, #5
 8005f9e:	f003 020f 	and.w	r2, r3, #15
 8005fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4422      	add	r2, r4
 8005faa:	609a      	str	r2, [r3, #8]
}
 8005fac:	bf00      	nop
 8005fae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fb8:	51eb851f 	.word	0x51eb851f

08005fbc <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	689a      	ldr	r2, [r3, #8]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	1c5a      	adds	r2, r3, #1
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	601a      	str	r2, [r3, #0]
}
 8005ff8:	bf00      	nop
 8005ffa:	3714      	adds	r7, #20
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	6892      	ldr	r2, [r2, #8]
 800601a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	6852      	ldr	r2, [r2, #4]
 8006024:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	429a      	cmp	r2, r3
 800602e:	d103      	bne.n	8006038 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	689a      	ldr	r2, [r3, #8]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	1e5a      	subs	r2, r3, #1
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
}
 800604c:	4618      	mov	r0, r3
 800604e:	3714      	adds	r7, #20
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b086      	sub	sp, #24
 800605c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800605e:	2300      	movs	r3, #0
 8006060:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006062:	4b4f      	ldr	r3, [pc, #316]	@ (80061a0 <xTaskIncrementTick+0x148>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	f040 808f 	bne.w	800618a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800606c:	4b4d      	ldr	r3, [pc, #308]	@ (80061a4 <xTaskIncrementTick+0x14c>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	3301      	adds	r3, #1
 8006072:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006074:	4a4b      	ldr	r2, [pc, #300]	@ (80061a4 <xTaskIncrementTick+0x14c>)
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d121      	bne.n	80060c4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006080:	4b49      	ldr	r3, [pc, #292]	@ (80061a8 <xTaskIncrementTick+0x150>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00b      	beq.n	80060a2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800608a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800608e:	f383 8811 	msr	BASEPRI, r3
 8006092:	f3bf 8f6f 	isb	sy
 8006096:	f3bf 8f4f 	dsb	sy
 800609a:	603b      	str	r3, [r7, #0]
}
 800609c:	bf00      	nop
 800609e:	bf00      	nop
 80060a0:	e7fd      	b.n	800609e <xTaskIncrementTick+0x46>
 80060a2:	4b41      	ldr	r3, [pc, #260]	@ (80061a8 <xTaskIncrementTick+0x150>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	60fb      	str	r3, [r7, #12]
 80060a8:	4b40      	ldr	r3, [pc, #256]	@ (80061ac <xTaskIncrementTick+0x154>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a3e      	ldr	r2, [pc, #248]	@ (80061a8 <xTaskIncrementTick+0x150>)
 80060ae:	6013      	str	r3, [r2, #0]
 80060b0:	4a3e      	ldr	r2, [pc, #248]	@ (80061ac <xTaskIncrementTick+0x154>)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6013      	str	r3, [r2, #0]
 80060b6:	4b3e      	ldr	r3, [pc, #248]	@ (80061b0 <xTaskIncrementTick+0x158>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	3301      	adds	r3, #1
 80060bc:	4a3c      	ldr	r2, [pc, #240]	@ (80061b0 <xTaskIncrementTick+0x158>)
 80060be:	6013      	str	r3, [r2, #0]
 80060c0:	f000 f8e0 	bl	8006284 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80060c4:	4b3b      	ldr	r3, [pc, #236]	@ (80061b4 <xTaskIncrementTick+0x15c>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d348      	bcc.n	8006160 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060ce:	4b36      	ldr	r3, [pc, #216]	@ (80061a8 <xTaskIncrementTick+0x150>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d104      	bne.n	80060e2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060d8:	4b36      	ldr	r3, [pc, #216]	@ (80061b4 <xTaskIncrementTick+0x15c>)
 80060da:	f04f 32ff 	mov.w	r2, #4294967295
 80060de:	601a      	str	r2, [r3, #0]
					break;
 80060e0:	e03e      	b.n	8006160 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060e2:	4b31      	ldr	r3, [pc, #196]	@ (80061a8 <xTaskIncrementTick+0x150>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d203      	bcs.n	8006102 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80060fa:	4a2e      	ldr	r2, [pc, #184]	@ (80061b4 <xTaskIncrementTick+0x15c>)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006100:	e02e      	b.n	8006160 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	3304      	adds	r3, #4
 8006106:	4618      	mov	r0, r3
 8006108:	f7ff ff7c 	bl	8006004 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006110:	2b00      	cmp	r3, #0
 8006112:	d004      	beq.n	800611e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	3318      	adds	r3, #24
 8006118:	4618      	mov	r0, r3
 800611a:	f7ff ff73 	bl	8006004 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006122:	2201      	movs	r2, #1
 8006124:	409a      	lsls	r2, r3
 8006126:	4b24      	ldr	r3, [pc, #144]	@ (80061b8 <xTaskIncrementTick+0x160>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4313      	orrs	r3, r2
 800612c:	4a22      	ldr	r2, [pc, #136]	@ (80061b8 <xTaskIncrementTick+0x160>)
 800612e:	6013      	str	r3, [r2, #0]
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006134:	4613      	mov	r3, r2
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4413      	add	r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	4a1f      	ldr	r2, [pc, #124]	@ (80061bc <xTaskIncrementTick+0x164>)
 800613e:	441a      	add	r2, r3
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	3304      	adds	r3, #4
 8006144:	4619      	mov	r1, r3
 8006146:	4610      	mov	r0, r2
 8006148:	f7ff ff38 	bl	8005fbc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006150:	4b1b      	ldr	r3, [pc, #108]	@ (80061c0 <xTaskIncrementTick+0x168>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006156:	429a      	cmp	r2, r3
 8006158:	d3b9      	bcc.n	80060ce <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800615a:	2301      	movs	r3, #1
 800615c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800615e:	e7b6      	b.n	80060ce <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006160:	4b17      	ldr	r3, [pc, #92]	@ (80061c0 <xTaskIncrementTick+0x168>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006166:	4915      	ldr	r1, [pc, #84]	@ (80061bc <xTaskIncrementTick+0x164>)
 8006168:	4613      	mov	r3, r2
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4413      	add	r3, r2
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	440b      	add	r3, r1
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2b01      	cmp	r3, #1
 8006176:	d901      	bls.n	800617c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006178:	2301      	movs	r3, #1
 800617a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800617c:	4b11      	ldr	r3, [pc, #68]	@ (80061c4 <xTaskIncrementTick+0x16c>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d007      	beq.n	8006194 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006184:	2301      	movs	r3, #1
 8006186:	617b      	str	r3, [r7, #20]
 8006188:	e004      	b.n	8006194 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800618a:	4b0f      	ldr	r3, [pc, #60]	@ (80061c8 <xTaskIncrementTick+0x170>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	3301      	adds	r3, #1
 8006190:	4a0d      	ldr	r2, [pc, #52]	@ (80061c8 <xTaskIncrementTick+0x170>)
 8006192:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006194:	697b      	ldr	r3, [r7, #20]
}
 8006196:	4618      	mov	r0, r3
 8006198:	3718      	adds	r7, #24
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	2000055c 	.word	0x2000055c
 80061a4:	20000544 	.word	0x20000544
 80061a8:	2000053c 	.word	0x2000053c
 80061ac:	20000540 	.word	0x20000540
 80061b0:	20000554 	.word	0x20000554
 80061b4:	20000558 	.word	0x20000558
 80061b8:	20000548 	.word	0x20000548
 80061bc:	200004b0 	.word	0x200004b0
 80061c0:	200004ac 	.word	0x200004ac
 80061c4:	20000550 	.word	0x20000550
 80061c8:	2000054c 	.word	0x2000054c

080061cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80061cc:	b480      	push	{r7}
 80061ce:	b087      	sub	sp, #28
 80061d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80061d2:	4b27      	ldr	r3, [pc, #156]	@ (8006270 <vTaskSwitchContext+0xa4>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d003      	beq.n	80061e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80061da:	4b26      	ldr	r3, [pc, #152]	@ (8006274 <vTaskSwitchContext+0xa8>)
 80061dc:	2201      	movs	r2, #1
 80061de:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80061e0:	e040      	b.n	8006264 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80061e2:	4b24      	ldr	r3, [pc, #144]	@ (8006274 <vTaskSwitchContext+0xa8>)
 80061e4:	2200      	movs	r2, #0
 80061e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061e8:	4b23      	ldr	r3, [pc, #140]	@ (8006278 <vTaskSwitchContext+0xac>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	fab3 f383 	clz	r3, r3
 80061f4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80061f6:	7afb      	ldrb	r3, [r7, #11]
 80061f8:	f1c3 031f 	rsb	r3, r3, #31
 80061fc:	617b      	str	r3, [r7, #20]
 80061fe:	491f      	ldr	r1, [pc, #124]	@ (800627c <vTaskSwitchContext+0xb0>)
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	4613      	mov	r3, r2
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	4413      	add	r3, r2
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	440b      	add	r3, r1
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d10b      	bne.n	800622a <vTaskSwitchContext+0x5e>
	__asm volatile
 8006212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006216:	f383 8811 	msr	BASEPRI, r3
 800621a:	f3bf 8f6f 	isb	sy
 800621e:	f3bf 8f4f 	dsb	sy
 8006222:	607b      	str	r3, [r7, #4]
}
 8006224:	bf00      	nop
 8006226:	bf00      	nop
 8006228:	e7fd      	b.n	8006226 <vTaskSwitchContext+0x5a>
 800622a:	697a      	ldr	r2, [r7, #20]
 800622c:	4613      	mov	r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	4413      	add	r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	4a11      	ldr	r2, [pc, #68]	@ (800627c <vTaskSwitchContext+0xb0>)
 8006236:	4413      	add	r3, r2
 8006238:	613b      	str	r3, [r7, #16]
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	685a      	ldr	r2, [r3, #4]
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	605a      	str	r2, [r3, #4]
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	685a      	ldr	r2, [r3, #4]
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	3308      	adds	r3, #8
 800624c:	429a      	cmp	r2, r3
 800624e:	d104      	bne.n	800625a <vTaskSwitchContext+0x8e>
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	685a      	ldr	r2, [r3, #4]
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	605a      	str	r2, [r3, #4]
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	4a07      	ldr	r2, [pc, #28]	@ (8006280 <vTaskSwitchContext+0xb4>)
 8006262:	6013      	str	r3, [r2, #0]
}
 8006264:	bf00      	nop
 8006266:	371c      	adds	r7, #28
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr
 8006270:	2000055c 	.word	0x2000055c
 8006274:	20000550 	.word	0x20000550
 8006278:	20000548 	.word	0x20000548
 800627c:	200004b0 	.word	0x200004b0
 8006280:	200004ac 	.word	0x200004ac

08006284 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800628a:	4b0c      	ldr	r3, [pc, #48]	@ (80062bc <prvResetNextTaskUnblockTime+0x38>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d104      	bne.n	800629e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006294:	4b0a      	ldr	r3, [pc, #40]	@ (80062c0 <prvResetNextTaskUnblockTime+0x3c>)
 8006296:	f04f 32ff 	mov.w	r2, #4294967295
 800629a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800629c:	e008      	b.n	80062b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800629e:	4b07      	ldr	r3, [pc, #28]	@ (80062bc <prvResetNextTaskUnblockTime+0x38>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	4a04      	ldr	r2, [pc, #16]	@ (80062c0 <prvResetNextTaskUnblockTime+0x3c>)
 80062ae:	6013      	str	r3, [r2, #0]
}
 80062b0:	bf00      	nop
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr
 80062bc:	2000053c 	.word	0x2000053c
 80062c0:	20000558 	.word	0x20000558
	...

080062d0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80062d0:	4b07      	ldr	r3, [pc, #28]	@ (80062f0 <pxCurrentTCBConst2>)
 80062d2:	6819      	ldr	r1, [r3, #0]
 80062d4:	6808      	ldr	r0, [r1, #0]
 80062d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062da:	f380 8809 	msr	PSP, r0
 80062de:	f3bf 8f6f 	isb	sy
 80062e2:	f04f 0000 	mov.w	r0, #0
 80062e6:	f380 8811 	msr	BASEPRI, r0
 80062ea:	4770      	bx	lr
 80062ec:	f3af 8000 	nop.w

080062f0 <pxCurrentTCBConst2>:
 80062f0:	200004ac 	.word	0x200004ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80062f4:	bf00      	nop
 80062f6:	bf00      	nop
	...

08006300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006300:	f3ef 8009 	mrs	r0, PSP
 8006304:	f3bf 8f6f 	isb	sy
 8006308:	4b15      	ldr	r3, [pc, #84]	@ (8006360 <pxCurrentTCBConst>)
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	f01e 0f10 	tst.w	lr, #16
 8006310:	bf08      	it	eq
 8006312:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006316:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800631a:	6010      	str	r0, [r2, #0]
 800631c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006320:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006324:	f380 8811 	msr	BASEPRI, r0
 8006328:	f3bf 8f4f 	dsb	sy
 800632c:	f3bf 8f6f 	isb	sy
 8006330:	f7ff ff4c 	bl	80061cc <vTaskSwitchContext>
 8006334:	f04f 0000 	mov.w	r0, #0
 8006338:	f380 8811 	msr	BASEPRI, r0
 800633c:	bc09      	pop	{r0, r3}
 800633e:	6819      	ldr	r1, [r3, #0]
 8006340:	6808      	ldr	r0, [r1, #0]
 8006342:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006346:	f01e 0f10 	tst.w	lr, #16
 800634a:	bf08      	it	eq
 800634c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006350:	f380 8809 	msr	PSP, r0
 8006354:	f3bf 8f6f 	isb	sy
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	f3af 8000 	nop.w

08006360 <pxCurrentTCBConst>:
 8006360:	200004ac 	.word	0x200004ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006364:	bf00      	nop
 8006366:	bf00      	nop

08006368 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
	__asm volatile
 800636e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006372:	f383 8811 	msr	BASEPRI, r3
 8006376:	f3bf 8f6f 	isb	sy
 800637a:	f3bf 8f4f 	dsb	sy
 800637e:	607b      	str	r3, [r7, #4]
}
 8006380:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006382:	f7ff fe69 	bl	8006058 <xTaskIncrementTick>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d003      	beq.n	8006394 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800638c:	4b06      	ldr	r3, [pc, #24]	@ (80063a8 <SysTick_Handler+0x40>)
 800638e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006392:	601a      	str	r2, [r3, #0]
 8006394:	2300      	movs	r3, #0
 8006396:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	f383 8811 	msr	BASEPRI, r3
}
 800639e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80063a0:	bf00      	nop
 80063a2:	3708      	adds	r7, #8
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	e000ed04 	.word	0xe000ed04

080063ac <malloc>:
 80063ac:	4b02      	ldr	r3, [pc, #8]	@ (80063b8 <malloc+0xc>)
 80063ae:	4601      	mov	r1, r0
 80063b0:	6818      	ldr	r0, [r3, #0]
 80063b2:	f000 b825 	b.w	8006400 <_malloc_r>
 80063b6:	bf00      	nop
 80063b8:	20000018 	.word	0x20000018

080063bc <sbrk_aligned>:
 80063bc:	b570      	push	{r4, r5, r6, lr}
 80063be:	4e0f      	ldr	r6, [pc, #60]	@ (80063fc <sbrk_aligned+0x40>)
 80063c0:	460c      	mov	r4, r1
 80063c2:	6831      	ldr	r1, [r6, #0]
 80063c4:	4605      	mov	r5, r0
 80063c6:	b911      	cbnz	r1, 80063ce <sbrk_aligned+0x12>
 80063c8:	f000 fa02 	bl	80067d0 <_sbrk_r>
 80063cc:	6030      	str	r0, [r6, #0]
 80063ce:	4621      	mov	r1, r4
 80063d0:	4628      	mov	r0, r5
 80063d2:	f000 f9fd 	bl	80067d0 <_sbrk_r>
 80063d6:	1c43      	adds	r3, r0, #1
 80063d8:	d103      	bne.n	80063e2 <sbrk_aligned+0x26>
 80063da:	f04f 34ff 	mov.w	r4, #4294967295
 80063de:	4620      	mov	r0, r4
 80063e0:	bd70      	pop	{r4, r5, r6, pc}
 80063e2:	1cc4      	adds	r4, r0, #3
 80063e4:	f024 0403 	bic.w	r4, r4, #3
 80063e8:	42a0      	cmp	r0, r4
 80063ea:	d0f8      	beq.n	80063de <sbrk_aligned+0x22>
 80063ec:	1a21      	subs	r1, r4, r0
 80063ee:	4628      	mov	r0, r5
 80063f0:	f000 f9ee 	bl	80067d0 <_sbrk_r>
 80063f4:	3001      	adds	r0, #1
 80063f6:	d1f2      	bne.n	80063de <sbrk_aligned+0x22>
 80063f8:	e7ef      	b.n	80063da <sbrk_aligned+0x1e>
 80063fa:	bf00      	nop
 80063fc:	20000560 	.word	0x20000560

08006400 <_malloc_r>:
 8006400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006404:	1ccd      	adds	r5, r1, #3
 8006406:	f025 0503 	bic.w	r5, r5, #3
 800640a:	3508      	adds	r5, #8
 800640c:	2d0c      	cmp	r5, #12
 800640e:	bf38      	it	cc
 8006410:	250c      	movcc	r5, #12
 8006412:	2d00      	cmp	r5, #0
 8006414:	4606      	mov	r6, r0
 8006416:	db01      	blt.n	800641c <_malloc_r+0x1c>
 8006418:	42a9      	cmp	r1, r5
 800641a:	d904      	bls.n	8006426 <_malloc_r+0x26>
 800641c:	230c      	movs	r3, #12
 800641e:	6033      	str	r3, [r6, #0]
 8006420:	2000      	movs	r0, #0
 8006422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006426:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80064fc <_malloc_r+0xfc>
 800642a:	f000 f869 	bl	8006500 <__malloc_lock>
 800642e:	f8d8 3000 	ldr.w	r3, [r8]
 8006432:	461c      	mov	r4, r3
 8006434:	bb44      	cbnz	r4, 8006488 <_malloc_r+0x88>
 8006436:	4629      	mov	r1, r5
 8006438:	4630      	mov	r0, r6
 800643a:	f7ff ffbf 	bl	80063bc <sbrk_aligned>
 800643e:	1c43      	adds	r3, r0, #1
 8006440:	4604      	mov	r4, r0
 8006442:	d158      	bne.n	80064f6 <_malloc_r+0xf6>
 8006444:	f8d8 4000 	ldr.w	r4, [r8]
 8006448:	4627      	mov	r7, r4
 800644a:	2f00      	cmp	r7, #0
 800644c:	d143      	bne.n	80064d6 <_malloc_r+0xd6>
 800644e:	2c00      	cmp	r4, #0
 8006450:	d04b      	beq.n	80064ea <_malloc_r+0xea>
 8006452:	6823      	ldr	r3, [r4, #0]
 8006454:	4639      	mov	r1, r7
 8006456:	4630      	mov	r0, r6
 8006458:	eb04 0903 	add.w	r9, r4, r3
 800645c:	f000 f9b8 	bl	80067d0 <_sbrk_r>
 8006460:	4581      	cmp	r9, r0
 8006462:	d142      	bne.n	80064ea <_malloc_r+0xea>
 8006464:	6821      	ldr	r1, [r4, #0]
 8006466:	1a6d      	subs	r5, r5, r1
 8006468:	4629      	mov	r1, r5
 800646a:	4630      	mov	r0, r6
 800646c:	f7ff ffa6 	bl	80063bc <sbrk_aligned>
 8006470:	3001      	adds	r0, #1
 8006472:	d03a      	beq.n	80064ea <_malloc_r+0xea>
 8006474:	6823      	ldr	r3, [r4, #0]
 8006476:	442b      	add	r3, r5
 8006478:	6023      	str	r3, [r4, #0]
 800647a:	f8d8 3000 	ldr.w	r3, [r8]
 800647e:	685a      	ldr	r2, [r3, #4]
 8006480:	bb62      	cbnz	r2, 80064dc <_malloc_r+0xdc>
 8006482:	f8c8 7000 	str.w	r7, [r8]
 8006486:	e00f      	b.n	80064a8 <_malloc_r+0xa8>
 8006488:	6822      	ldr	r2, [r4, #0]
 800648a:	1b52      	subs	r2, r2, r5
 800648c:	d420      	bmi.n	80064d0 <_malloc_r+0xd0>
 800648e:	2a0b      	cmp	r2, #11
 8006490:	d917      	bls.n	80064c2 <_malloc_r+0xc2>
 8006492:	1961      	adds	r1, r4, r5
 8006494:	42a3      	cmp	r3, r4
 8006496:	6025      	str	r5, [r4, #0]
 8006498:	bf18      	it	ne
 800649a:	6059      	strne	r1, [r3, #4]
 800649c:	6863      	ldr	r3, [r4, #4]
 800649e:	bf08      	it	eq
 80064a0:	f8c8 1000 	streq.w	r1, [r8]
 80064a4:	5162      	str	r2, [r4, r5]
 80064a6:	604b      	str	r3, [r1, #4]
 80064a8:	4630      	mov	r0, r6
 80064aa:	f000 f82f 	bl	800650c <__malloc_unlock>
 80064ae:	f104 000b 	add.w	r0, r4, #11
 80064b2:	1d23      	adds	r3, r4, #4
 80064b4:	f020 0007 	bic.w	r0, r0, #7
 80064b8:	1ac2      	subs	r2, r0, r3
 80064ba:	bf1c      	itt	ne
 80064bc:	1a1b      	subne	r3, r3, r0
 80064be:	50a3      	strne	r3, [r4, r2]
 80064c0:	e7af      	b.n	8006422 <_malloc_r+0x22>
 80064c2:	6862      	ldr	r2, [r4, #4]
 80064c4:	42a3      	cmp	r3, r4
 80064c6:	bf0c      	ite	eq
 80064c8:	f8c8 2000 	streq.w	r2, [r8]
 80064cc:	605a      	strne	r2, [r3, #4]
 80064ce:	e7eb      	b.n	80064a8 <_malloc_r+0xa8>
 80064d0:	4623      	mov	r3, r4
 80064d2:	6864      	ldr	r4, [r4, #4]
 80064d4:	e7ae      	b.n	8006434 <_malloc_r+0x34>
 80064d6:	463c      	mov	r4, r7
 80064d8:	687f      	ldr	r7, [r7, #4]
 80064da:	e7b6      	b.n	800644a <_malloc_r+0x4a>
 80064dc:	461a      	mov	r2, r3
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	42a3      	cmp	r3, r4
 80064e2:	d1fb      	bne.n	80064dc <_malloc_r+0xdc>
 80064e4:	2300      	movs	r3, #0
 80064e6:	6053      	str	r3, [r2, #4]
 80064e8:	e7de      	b.n	80064a8 <_malloc_r+0xa8>
 80064ea:	230c      	movs	r3, #12
 80064ec:	6033      	str	r3, [r6, #0]
 80064ee:	4630      	mov	r0, r6
 80064f0:	f000 f80c 	bl	800650c <__malloc_unlock>
 80064f4:	e794      	b.n	8006420 <_malloc_r+0x20>
 80064f6:	6005      	str	r5, [r0, #0]
 80064f8:	e7d6      	b.n	80064a8 <_malloc_r+0xa8>
 80064fa:	bf00      	nop
 80064fc:	20000564 	.word	0x20000564

08006500 <__malloc_lock>:
 8006500:	4801      	ldr	r0, [pc, #4]	@ (8006508 <__malloc_lock+0x8>)
 8006502:	f7fb bb9f 	b.w	8001c44 <__retarget_lock_acquire_recursive>
 8006506:	bf00      	nop
 8006508:	20000488 	.word	0x20000488

0800650c <__malloc_unlock>:
 800650c:	4801      	ldr	r0, [pc, #4]	@ (8006514 <__malloc_unlock+0x8>)
 800650e:	f7fb bbae 	b.w	8001c6e <__retarget_lock_release_recursive>
 8006512:	bf00      	nop
 8006514:	20000488 	.word	0x20000488

08006518 <std>:
 8006518:	2300      	movs	r3, #0
 800651a:	b510      	push	{r4, lr}
 800651c:	4604      	mov	r4, r0
 800651e:	e9c0 3300 	strd	r3, r3, [r0]
 8006522:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006526:	6083      	str	r3, [r0, #8]
 8006528:	8181      	strh	r1, [r0, #12]
 800652a:	6643      	str	r3, [r0, #100]	@ 0x64
 800652c:	81c2      	strh	r2, [r0, #14]
 800652e:	6183      	str	r3, [r0, #24]
 8006530:	4619      	mov	r1, r3
 8006532:	2208      	movs	r2, #8
 8006534:	305c      	adds	r0, #92	@ 0x5c
 8006536:	f000 f90e 	bl	8006756 <memset>
 800653a:	4b0d      	ldr	r3, [pc, #52]	@ (8006570 <std+0x58>)
 800653c:	6263      	str	r3, [r4, #36]	@ 0x24
 800653e:	4b0d      	ldr	r3, [pc, #52]	@ (8006574 <std+0x5c>)
 8006540:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006542:	4b0d      	ldr	r3, [pc, #52]	@ (8006578 <std+0x60>)
 8006544:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006546:	4b0d      	ldr	r3, [pc, #52]	@ (800657c <std+0x64>)
 8006548:	6323      	str	r3, [r4, #48]	@ 0x30
 800654a:	4b0d      	ldr	r3, [pc, #52]	@ (8006580 <std+0x68>)
 800654c:	6224      	str	r4, [r4, #32]
 800654e:	429c      	cmp	r4, r3
 8006550:	d006      	beq.n	8006560 <std+0x48>
 8006552:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006556:	4294      	cmp	r4, r2
 8006558:	d002      	beq.n	8006560 <std+0x48>
 800655a:	33d0      	adds	r3, #208	@ 0xd0
 800655c:	429c      	cmp	r4, r3
 800655e:	d105      	bne.n	800656c <std+0x54>
 8006560:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006568:	f7fb bb45 	b.w	8001bf6 <__retarget_lock_init_recursive>
 800656c:	bd10      	pop	{r4, pc}
 800656e:	bf00      	nop
 8006570:	080066d1 	.word	0x080066d1
 8006574:	080066f3 	.word	0x080066f3
 8006578:	0800672b 	.word	0x0800672b
 800657c:	0800674f 	.word	0x0800674f
 8006580:	20000568 	.word	0x20000568

08006584 <stdio_exit_handler>:
 8006584:	4a02      	ldr	r2, [pc, #8]	@ (8006590 <stdio_exit_handler+0xc>)
 8006586:	4903      	ldr	r1, [pc, #12]	@ (8006594 <stdio_exit_handler+0x10>)
 8006588:	4803      	ldr	r0, [pc, #12]	@ (8006598 <stdio_exit_handler+0x14>)
 800658a:	f000 b869 	b.w	8006660 <_fwalk_sglue>
 800658e:	bf00      	nop
 8006590:	2000000c 	.word	0x2000000c
 8006594:	08006fa5 	.word	0x08006fa5
 8006598:	2000001c 	.word	0x2000001c

0800659c <cleanup_stdio>:
 800659c:	6841      	ldr	r1, [r0, #4]
 800659e:	4b0c      	ldr	r3, [pc, #48]	@ (80065d0 <cleanup_stdio+0x34>)
 80065a0:	4299      	cmp	r1, r3
 80065a2:	b510      	push	{r4, lr}
 80065a4:	4604      	mov	r4, r0
 80065a6:	d001      	beq.n	80065ac <cleanup_stdio+0x10>
 80065a8:	f000 fcfc 	bl	8006fa4 <_fflush_r>
 80065ac:	68a1      	ldr	r1, [r4, #8]
 80065ae:	4b09      	ldr	r3, [pc, #36]	@ (80065d4 <cleanup_stdio+0x38>)
 80065b0:	4299      	cmp	r1, r3
 80065b2:	d002      	beq.n	80065ba <cleanup_stdio+0x1e>
 80065b4:	4620      	mov	r0, r4
 80065b6:	f000 fcf5 	bl	8006fa4 <_fflush_r>
 80065ba:	68e1      	ldr	r1, [r4, #12]
 80065bc:	4b06      	ldr	r3, [pc, #24]	@ (80065d8 <cleanup_stdio+0x3c>)
 80065be:	4299      	cmp	r1, r3
 80065c0:	d004      	beq.n	80065cc <cleanup_stdio+0x30>
 80065c2:	4620      	mov	r0, r4
 80065c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065c8:	f000 bcec 	b.w	8006fa4 <_fflush_r>
 80065cc:	bd10      	pop	{r4, pc}
 80065ce:	bf00      	nop
 80065d0:	20000568 	.word	0x20000568
 80065d4:	200005d0 	.word	0x200005d0
 80065d8:	20000638 	.word	0x20000638

080065dc <global_stdio_init.part.0>:
 80065dc:	b510      	push	{r4, lr}
 80065de:	4b0b      	ldr	r3, [pc, #44]	@ (800660c <global_stdio_init.part.0+0x30>)
 80065e0:	4c0b      	ldr	r4, [pc, #44]	@ (8006610 <global_stdio_init.part.0+0x34>)
 80065e2:	4a0c      	ldr	r2, [pc, #48]	@ (8006614 <global_stdio_init.part.0+0x38>)
 80065e4:	601a      	str	r2, [r3, #0]
 80065e6:	4620      	mov	r0, r4
 80065e8:	2200      	movs	r2, #0
 80065ea:	2104      	movs	r1, #4
 80065ec:	f7ff ff94 	bl	8006518 <std>
 80065f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80065f4:	2201      	movs	r2, #1
 80065f6:	2109      	movs	r1, #9
 80065f8:	f7ff ff8e 	bl	8006518 <std>
 80065fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006600:	2202      	movs	r2, #2
 8006602:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006606:	2112      	movs	r1, #18
 8006608:	f7ff bf86 	b.w	8006518 <std>
 800660c:	200006a0 	.word	0x200006a0
 8006610:	20000568 	.word	0x20000568
 8006614:	08006585 	.word	0x08006585

08006618 <__sfp_lock_acquire>:
 8006618:	4801      	ldr	r0, [pc, #4]	@ (8006620 <__sfp_lock_acquire+0x8>)
 800661a:	f7fb bb13 	b.w	8001c44 <__retarget_lock_acquire_recursive>
 800661e:	bf00      	nop
 8006620:	2000047c 	.word	0x2000047c

08006624 <__sfp_lock_release>:
 8006624:	4801      	ldr	r0, [pc, #4]	@ (800662c <__sfp_lock_release+0x8>)
 8006626:	f7fb bb22 	b.w	8001c6e <__retarget_lock_release_recursive>
 800662a:	bf00      	nop
 800662c:	2000047c 	.word	0x2000047c

08006630 <__sinit>:
 8006630:	b510      	push	{r4, lr}
 8006632:	4604      	mov	r4, r0
 8006634:	f7ff fff0 	bl	8006618 <__sfp_lock_acquire>
 8006638:	6a23      	ldr	r3, [r4, #32]
 800663a:	b11b      	cbz	r3, 8006644 <__sinit+0x14>
 800663c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006640:	f7ff bff0 	b.w	8006624 <__sfp_lock_release>
 8006644:	4b04      	ldr	r3, [pc, #16]	@ (8006658 <__sinit+0x28>)
 8006646:	6223      	str	r3, [r4, #32]
 8006648:	4b04      	ldr	r3, [pc, #16]	@ (800665c <__sinit+0x2c>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d1f5      	bne.n	800663c <__sinit+0xc>
 8006650:	f7ff ffc4 	bl	80065dc <global_stdio_init.part.0>
 8006654:	e7f2      	b.n	800663c <__sinit+0xc>
 8006656:	bf00      	nop
 8006658:	0800659d 	.word	0x0800659d
 800665c:	200006a0 	.word	0x200006a0

08006660 <_fwalk_sglue>:
 8006660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006664:	4607      	mov	r7, r0
 8006666:	4688      	mov	r8, r1
 8006668:	4614      	mov	r4, r2
 800666a:	2600      	movs	r6, #0
 800666c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006670:	f1b9 0901 	subs.w	r9, r9, #1
 8006674:	d505      	bpl.n	8006682 <_fwalk_sglue+0x22>
 8006676:	6824      	ldr	r4, [r4, #0]
 8006678:	2c00      	cmp	r4, #0
 800667a:	d1f7      	bne.n	800666c <_fwalk_sglue+0xc>
 800667c:	4630      	mov	r0, r6
 800667e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006682:	89ab      	ldrh	r3, [r5, #12]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d907      	bls.n	8006698 <_fwalk_sglue+0x38>
 8006688:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800668c:	3301      	adds	r3, #1
 800668e:	d003      	beq.n	8006698 <_fwalk_sglue+0x38>
 8006690:	4629      	mov	r1, r5
 8006692:	4638      	mov	r0, r7
 8006694:	47c0      	blx	r8
 8006696:	4306      	orrs	r6, r0
 8006698:	3568      	adds	r5, #104	@ 0x68
 800669a:	e7e9      	b.n	8006670 <_fwalk_sglue+0x10>

0800669c <iprintf>:
 800669c:	b40f      	push	{r0, r1, r2, r3}
 800669e:	b507      	push	{r0, r1, r2, lr}
 80066a0:	4906      	ldr	r1, [pc, #24]	@ (80066bc <iprintf+0x20>)
 80066a2:	ab04      	add	r3, sp, #16
 80066a4:	6808      	ldr	r0, [r1, #0]
 80066a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80066aa:	6881      	ldr	r1, [r0, #8]
 80066ac:	9301      	str	r3, [sp, #4]
 80066ae:	f000 f94f 	bl	8006950 <_vfiprintf_r>
 80066b2:	b003      	add	sp, #12
 80066b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80066b8:	b004      	add	sp, #16
 80066ba:	4770      	bx	lr
 80066bc:	20000018 	.word	0x20000018

080066c0 <putchar>:
 80066c0:	4b02      	ldr	r3, [pc, #8]	@ (80066cc <putchar+0xc>)
 80066c2:	4601      	mov	r1, r0
 80066c4:	6818      	ldr	r0, [r3, #0]
 80066c6:	6882      	ldr	r2, [r0, #8]
 80066c8:	f000 bc94 	b.w	8006ff4 <_putc_r>
 80066cc:	20000018 	.word	0x20000018

080066d0 <__sread>:
 80066d0:	b510      	push	{r4, lr}
 80066d2:	460c      	mov	r4, r1
 80066d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066d8:	f000 f868 	bl	80067ac <_read_r>
 80066dc:	2800      	cmp	r0, #0
 80066de:	bfab      	itete	ge
 80066e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80066e2:	89a3      	ldrhlt	r3, [r4, #12]
 80066e4:	181b      	addge	r3, r3, r0
 80066e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80066ea:	bfac      	ite	ge
 80066ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80066ee:	81a3      	strhlt	r3, [r4, #12]
 80066f0:	bd10      	pop	{r4, pc}

080066f2 <__swrite>:
 80066f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066f6:	461f      	mov	r7, r3
 80066f8:	898b      	ldrh	r3, [r1, #12]
 80066fa:	05db      	lsls	r3, r3, #23
 80066fc:	4605      	mov	r5, r0
 80066fe:	460c      	mov	r4, r1
 8006700:	4616      	mov	r6, r2
 8006702:	d505      	bpl.n	8006710 <__swrite+0x1e>
 8006704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006708:	2302      	movs	r3, #2
 800670a:	2200      	movs	r2, #0
 800670c:	f000 f83c 	bl	8006788 <_lseek_r>
 8006710:	89a3      	ldrh	r3, [r4, #12]
 8006712:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006716:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800671a:	81a3      	strh	r3, [r4, #12]
 800671c:	4632      	mov	r2, r6
 800671e:	463b      	mov	r3, r7
 8006720:	4628      	mov	r0, r5
 8006722:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006726:	f000 b863 	b.w	80067f0 <_write_r>

0800672a <__sseek>:
 800672a:	b510      	push	{r4, lr}
 800672c:	460c      	mov	r4, r1
 800672e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006732:	f000 f829 	bl	8006788 <_lseek_r>
 8006736:	1c43      	adds	r3, r0, #1
 8006738:	89a3      	ldrh	r3, [r4, #12]
 800673a:	bf15      	itete	ne
 800673c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800673e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006742:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006746:	81a3      	strheq	r3, [r4, #12]
 8006748:	bf18      	it	ne
 800674a:	81a3      	strhne	r3, [r4, #12]
 800674c:	bd10      	pop	{r4, pc}

0800674e <__sclose>:
 800674e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006752:	f000 b809 	b.w	8006768 <_close_r>

08006756 <memset>:
 8006756:	4402      	add	r2, r0
 8006758:	4603      	mov	r3, r0
 800675a:	4293      	cmp	r3, r2
 800675c:	d100      	bne.n	8006760 <memset+0xa>
 800675e:	4770      	bx	lr
 8006760:	f803 1b01 	strb.w	r1, [r3], #1
 8006764:	e7f9      	b.n	800675a <memset+0x4>
	...

08006768 <_close_r>:
 8006768:	b538      	push	{r3, r4, r5, lr}
 800676a:	4d06      	ldr	r5, [pc, #24]	@ (8006784 <_close_r+0x1c>)
 800676c:	2300      	movs	r3, #0
 800676e:	4604      	mov	r4, r0
 8006770:	4608      	mov	r0, r1
 8006772:	602b      	str	r3, [r5, #0]
 8006774:	f7fa fd51 	bl	800121a <_close>
 8006778:	1c43      	adds	r3, r0, #1
 800677a:	d102      	bne.n	8006782 <_close_r+0x1a>
 800677c:	682b      	ldr	r3, [r5, #0]
 800677e:	b103      	cbz	r3, 8006782 <_close_r+0x1a>
 8006780:	6023      	str	r3, [r4, #0]
 8006782:	bd38      	pop	{r3, r4, r5, pc}
 8006784:	200006a4 	.word	0x200006a4

08006788 <_lseek_r>:
 8006788:	b538      	push	{r3, r4, r5, lr}
 800678a:	4d07      	ldr	r5, [pc, #28]	@ (80067a8 <_lseek_r+0x20>)
 800678c:	4604      	mov	r4, r0
 800678e:	4608      	mov	r0, r1
 8006790:	4611      	mov	r1, r2
 8006792:	2200      	movs	r2, #0
 8006794:	602a      	str	r2, [r5, #0]
 8006796:	461a      	mov	r2, r3
 8006798:	f7fa fd66 	bl	8001268 <_lseek>
 800679c:	1c43      	adds	r3, r0, #1
 800679e:	d102      	bne.n	80067a6 <_lseek_r+0x1e>
 80067a0:	682b      	ldr	r3, [r5, #0]
 80067a2:	b103      	cbz	r3, 80067a6 <_lseek_r+0x1e>
 80067a4:	6023      	str	r3, [r4, #0]
 80067a6:	bd38      	pop	{r3, r4, r5, pc}
 80067a8:	200006a4 	.word	0x200006a4

080067ac <_read_r>:
 80067ac:	b538      	push	{r3, r4, r5, lr}
 80067ae:	4d07      	ldr	r5, [pc, #28]	@ (80067cc <_read_r+0x20>)
 80067b0:	4604      	mov	r4, r0
 80067b2:	4608      	mov	r0, r1
 80067b4:	4611      	mov	r1, r2
 80067b6:	2200      	movs	r2, #0
 80067b8:	602a      	str	r2, [r5, #0]
 80067ba:	461a      	mov	r2, r3
 80067bc:	f7fa fcf4 	bl	80011a8 <_read>
 80067c0:	1c43      	adds	r3, r0, #1
 80067c2:	d102      	bne.n	80067ca <_read_r+0x1e>
 80067c4:	682b      	ldr	r3, [r5, #0]
 80067c6:	b103      	cbz	r3, 80067ca <_read_r+0x1e>
 80067c8:	6023      	str	r3, [r4, #0]
 80067ca:	bd38      	pop	{r3, r4, r5, pc}
 80067cc:	200006a4 	.word	0x200006a4

080067d0 <_sbrk_r>:
 80067d0:	b538      	push	{r3, r4, r5, lr}
 80067d2:	4d06      	ldr	r5, [pc, #24]	@ (80067ec <_sbrk_r+0x1c>)
 80067d4:	2300      	movs	r3, #0
 80067d6:	4604      	mov	r4, r0
 80067d8:	4608      	mov	r0, r1
 80067da:	602b      	str	r3, [r5, #0]
 80067dc:	f7fa fd52 	bl	8001284 <_sbrk>
 80067e0:	1c43      	adds	r3, r0, #1
 80067e2:	d102      	bne.n	80067ea <_sbrk_r+0x1a>
 80067e4:	682b      	ldr	r3, [r5, #0]
 80067e6:	b103      	cbz	r3, 80067ea <_sbrk_r+0x1a>
 80067e8:	6023      	str	r3, [r4, #0]
 80067ea:	bd38      	pop	{r3, r4, r5, pc}
 80067ec:	200006a4 	.word	0x200006a4

080067f0 <_write_r>:
 80067f0:	b538      	push	{r3, r4, r5, lr}
 80067f2:	4d07      	ldr	r5, [pc, #28]	@ (8006810 <_write_r+0x20>)
 80067f4:	4604      	mov	r4, r0
 80067f6:	4608      	mov	r0, r1
 80067f8:	4611      	mov	r1, r2
 80067fa:	2200      	movs	r2, #0
 80067fc:	602a      	str	r2, [r5, #0]
 80067fe:	461a      	mov	r2, r3
 8006800:	f7fa fcef 	bl	80011e2 <_write>
 8006804:	1c43      	adds	r3, r0, #1
 8006806:	d102      	bne.n	800680e <_write_r+0x1e>
 8006808:	682b      	ldr	r3, [r5, #0]
 800680a:	b103      	cbz	r3, 800680e <_write_r+0x1e>
 800680c:	6023      	str	r3, [r4, #0]
 800680e:	bd38      	pop	{r3, r4, r5, pc}
 8006810:	200006a4 	.word	0x200006a4

08006814 <__errno>:
 8006814:	4b01      	ldr	r3, [pc, #4]	@ (800681c <__errno+0x8>)
 8006816:	6818      	ldr	r0, [r3, #0]
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	20000018 	.word	0x20000018

08006820 <__libc_init_array>:
 8006820:	b570      	push	{r4, r5, r6, lr}
 8006822:	4d0d      	ldr	r5, [pc, #52]	@ (8006858 <__libc_init_array+0x38>)
 8006824:	4c0d      	ldr	r4, [pc, #52]	@ (800685c <__libc_init_array+0x3c>)
 8006826:	1b64      	subs	r4, r4, r5
 8006828:	10a4      	asrs	r4, r4, #2
 800682a:	2600      	movs	r6, #0
 800682c:	42a6      	cmp	r6, r4
 800682e:	d109      	bne.n	8006844 <__libc_init_array+0x24>
 8006830:	4d0b      	ldr	r5, [pc, #44]	@ (8006860 <__libc_init_array+0x40>)
 8006832:	4c0c      	ldr	r4, [pc, #48]	@ (8006864 <__libc_init_array+0x44>)
 8006834:	f000 fd2a 	bl	800728c <_init>
 8006838:	1b64      	subs	r4, r4, r5
 800683a:	10a4      	asrs	r4, r4, #2
 800683c:	2600      	movs	r6, #0
 800683e:	42a6      	cmp	r6, r4
 8006840:	d105      	bne.n	800684e <__libc_init_array+0x2e>
 8006842:	bd70      	pop	{r4, r5, r6, pc}
 8006844:	f855 3b04 	ldr.w	r3, [r5], #4
 8006848:	4798      	blx	r3
 800684a:	3601      	adds	r6, #1
 800684c:	e7ee      	b.n	800682c <__libc_init_array+0xc>
 800684e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006852:	4798      	blx	r3
 8006854:	3601      	adds	r6, #1
 8006856:	e7f2      	b.n	800683e <__libc_init_array+0x1e>
 8006858:	08007384 	.word	0x08007384
 800685c:	08007384 	.word	0x08007384
 8006860:	08007384 	.word	0x08007384
 8006864:	08007388 	.word	0x08007388

08006868 <_free_r>:
 8006868:	b538      	push	{r3, r4, r5, lr}
 800686a:	4605      	mov	r5, r0
 800686c:	2900      	cmp	r1, #0
 800686e:	d041      	beq.n	80068f4 <_free_r+0x8c>
 8006870:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006874:	1f0c      	subs	r4, r1, #4
 8006876:	2b00      	cmp	r3, #0
 8006878:	bfb8      	it	lt
 800687a:	18e4      	addlt	r4, r4, r3
 800687c:	f7ff fe40 	bl	8006500 <__malloc_lock>
 8006880:	4a1d      	ldr	r2, [pc, #116]	@ (80068f8 <_free_r+0x90>)
 8006882:	6813      	ldr	r3, [r2, #0]
 8006884:	b933      	cbnz	r3, 8006894 <_free_r+0x2c>
 8006886:	6063      	str	r3, [r4, #4]
 8006888:	6014      	str	r4, [r2, #0]
 800688a:	4628      	mov	r0, r5
 800688c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006890:	f7ff be3c 	b.w	800650c <__malloc_unlock>
 8006894:	42a3      	cmp	r3, r4
 8006896:	d908      	bls.n	80068aa <_free_r+0x42>
 8006898:	6820      	ldr	r0, [r4, #0]
 800689a:	1821      	adds	r1, r4, r0
 800689c:	428b      	cmp	r3, r1
 800689e:	bf01      	itttt	eq
 80068a0:	6819      	ldreq	r1, [r3, #0]
 80068a2:	685b      	ldreq	r3, [r3, #4]
 80068a4:	1809      	addeq	r1, r1, r0
 80068a6:	6021      	streq	r1, [r4, #0]
 80068a8:	e7ed      	b.n	8006886 <_free_r+0x1e>
 80068aa:	461a      	mov	r2, r3
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	b10b      	cbz	r3, 80068b4 <_free_r+0x4c>
 80068b0:	42a3      	cmp	r3, r4
 80068b2:	d9fa      	bls.n	80068aa <_free_r+0x42>
 80068b4:	6811      	ldr	r1, [r2, #0]
 80068b6:	1850      	adds	r0, r2, r1
 80068b8:	42a0      	cmp	r0, r4
 80068ba:	d10b      	bne.n	80068d4 <_free_r+0x6c>
 80068bc:	6820      	ldr	r0, [r4, #0]
 80068be:	4401      	add	r1, r0
 80068c0:	1850      	adds	r0, r2, r1
 80068c2:	4283      	cmp	r3, r0
 80068c4:	6011      	str	r1, [r2, #0]
 80068c6:	d1e0      	bne.n	800688a <_free_r+0x22>
 80068c8:	6818      	ldr	r0, [r3, #0]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	6053      	str	r3, [r2, #4]
 80068ce:	4408      	add	r0, r1
 80068d0:	6010      	str	r0, [r2, #0]
 80068d2:	e7da      	b.n	800688a <_free_r+0x22>
 80068d4:	d902      	bls.n	80068dc <_free_r+0x74>
 80068d6:	230c      	movs	r3, #12
 80068d8:	602b      	str	r3, [r5, #0]
 80068da:	e7d6      	b.n	800688a <_free_r+0x22>
 80068dc:	6820      	ldr	r0, [r4, #0]
 80068de:	1821      	adds	r1, r4, r0
 80068e0:	428b      	cmp	r3, r1
 80068e2:	bf04      	itt	eq
 80068e4:	6819      	ldreq	r1, [r3, #0]
 80068e6:	685b      	ldreq	r3, [r3, #4]
 80068e8:	6063      	str	r3, [r4, #4]
 80068ea:	bf04      	itt	eq
 80068ec:	1809      	addeq	r1, r1, r0
 80068ee:	6021      	streq	r1, [r4, #0]
 80068f0:	6054      	str	r4, [r2, #4]
 80068f2:	e7ca      	b.n	800688a <_free_r+0x22>
 80068f4:	bd38      	pop	{r3, r4, r5, pc}
 80068f6:	bf00      	nop
 80068f8:	20000564 	.word	0x20000564

080068fc <__sfputc_r>:
 80068fc:	6893      	ldr	r3, [r2, #8]
 80068fe:	3b01      	subs	r3, #1
 8006900:	2b00      	cmp	r3, #0
 8006902:	b410      	push	{r4}
 8006904:	6093      	str	r3, [r2, #8]
 8006906:	da08      	bge.n	800691a <__sfputc_r+0x1e>
 8006908:	6994      	ldr	r4, [r2, #24]
 800690a:	42a3      	cmp	r3, r4
 800690c:	db01      	blt.n	8006912 <__sfputc_r+0x16>
 800690e:	290a      	cmp	r1, #10
 8006910:	d103      	bne.n	800691a <__sfputc_r+0x1e>
 8006912:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006916:	f000 bba1 	b.w	800705c <__swbuf_r>
 800691a:	6813      	ldr	r3, [r2, #0]
 800691c:	1c58      	adds	r0, r3, #1
 800691e:	6010      	str	r0, [r2, #0]
 8006920:	7019      	strb	r1, [r3, #0]
 8006922:	4608      	mov	r0, r1
 8006924:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006928:	4770      	bx	lr

0800692a <__sfputs_r>:
 800692a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800692c:	4606      	mov	r6, r0
 800692e:	460f      	mov	r7, r1
 8006930:	4614      	mov	r4, r2
 8006932:	18d5      	adds	r5, r2, r3
 8006934:	42ac      	cmp	r4, r5
 8006936:	d101      	bne.n	800693c <__sfputs_r+0x12>
 8006938:	2000      	movs	r0, #0
 800693a:	e007      	b.n	800694c <__sfputs_r+0x22>
 800693c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006940:	463a      	mov	r2, r7
 8006942:	4630      	mov	r0, r6
 8006944:	f7ff ffda 	bl	80068fc <__sfputc_r>
 8006948:	1c43      	adds	r3, r0, #1
 800694a:	d1f3      	bne.n	8006934 <__sfputs_r+0xa>
 800694c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006950 <_vfiprintf_r>:
 8006950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006954:	460d      	mov	r5, r1
 8006956:	b09d      	sub	sp, #116	@ 0x74
 8006958:	4614      	mov	r4, r2
 800695a:	4698      	mov	r8, r3
 800695c:	4606      	mov	r6, r0
 800695e:	b118      	cbz	r0, 8006968 <_vfiprintf_r+0x18>
 8006960:	6a03      	ldr	r3, [r0, #32]
 8006962:	b90b      	cbnz	r3, 8006968 <_vfiprintf_r+0x18>
 8006964:	f7ff fe64 	bl	8006630 <__sinit>
 8006968:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800696a:	07d9      	lsls	r1, r3, #31
 800696c:	d405      	bmi.n	800697a <_vfiprintf_r+0x2a>
 800696e:	89ab      	ldrh	r3, [r5, #12]
 8006970:	059a      	lsls	r2, r3, #22
 8006972:	d402      	bmi.n	800697a <_vfiprintf_r+0x2a>
 8006974:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006976:	f7fb f965 	bl	8001c44 <__retarget_lock_acquire_recursive>
 800697a:	89ab      	ldrh	r3, [r5, #12]
 800697c:	071b      	lsls	r3, r3, #28
 800697e:	d501      	bpl.n	8006984 <_vfiprintf_r+0x34>
 8006980:	692b      	ldr	r3, [r5, #16]
 8006982:	b99b      	cbnz	r3, 80069ac <_vfiprintf_r+0x5c>
 8006984:	4629      	mov	r1, r5
 8006986:	4630      	mov	r0, r6
 8006988:	f000 fba6 	bl	80070d8 <__swsetup_r>
 800698c:	b170      	cbz	r0, 80069ac <_vfiprintf_r+0x5c>
 800698e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006990:	07dc      	lsls	r4, r3, #31
 8006992:	d504      	bpl.n	800699e <_vfiprintf_r+0x4e>
 8006994:	f04f 30ff 	mov.w	r0, #4294967295
 8006998:	b01d      	add	sp, #116	@ 0x74
 800699a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800699e:	89ab      	ldrh	r3, [r5, #12]
 80069a0:	0598      	lsls	r0, r3, #22
 80069a2:	d4f7      	bmi.n	8006994 <_vfiprintf_r+0x44>
 80069a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80069a6:	f7fb f962 	bl	8001c6e <__retarget_lock_release_recursive>
 80069aa:	e7f3      	b.n	8006994 <_vfiprintf_r+0x44>
 80069ac:	2300      	movs	r3, #0
 80069ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80069b0:	2320      	movs	r3, #32
 80069b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80069b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80069ba:	2330      	movs	r3, #48	@ 0x30
 80069bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006b6c <_vfiprintf_r+0x21c>
 80069c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80069c4:	f04f 0901 	mov.w	r9, #1
 80069c8:	4623      	mov	r3, r4
 80069ca:	469a      	mov	sl, r3
 80069cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069d0:	b10a      	cbz	r2, 80069d6 <_vfiprintf_r+0x86>
 80069d2:	2a25      	cmp	r2, #37	@ 0x25
 80069d4:	d1f9      	bne.n	80069ca <_vfiprintf_r+0x7a>
 80069d6:	ebba 0b04 	subs.w	fp, sl, r4
 80069da:	d00b      	beq.n	80069f4 <_vfiprintf_r+0xa4>
 80069dc:	465b      	mov	r3, fp
 80069de:	4622      	mov	r2, r4
 80069e0:	4629      	mov	r1, r5
 80069e2:	4630      	mov	r0, r6
 80069e4:	f7ff ffa1 	bl	800692a <__sfputs_r>
 80069e8:	3001      	adds	r0, #1
 80069ea:	f000 80a7 	beq.w	8006b3c <_vfiprintf_r+0x1ec>
 80069ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80069f0:	445a      	add	r2, fp
 80069f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80069f4:	f89a 3000 	ldrb.w	r3, [sl]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f000 809f 	beq.w	8006b3c <_vfiprintf_r+0x1ec>
 80069fe:	2300      	movs	r3, #0
 8006a00:	f04f 32ff 	mov.w	r2, #4294967295
 8006a04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a08:	f10a 0a01 	add.w	sl, sl, #1
 8006a0c:	9304      	str	r3, [sp, #16]
 8006a0e:	9307      	str	r3, [sp, #28]
 8006a10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006a14:	931a      	str	r3, [sp, #104]	@ 0x68
 8006a16:	4654      	mov	r4, sl
 8006a18:	2205      	movs	r2, #5
 8006a1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a1e:	4853      	ldr	r0, [pc, #332]	@ (8006b6c <_vfiprintf_r+0x21c>)
 8006a20:	f7f9 fbd6 	bl	80001d0 <memchr>
 8006a24:	9a04      	ldr	r2, [sp, #16]
 8006a26:	b9d8      	cbnz	r0, 8006a60 <_vfiprintf_r+0x110>
 8006a28:	06d1      	lsls	r1, r2, #27
 8006a2a:	bf44      	itt	mi
 8006a2c:	2320      	movmi	r3, #32
 8006a2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a32:	0713      	lsls	r3, r2, #28
 8006a34:	bf44      	itt	mi
 8006a36:	232b      	movmi	r3, #43	@ 0x2b
 8006a38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a3c:	f89a 3000 	ldrb.w	r3, [sl]
 8006a40:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a42:	d015      	beq.n	8006a70 <_vfiprintf_r+0x120>
 8006a44:	9a07      	ldr	r2, [sp, #28]
 8006a46:	4654      	mov	r4, sl
 8006a48:	2000      	movs	r0, #0
 8006a4a:	f04f 0c0a 	mov.w	ip, #10
 8006a4e:	4621      	mov	r1, r4
 8006a50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a54:	3b30      	subs	r3, #48	@ 0x30
 8006a56:	2b09      	cmp	r3, #9
 8006a58:	d94b      	bls.n	8006af2 <_vfiprintf_r+0x1a2>
 8006a5a:	b1b0      	cbz	r0, 8006a8a <_vfiprintf_r+0x13a>
 8006a5c:	9207      	str	r2, [sp, #28]
 8006a5e:	e014      	b.n	8006a8a <_vfiprintf_r+0x13a>
 8006a60:	eba0 0308 	sub.w	r3, r0, r8
 8006a64:	fa09 f303 	lsl.w	r3, r9, r3
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	9304      	str	r3, [sp, #16]
 8006a6c:	46a2      	mov	sl, r4
 8006a6e:	e7d2      	b.n	8006a16 <_vfiprintf_r+0xc6>
 8006a70:	9b03      	ldr	r3, [sp, #12]
 8006a72:	1d19      	adds	r1, r3, #4
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	9103      	str	r1, [sp, #12]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	bfbb      	ittet	lt
 8006a7c:	425b      	neglt	r3, r3
 8006a7e:	f042 0202 	orrlt.w	r2, r2, #2
 8006a82:	9307      	strge	r3, [sp, #28]
 8006a84:	9307      	strlt	r3, [sp, #28]
 8006a86:	bfb8      	it	lt
 8006a88:	9204      	strlt	r2, [sp, #16]
 8006a8a:	7823      	ldrb	r3, [r4, #0]
 8006a8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8006a8e:	d10a      	bne.n	8006aa6 <_vfiprintf_r+0x156>
 8006a90:	7863      	ldrb	r3, [r4, #1]
 8006a92:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a94:	d132      	bne.n	8006afc <_vfiprintf_r+0x1ac>
 8006a96:	9b03      	ldr	r3, [sp, #12]
 8006a98:	1d1a      	adds	r2, r3, #4
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	9203      	str	r2, [sp, #12]
 8006a9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006aa2:	3402      	adds	r4, #2
 8006aa4:	9305      	str	r3, [sp, #20]
 8006aa6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006b7c <_vfiprintf_r+0x22c>
 8006aaa:	7821      	ldrb	r1, [r4, #0]
 8006aac:	2203      	movs	r2, #3
 8006aae:	4650      	mov	r0, sl
 8006ab0:	f7f9 fb8e 	bl	80001d0 <memchr>
 8006ab4:	b138      	cbz	r0, 8006ac6 <_vfiprintf_r+0x176>
 8006ab6:	9b04      	ldr	r3, [sp, #16]
 8006ab8:	eba0 000a 	sub.w	r0, r0, sl
 8006abc:	2240      	movs	r2, #64	@ 0x40
 8006abe:	4082      	lsls	r2, r0
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	3401      	adds	r4, #1
 8006ac4:	9304      	str	r3, [sp, #16]
 8006ac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006aca:	4829      	ldr	r0, [pc, #164]	@ (8006b70 <_vfiprintf_r+0x220>)
 8006acc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006ad0:	2206      	movs	r2, #6
 8006ad2:	f7f9 fb7d 	bl	80001d0 <memchr>
 8006ad6:	2800      	cmp	r0, #0
 8006ad8:	d03f      	beq.n	8006b5a <_vfiprintf_r+0x20a>
 8006ada:	4b26      	ldr	r3, [pc, #152]	@ (8006b74 <_vfiprintf_r+0x224>)
 8006adc:	bb1b      	cbnz	r3, 8006b26 <_vfiprintf_r+0x1d6>
 8006ade:	9b03      	ldr	r3, [sp, #12]
 8006ae0:	3307      	adds	r3, #7
 8006ae2:	f023 0307 	bic.w	r3, r3, #7
 8006ae6:	3308      	adds	r3, #8
 8006ae8:	9303      	str	r3, [sp, #12]
 8006aea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006aec:	443b      	add	r3, r7
 8006aee:	9309      	str	r3, [sp, #36]	@ 0x24
 8006af0:	e76a      	b.n	80069c8 <_vfiprintf_r+0x78>
 8006af2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006af6:	460c      	mov	r4, r1
 8006af8:	2001      	movs	r0, #1
 8006afa:	e7a8      	b.n	8006a4e <_vfiprintf_r+0xfe>
 8006afc:	2300      	movs	r3, #0
 8006afe:	3401      	adds	r4, #1
 8006b00:	9305      	str	r3, [sp, #20]
 8006b02:	4619      	mov	r1, r3
 8006b04:	f04f 0c0a 	mov.w	ip, #10
 8006b08:	4620      	mov	r0, r4
 8006b0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b0e:	3a30      	subs	r2, #48	@ 0x30
 8006b10:	2a09      	cmp	r2, #9
 8006b12:	d903      	bls.n	8006b1c <_vfiprintf_r+0x1cc>
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d0c6      	beq.n	8006aa6 <_vfiprintf_r+0x156>
 8006b18:	9105      	str	r1, [sp, #20]
 8006b1a:	e7c4      	b.n	8006aa6 <_vfiprintf_r+0x156>
 8006b1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b20:	4604      	mov	r4, r0
 8006b22:	2301      	movs	r3, #1
 8006b24:	e7f0      	b.n	8006b08 <_vfiprintf_r+0x1b8>
 8006b26:	ab03      	add	r3, sp, #12
 8006b28:	9300      	str	r3, [sp, #0]
 8006b2a:	462a      	mov	r2, r5
 8006b2c:	4b12      	ldr	r3, [pc, #72]	@ (8006b78 <_vfiprintf_r+0x228>)
 8006b2e:	a904      	add	r1, sp, #16
 8006b30:	4630      	mov	r0, r6
 8006b32:	f3af 8000 	nop.w
 8006b36:	4607      	mov	r7, r0
 8006b38:	1c78      	adds	r0, r7, #1
 8006b3a:	d1d6      	bne.n	8006aea <_vfiprintf_r+0x19a>
 8006b3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b3e:	07d9      	lsls	r1, r3, #31
 8006b40:	d405      	bmi.n	8006b4e <_vfiprintf_r+0x1fe>
 8006b42:	89ab      	ldrh	r3, [r5, #12]
 8006b44:	059a      	lsls	r2, r3, #22
 8006b46:	d402      	bmi.n	8006b4e <_vfiprintf_r+0x1fe>
 8006b48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b4a:	f7fb f890 	bl	8001c6e <__retarget_lock_release_recursive>
 8006b4e:	89ab      	ldrh	r3, [r5, #12]
 8006b50:	065b      	lsls	r3, r3, #25
 8006b52:	f53f af1f 	bmi.w	8006994 <_vfiprintf_r+0x44>
 8006b56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006b58:	e71e      	b.n	8006998 <_vfiprintf_r+0x48>
 8006b5a:	ab03      	add	r3, sp, #12
 8006b5c:	9300      	str	r3, [sp, #0]
 8006b5e:	462a      	mov	r2, r5
 8006b60:	4b05      	ldr	r3, [pc, #20]	@ (8006b78 <_vfiprintf_r+0x228>)
 8006b62:	a904      	add	r1, sp, #16
 8006b64:	4630      	mov	r0, r6
 8006b66:	f000 f879 	bl	8006c5c <_printf_i>
 8006b6a:	e7e4      	b.n	8006b36 <_vfiprintf_r+0x1e6>
 8006b6c:	08007348 	.word	0x08007348
 8006b70:	08007352 	.word	0x08007352
 8006b74:	00000000 	.word	0x00000000
 8006b78:	0800692b 	.word	0x0800692b
 8006b7c:	0800734e 	.word	0x0800734e

08006b80 <_printf_common>:
 8006b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b84:	4616      	mov	r6, r2
 8006b86:	4698      	mov	r8, r3
 8006b88:	688a      	ldr	r2, [r1, #8]
 8006b8a:	690b      	ldr	r3, [r1, #16]
 8006b8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006b90:	4293      	cmp	r3, r2
 8006b92:	bfb8      	it	lt
 8006b94:	4613      	movlt	r3, r2
 8006b96:	6033      	str	r3, [r6, #0]
 8006b98:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006b9c:	4607      	mov	r7, r0
 8006b9e:	460c      	mov	r4, r1
 8006ba0:	b10a      	cbz	r2, 8006ba6 <_printf_common+0x26>
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	6033      	str	r3, [r6, #0]
 8006ba6:	6823      	ldr	r3, [r4, #0]
 8006ba8:	0699      	lsls	r1, r3, #26
 8006baa:	bf42      	ittt	mi
 8006bac:	6833      	ldrmi	r3, [r6, #0]
 8006bae:	3302      	addmi	r3, #2
 8006bb0:	6033      	strmi	r3, [r6, #0]
 8006bb2:	6825      	ldr	r5, [r4, #0]
 8006bb4:	f015 0506 	ands.w	r5, r5, #6
 8006bb8:	d106      	bne.n	8006bc8 <_printf_common+0x48>
 8006bba:	f104 0a19 	add.w	sl, r4, #25
 8006bbe:	68e3      	ldr	r3, [r4, #12]
 8006bc0:	6832      	ldr	r2, [r6, #0]
 8006bc2:	1a9b      	subs	r3, r3, r2
 8006bc4:	42ab      	cmp	r3, r5
 8006bc6:	dc26      	bgt.n	8006c16 <_printf_common+0x96>
 8006bc8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006bcc:	6822      	ldr	r2, [r4, #0]
 8006bce:	3b00      	subs	r3, #0
 8006bd0:	bf18      	it	ne
 8006bd2:	2301      	movne	r3, #1
 8006bd4:	0692      	lsls	r2, r2, #26
 8006bd6:	d42b      	bmi.n	8006c30 <_printf_common+0xb0>
 8006bd8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006bdc:	4641      	mov	r1, r8
 8006bde:	4638      	mov	r0, r7
 8006be0:	47c8      	blx	r9
 8006be2:	3001      	adds	r0, #1
 8006be4:	d01e      	beq.n	8006c24 <_printf_common+0xa4>
 8006be6:	6823      	ldr	r3, [r4, #0]
 8006be8:	6922      	ldr	r2, [r4, #16]
 8006bea:	f003 0306 	and.w	r3, r3, #6
 8006bee:	2b04      	cmp	r3, #4
 8006bf0:	bf02      	ittt	eq
 8006bf2:	68e5      	ldreq	r5, [r4, #12]
 8006bf4:	6833      	ldreq	r3, [r6, #0]
 8006bf6:	1aed      	subeq	r5, r5, r3
 8006bf8:	68a3      	ldr	r3, [r4, #8]
 8006bfa:	bf0c      	ite	eq
 8006bfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c00:	2500      	movne	r5, #0
 8006c02:	4293      	cmp	r3, r2
 8006c04:	bfc4      	itt	gt
 8006c06:	1a9b      	subgt	r3, r3, r2
 8006c08:	18ed      	addgt	r5, r5, r3
 8006c0a:	2600      	movs	r6, #0
 8006c0c:	341a      	adds	r4, #26
 8006c0e:	42b5      	cmp	r5, r6
 8006c10:	d11a      	bne.n	8006c48 <_printf_common+0xc8>
 8006c12:	2000      	movs	r0, #0
 8006c14:	e008      	b.n	8006c28 <_printf_common+0xa8>
 8006c16:	2301      	movs	r3, #1
 8006c18:	4652      	mov	r2, sl
 8006c1a:	4641      	mov	r1, r8
 8006c1c:	4638      	mov	r0, r7
 8006c1e:	47c8      	blx	r9
 8006c20:	3001      	adds	r0, #1
 8006c22:	d103      	bne.n	8006c2c <_printf_common+0xac>
 8006c24:	f04f 30ff 	mov.w	r0, #4294967295
 8006c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c2c:	3501      	adds	r5, #1
 8006c2e:	e7c6      	b.n	8006bbe <_printf_common+0x3e>
 8006c30:	18e1      	adds	r1, r4, r3
 8006c32:	1c5a      	adds	r2, r3, #1
 8006c34:	2030      	movs	r0, #48	@ 0x30
 8006c36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006c3a:	4422      	add	r2, r4
 8006c3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006c40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006c44:	3302      	adds	r3, #2
 8006c46:	e7c7      	b.n	8006bd8 <_printf_common+0x58>
 8006c48:	2301      	movs	r3, #1
 8006c4a:	4622      	mov	r2, r4
 8006c4c:	4641      	mov	r1, r8
 8006c4e:	4638      	mov	r0, r7
 8006c50:	47c8      	blx	r9
 8006c52:	3001      	adds	r0, #1
 8006c54:	d0e6      	beq.n	8006c24 <_printf_common+0xa4>
 8006c56:	3601      	adds	r6, #1
 8006c58:	e7d9      	b.n	8006c0e <_printf_common+0x8e>
	...

08006c5c <_printf_i>:
 8006c5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c60:	7e0f      	ldrb	r7, [r1, #24]
 8006c62:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006c64:	2f78      	cmp	r7, #120	@ 0x78
 8006c66:	4691      	mov	r9, r2
 8006c68:	4680      	mov	r8, r0
 8006c6a:	460c      	mov	r4, r1
 8006c6c:	469a      	mov	sl, r3
 8006c6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006c72:	d807      	bhi.n	8006c84 <_printf_i+0x28>
 8006c74:	2f62      	cmp	r7, #98	@ 0x62
 8006c76:	d80a      	bhi.n	8006c8e <_printf_i+0x32>
 8006c78:	2f00      	cmp	r7, #0
 8006c7a:	f000 80d2 	beq.w	8006e22 <_printf_i+0x1c6>
 8006c7e:	2f58      	cmp	r7, #88	@ 0x58
 8006c80:	f000 80b9 	beq.w	8006df6 <_printf_i+0x19a>
 8006c84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006c8c:	e03a      	b.n	8006d04 <_printf_i+0xa8>
 8006c8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006c92:	2b15      	cmp	r3, #21
 8006c94:	d8f6      	bhi.n	8006c84 <_printf_i+0x28>
 8006c96:	a101      	add	r1, pc, #4	@ (adr r1, 8006c9c <_printf_i+0x40>)
 8006c98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c9c:	08006cf5 	.word	0x08006cf5
 8006ca0:	08006d09 	.word	0x08006d09
 8006ca4:	08006c85 	.word	0x08006c85
 8006ca8:	08006c85 	.word	0x08006c85
 8006cac:	08006c85 	.word	0x08006c85
 8006cb0:	08006c85 	.word	0x08006c85
 8006cb4:	08006d09 	.word	0x08006d09
 8006cb8:	08006c85 	.word	0x08006c85
 8006cbc:	08006c85 	.word	0x08006c85
 8006cc0:	08006c85 	.word	0x08006c85
 8006cc4:	08006c85 	.word	0x08006c85
 8006cc8:	08006e09 	.word	0x08006e09
 8006ccc:	08006d33 	.word	0x08006d33
 8006cd0:	08006dc3 	.word	0x08006dc3
 8006cd4:	08006c85 	.word	0x08006c85
 8006cd8:	08006c85 	.word	0x08006c85
 8006cdc:	08006e2b 	.word	0x08006e2b
 8006ce0:	08006c85 	.word	0x08006c85
 8006ce4:	08006d33 	.word	0x08006d33
 8006ce8:	08006c85 	.word	0x08006c85
 8006cec:	08006c85 	.word	0x08006c85
 8006cf0:	08006dcb 	.word	0x08006dcb
 8006cf4:	6833      	ldr	r3, [r6, #0]
 8006cf6:	1d1a      	adds	r2, r3, #4
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	6032      	str	r2, [r6, #0]
 8006cfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006d04:	2301      	movs	r3, #1
 8006d06:	e09d      	b.n	8006e44 <_printf_i+0x1e8>
 8006d08:	6833      	ldr	r3, [r6, #0]
 8006d0a:	6820      	ldr	r0, [r4, #0]
 8006d0c:	1d19      	adds	r1, r3, #4
 8006d0e:	6031      	str	r1, [r6, #0]
 8006d10:	0606      	lsls	r6, r0, #24
 8006d12:	d501      	bpl.n	8006d18 <_printf_i+0xbc>
 8006d14:	681d      	ldr	r5, [r3, #0]
 8006d16:	e003      	b.n	8006d20 <_printf_i+0xc4>
 8006d18:	0645      	lsls	r5, r0, #25
 8006d1a:	d5fb      	bpl.n	8006d14 <_printf_i+0xb8>
 8006d1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006d20:	2d00      	cmp	r5, #0
 8006d22:	da03      	bge.n	8006d2c <_printf_i+0xd0>
 8006d24:	232d      	movs	r3, #45	@ 0x2d
 8006d26:	426d      	negs	r5, r5
 8006d28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d2c:	4859      	ldr	r0, [pc, #356]	@ (8006e94 <_printf_i+0x238>)
 8006d2e:	230a      	movs	r3, #10
 8006d30:	e011      	b.n	8006d56 <_printf_i+0xfa>
 8006d32:	6821      	ldr	r1, [r4, #0]
 8006d34:	6833      	ldr	r3, [r6, #0]
 8006d36:	0608      	lsls	r0, r1, #24
 8006d38:	f853 5b04 	ldr.w	r5, [r3], #4
 8006d3c:	d402      	bmi.n	8006d44 <_printf_i+0xe8>
 8006d3e:	0649      	lsls	r1, r1, #25
 8006d40:	bf48      	it	mi
 8006d42:	b2ad      	uxthmi	r5, r5
 8006d44:	2f6f      	cmp	r7, #111	@ 0x6f
 8006d46:	4853      	ldr	r0, [pc, #332]	@ (8006e94 <_printf_i+0x238>)
 8006d48:	6033      	str	r3, [r6, #0]
 8006d4a:	bf14      	ite	ne
 8006d4c:	230a      	movne	r3, #10
 8006d4e:	2308      	moveq	r3, #8
 8006d50:	2100      	movs	r1, #0
 8006d52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006d56:	6866      	ldr	r6, [r4, #4]
 8006d58:	60a6      	str	r6, [r4, #8]
 8006d5a:	2e00      	cmp	r6, #0
 8006d5c:	bfa2      	ittt	ge
 8006d5e:	6821      	ldrge	r1, [r4, #0]
 8006d60:	f021 0104 	bicge.w	r1, r1, #4
 8006d64:	6021      	strge	r1, [r4, #0]
 8006d66:	b90d      	cbnz	r5, 8006d6c <_printf_i+0x110>
 8006d68:	2e00      	cmp	r6, #0
 8006d6a:	d04b      	beq.n	8006e04 <_printf_i+0x1a8>
 8006d6c:	4616      	mov	r6, r2
 8006d6e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d72:	fb03 5711 	mls	r7, r3, r1, r5
 8006d76:	5dc7      	ldrb	r7, [r0, r7]
 8006d78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d7c:	462f      	mov	r7, r5
 8006d7e:	42bb      	cmp	r3, r7
 8006d80:	460d      	mov	r5, r1
 8006d82:	d9f4      	bls.n	8006d6e <_printf_i+0x112>
 8006d84:	2b08      	cmp	r3, #8
 8006d86:	d10b      	bne.n	8006da0 <_printf_i+0x144>
 8006d88:	6823      	ldr	r3, [r4, #0]
 8006d8a:	07df      	lsls	r7, r3, #31
 8006d8c:	d508      	bpl.n	8006da0 <_printf_i+0x144>
 8006d8e:	6923      	ldr	r3, [r4, #16]
 8006d90:	6861      	ldr	r1, [r4, #4]
 8006d92:	4299      	cmp	r1, r3
 8006d94:	bfde      	ittt	le
 8006d96:	2330      	movle	r3, #48	@ 0x30
 8006d98:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d9c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006da0:	1b92      	subs	r2, r2, r6
 8006da2:	6122      	str	r2, [r4, #16]
 8006da4:	f8cd a000 	str.w	sl, [sp]
 8006da8:	464b      	mov	r3, r9
 8006daa:	aa03      	add	r2, sp, #12
 8006dac:	4621      	mov	r1, r4
 8006dae:	4640      	mov	r0, r8
 8006db0:	f7ff fee6 	bl	8006b80 <_printf_common>
 8006db4:	3001      	adds	r0, #1
 8006db6:	d14a      	bne.n	8006e4e <_printf_i+0x1f2>
 8006db8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dbc:	b004      	add	sp, #16
 8006dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dc2:	6823      	ldr	r3, [r4, #0]
 8006dc4:	f043 0320 	orr.w	r3, r3, #32
 8006dc8:	6023      	str	r3, [r4, #0]
 8006dca:	4833      	ldr	r0, [pc, #204]	@ (8006e98 <_printf_i+0x23c>)
 8006dcc:	2778      	movs	r7, #120	@ 0x78
 8006dce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006dd2:	6823      	ldr	r3, [r4, #0]
 8006dd4:	6831      	ldr	r1, [r6, #0]
 8006dd6:	061f      	lsls	r7, r3, #24
 8006dd8:	f851 5b04 	ldr.w	r5, [r1], #4
 8006ddc:	d402      	bmi.n	8006de4 <_printf_i+0x188>
 8006dde:	065f      	lsls	r7, r3, #25
 8006de0:	bf48      	it	mi
 8006de2:	b2ad      	uxthmi	r5, r5
 8006de4:	6031      	str	r1, [r6, #0]
 8006de6:	07d9      	lsls	r1, r3, #31
 8006de8:	bf44      	itt	mi
 8006dea:	f043 0320 	orrmi.w	r3, r3, #32
 8006dee:	6023      	strmi	r3, [r4, #0]
 8006df0:	b11d      	cbz	r5, 8006dfa <_printf_i+0x19e>
 8006df2:	2310      	movs	r3, #16
 8006df4:	e7ac      	b.n	8006d50 <_printf_i+0xf4>
 8006df6:	4827      	ldr	r0, [pc, #156]	@ (8006e94 <_printf_i+0x238>)
 8006df8:	e7e9      	b.n	8006dce <_printf_i+0x172>
 8006dfa:	6823      	ldr	r3, [r4, #0]
 8006dfc:	f023 0320 	bic.w	r3, r3, #32
 8006e00:	6023      	str	r3, [r4, #0]
 8006e02:	e7f6      	b.n	8006df2 <_printf_i+0x196>
 8006e04:	4616      	mov	r6, r2
 8006e06:	e7bd      	b.n	8006d84 <_printf_i+0x128>
 8006e08:	6833      	ldr	r3, [r6, #0]
 8006e0a:	6825      	ldr	r5, [r4, #0]
 8006e0c:	6961      	ldr	r1, [r4, #20]
 8006e0e:	1d18      	adds	r0, r3, #4
 8006e10:	6030      	str	r0, [r6, #0]
 8006e12:	062e      	lsls	r6, r5, #24
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	d501      	bpl.n	8006e1c <_printf_i+0x1c0>
 8006e18:	6019      	str	r1, [r3, #0]
 8006e1a:	e002      	b.n	8006e22 <_printf_i+0x1c6>
 8006e1c:	0668      	lsls	r0, r5, #25
 8006e1e:	d5fb      	bpl.n	8006e18 <_printf_i+0x1bc>
 8006e20:	8019      	strh	r1, [r3, #0]
 8006e22:	2300      	movs	r3, #0
 8006e24:	6123      	str	r3, [r4, #16]
 8006e26:	4616      	mov	r6, r2
 8006e28:	e7bc      	b.n	8006da4 <_printf_i+0x148>
 8006e2a:	6833      	ldr	r3, [r6, #0]
 8006e2c:	1d1a      	adds	r2, r3, #4
 8006e2e:	6032      	str	r2, [r6, #0]
 8006e30:	681e      	ldr	r6, [r3, #0]
 8006e32:	6862      	ldr	r2, [r4, #4]
 8006e34:	2100      	movs	r1, #0
 8006e36:	4630      	mov	r0, r6
 8006e38:	f7f9 f9ca 	bl	80001d0 <memchr>
 8006e3c:	b108      	cbz	r0, 8006e42 <_printf_i+0x1e6>
 8006e3e:	1b80      	subs	r0, r0, r6
 8006e40:	6060      	str	r0, [r4, #4]
 8006e42:	6863      	ldr	r3, [r4, #4]
 8006e44:	6123      	str	r3, [r4, #16]
 8006e46:	2300      	movs	r3, #0
 8006e48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e4c:	e7aa      	b.n	8006da4 <_printf_i+0x148>
 8006e4e:	6923      	ldr	r3, [r4, #16]
 8006e50:	4632      	mov	r2, r6
 8006e52:	4649      	mov	r1, r9
 8006e54:	4640      	mov	r0, r8
 8006e56:	47d0      	blx	sl
 8006e58:	3001      	adds	r0, #1
 8006e5a:	d0ad      	beq.n	8006db8 <_printf_i+0x15c>
 8006e5c:	6823      	ldr	r3, [r4, #0]
 8006e5e:	079b      	lsls	r3, r3, #30
 8006e60:	d413      	bmi.n	8006e8a <_printf_i+0x22e>
 8006e62:	68e0      	ldr	r0, [r4, #12]
 8006e64:	9b03      	ldr	r3, [sp, #12]
 8006e66:	4298      	cmp	r0, r3
 8006e68:	bfb8      	it	lt
 8006e6a:	4618      	movlt	r0, r3
 8006e6c:	e7a6      	b.n	8006dbc <_printf_i+0x160>
 8006e6e:	2301      	movs	r3, #1
 8006e70:	4632      	mov	r2, r6
 8006e72:	4649      	mov	r1, r9
 8006e74:	4640      	mov	r0, r8
 8006e76:	47d0      	blx	sl
 8006e78:	3001      	adds	r0, #1
 8006e7a:	d09d      	beq.n	8006db8 <_printf_i+0x15c>
 8006e7c:	3501      	adds	r5, #1
 8006e7e:	68e3      	ldr	r3, [r4, #12]
 8006e80:	9903      	ldr	r1, [sp, #12]
 8006e82:	1a5b      	subs	r3, r3, r1
 8006e84:	42ab      	cmp	r3, r5
 8006e86:	dcf2      	bgt.n	8006e6e <_printf_i+0x212>
 8006e88:	e7eb      	b.n	8006e62 <_printf_i+0x206>
 8006e8a:	2500      	movs	r5, #0
 8006e8c:	f104 0619 	add.w	r6, r4, #25
 8006e90:	e7f5      	b.n	8006e7e <_printf_i+0x222>
 8006e92:	bf00      	nop
 8006e94:	08007359 	.word	0x08007359
 8006e98:	0800736a 	.word	0x0800736a

08006e9c <__sflush_r>:
 8006e9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ea4:	0716      	lsls	r6, r2, #28
 8006ea6:	4605      	mov	r5, r0
 8006ea8:	460c      	mov	r4, r1
 8006eaa:	d454      	bmi.n	8006f56 <__sflush_r+0xba>
 8006eac:	684b      	ldr	r3, [r1, #4]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	dc02      	bgt.n	8006eb8 <__sflush_r+0x1c>
 8006eb2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	dd48      	ble.n	8006f4a <__sflush_r+0xae>
 8006eb8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006eba:	2e00      	cmp	r6, #0
 8006ebc:	d045      	beq.n	8006f4a <__sflush_r+0xae>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006ec4:	682f      	ldr	r7, [r5, #0]
 8006ec6:	6a21      	ldr	r1, [r4, #32]
 8006ec8:	602b      	str	r3, [r5, #0]
 8006eca:	d030      	beq.n	8006f2e <__sflush_r+0x92>
 8006ecc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006ece:	89a3      	ldrh	r3, [r4, #12]
 8006ed0:	0759      	lsls	r1, r3, #29
 8006ed2:	d505      	bpl.n	8006ee0 <__sflush_r+0x44>
 8006ed4:	6863      	ldr	r3, [r4, #4]
 8006ed6:	1ad2      	subs	r2, r2, r3
 8006ed8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006eda:	b10b      	cbz	r3, 8006ee0 <__sflush_r+0x44>
 8006edc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006ede:	1ad2      	subs	r2, r2, r3
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ee4:	6a21      	ldr	r1, [r4, #32]
 8006ee6:	4628      	mov	r0, r5
 8006ee8:	47b0      	blx	r6
 8006eea:	1c43      	adds	r3, r0, #1
 8006eec:	89a3      	ldrh	r3, [r4, #12]
 8006eee:	d106      	bne.n	8006efe <__sflush_r+0x62>
 8006ef0:	6829      	ldr	r1, [r5, #0]
 8006ef2:	291d      	cmp	r1, #29
 8006ef4:	d82b      	bhi.n	8006f4e <__sflush_r+0xb2>
 8006ef6:	4a2a      	ldr	r2, [pc, #168]	@ (8006fa0 <__sflush_r+0x104>)
 8006ef8:	410a      	asrs	r2, r1
 8006efa:	07d6      	lsls	r6, r2, #31
 8006efc:	d427      	bmi.n	8006f4e <__sflush_r+0xb2>
 8006efe:	2200      	movs	r2, #0
 8006f00:	6062      	str	r2, [r4, #4]
 8006f02:	04d9      	lsls	r1, r3, #19
 8006f04:	6922      	ldr	r2, [r4, #16]
 8006f06:	6022      	str	r2, [r4, #0]
 8006f08:	d504      	bpl.n	8006f14 <__sflush_r+0x78>
 8006f0a:	1c42      	adds	r2, r0, #1
 8006f0c:	d101      	bne.n	8006f12 <__sflush_r+0x76>
 8006f0e:	682b      	ldr	r3, [r5, #0]
 8006f10:	b903      	cbnz	r3, 8006f14 <__sflush_r+0x78>
 8006f12:	6560      	str	r0, [r4, #84]	@ 0x54
 8006f14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f16:	602f      	str	r7, [r5, #0]
 8006f18:	b1b9      	cbz	r1, 8006f4a <__sflush_r+0xae>
 8006f1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f1e:	4299      	cmp	r1, r3
 8006f20:	d002      	beq.n	8006f28 <__sflush_r+0x8c>
 8006f22:	4628      	mov	r0, r5
 8006f24:	f7ff fca0 	bl	8006868 <_free_r>
 8006f28:	2300      	movs	r3, #0
 8006f2a:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f2c:	e00d      	b.n	8006f4a <__sflush_r+0xae>
 8006f2e:	2301      	movs	r3, #1
 8006f30:	4628      	mov	r0, r5
 8006f32:	47b0      	blx	r6
 8006f34:	4602      	mov	r2, r0
 8006f36:	1c50      	adds	r0, r2, #1
 8006f38:	d1c9      	bne.n	8006ece <__sflush_r+0x32>
 8006f3a:	682b      	ldr	r3, [r5, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d0c6      	beq.n	8006ece <__sflush_r+0x32>
 8006f40:	2b1d      	cmp	r3, #29
 8006f42:	d001      	beq.n	8006f48 <__sflush_r+0xac>
 8006f44:	2b16      	cmp	r3, #22
 8006f46:	d11e      	bne.n	8006f86 <__sflush_r+0xea>
 8006f48:	602f      	str	r7, [r5, #0]
 8006f4a:	2000      	movs	r0, #0
 8006f4c:	e022      	b.n	8006f94 <__sflush_r+0xf8>
 8006f4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f52:	b21b      	sxth	r3, r3
 8006f54:	e01b      	b.n	8006f8e <__sflush_r+0xf2>
 8006f56:	690f      	ldr	r7, [r1, #16]
 8006f58:	2f00      	cmp	r7, #0
 8006f5a:	d0f6      	beq.n	8006f4a <__sflush_r+0xae>
 8006f5c:	0793      	lsls	r3, r2, #30
 8006f5e:	680e      	ldr	r6, [r1, #0]
 8006f60:	bf08      	it	eq
 8006f62:	694b      	ldreq	r3, [r1, #20]
 8006f64:	600f      	str	r7, [r1, #0]
 8006f66:	bf18      	it	ne
 8006f68:	2300      	movne	r3, #0
 8006f6a:	eba6 0807 	sub.w	r8, r6, r7
 8006f6e:	608b      	str	r3, [r1, #8]
 8006f70:	f1b8 0f00 	cmp.w	r8, #0
 8006f74:	dde9      	ble.n	8006f4a <__sflush_r+0xae>
 8006f76:	6a21      	ldr	r1, [r4, #32]
 8006f78:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006f7a:	4643      	mov	r3, r8
 8006f7c:	463a      	mov	r2, r7
 8006f7e:	4628      	mov	r0, r5
 8006f80:	47b0      	blx	r6
 8006f82:	2800      	cmp	r0, #0
 8006f84:	dc08      	bgt.n	8006f98 <__sflush_r+0xfc>
 8006f86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f8e:	81a3      	strh	r3, [r4, #12]
 8006f90:	f04f 30ff 	mov.w	r0, #4294967295
 8006f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f98:	4407      	add	r7, r0
 8006f9a:	eba8 0800 	sub.w	r8, r8, r0
 8006f9e:	e7e7      	b.n	8006f70 <__sflush_r+0xd4>
 8006fa0:	dfbffffe 	.word	0xdfbffffe

08006fa4 <_fflush_r>:
 8006fa4:	b538      	push	{r3, r4, r5, lr}
 8006fa6:	690b      	ldr	r3, [r1, #16]
 8006fa8:	4605      	mov	r5, r0
 8006faa:	460c      	mov	r4, r1
 8006fac:	b913      	cbnz	r3, 8006fb4 <_fflush_r+0x10>
 8006fae:	2500      	movs	r5, #0
 8006fb0:	4628      	mov	r0, r5
 8006fb2:	bd38      	pop	{r3, r4, r5, pc}
 8006fb4:	b118      	cbz	r0, 8006fbe <_fflush_r+0x1a>
 8006fb6:	6a03      	ldr	r3, [r0, #32]
 8006fb8:	b90b      	cbnz	r3, 8006fbe <_fflush_r+0x1a>
 8006fba:	f7ff fb39 	bl	8006630 <__sinit>
 8006fbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d0f3      	beq.n	8006fae <_fflush_r+0xa>
 8006fc6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006fc8:	07d0      	lsls	r0, r2, #31
 8006fca:	d404      	bmi.n	8006fd6 <_fflush_r+0x32>
 8006fcc:	0599      	lsls	r1, r3, #22
 8006fce:	d402      	bmi.n	8006fd6 <_fflush_r+0x32>
 8006fd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006fd2:	f7fa fe37 	bl	8001c44 <__retarget_lock_acquire_recursive>
 8006fd6:	4628      	mov	r0, r5
 8006fd8:	4621      	mov	r1, r4
 8006fda:	f7ff ff5f 	bl	8006e9c <__sflush_r>
 8006fde:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006fe0:	07da      	lsls	r2, r3, #31
 8006fe2:	4605      	mov	r5, r0
 8006fe4:	d4e4      	bmi.n	8006fb0 <_fflush_r+0xc>
 8006fe6:	89a3      	ldrh	r3, [r4, #12]
 8006fe8:	059b      	lsls	r3, r3, #22
 8006fea:	d4e1      	bmi.n	8006fb0 <_fflush_r+0xc>
 8006fec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006fee:	f7fa fe3e 	bl	8001c6e <__retarget_lock_release_recursive>
 8006ff2:	e7dd      	b.n	8006fb0 <_fflush_r+0xc>

08006ff4 <_putc_r>:
 8006ff4:	b570      	push	{r4, r5, r6, lr}
 8006ff6:	460d      	mov	r5, r1
 8006ff8:	4614      	mov	r4, r2
 8006ffa:	4606      	mov	r6, r0
 8006ffc:	b118      	cbz	r0, 8007006 <_putc_r+0x12>
 8006ffe:	6a03      	ldr	r3, [r0, #32]
 8007000:	b90b      	cbnz	r3, 8007006 <_putc_r+0x12>
 8007002:	f7ff fb15 	bl	8006630 <__sinit>
 8007006:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007008:	07d8      	lsls	r0, r3, #31
 800700a:	d405      	bmi.n	8007018 <_putc_r+0x24>
 800700c:	89a3      	ldrh	r3, [r4, #12]
 800700e:	0599      	lsls	r1, r3, #22
 8007010:	d402      	bmi.n	8007018 <_putc_r+0x24>
 8007012:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007014:	f7fa fe16 	bl	8001c44 <__retarget_lock_acquire_recursive>
 8007018:	68a3      	ldr	r3, [r4, #8]
 800701a:	3b01      	subs	r3, #1
 800701c:	2b00      	cmp	r3, #0
 800701e:	60a3      	str	r3, [r4, #8]
 8007020:	da05      	bge.n	800702e <_putc_r+0x3a>
 8007022:	69a2      	ldr	r2, [r4, #24]
 8007024:	4293      	cmp	r3, r2
 8007026:	db12      	blt.n	800704e <_putc_r+0x5a>
 8007028:	b2eb      	uxtb	r3, r5
 800702a:	2b0a      	cmp	r3, #10
 800702c:	d00f      	beq.n	800704e <_putc_r+0x5a>
 800702e:	6823      	ldr	r3, [r4, #0]
 8007030:	1c5a      	adds	r2, r3, #1
 8007032:	6022      	str	r2, [r4, #0]
 8007034:	701d      	strb	r5, [r3, #0]
 8007036:	b2ed      	uxtb	r5, r5
 8007038:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800703a:	07da      	lsls	r2, r3, #31
 800703c:	d405      	bmi.n	800704a <_putc_r+0x56>
 800703e:	89a3      	ldrh	r3, [r4, #12]
 8007040:	059b      	lsls	r3, r3, #22
 8007042:	d402      	bmi.n	800704a <_putc_r+0x56>
 8007044:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007046:	f7fa fe12 	bl	8001c6e <__retarget_lock_release_recursive>
 800704a:	4628      	mov	r0, r5
 800704c:	bd70      	pop	{r4, r5, r6, pc}
 800704e:	4629      	mov	r1, r5
 8007050:	4622      	mov	r2, r4
 8007052:	4630      	mov	r0, r6
 8007054:	f000 f802 	bl	800705c <__swbuf_r>
 8007058:	4605      	mov	r5, r0
 800705a:	e7ed      	b.n	8007038 <_putc_r+0x44>

0800705c <__swbuf_r>:
 800705c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800705e:	460e      	mov	r6, r1
 8007060:	4614      	mov	r4, r2
 8007062:	4605      	mov	r5, r0
 8007064:	b118      	cbz	r0, 800706e <__swbuf_r+0x12>
 8007066:	6a03      	ldr	r3, [r0, #32]
 8007068:	b90b      	cbnz	r3, 800706e <__swbuf_r+0x12>
 800706a:	f7ff fae1 	bl	8006630 <__sinit>
 800706e:	69a3      	ldr	r3, [r4, #24]
 8007070:	60a3      	str	r3, [r4, #8]
 8007072:	89a3      	ldrh	r3, [r4, #12]
 8007074:	071a      	lsls	r2, r3, #28
 8007076:	d501      	bpl.n	800707c <__swbuf_r+0x20>
 8007078:	6923      	ldr	r3, [r4, #16]
 800707a:	b943      	cbnz	r3, 800708e <__swbuf_r+0x32>
 800707c:	4621      	mov	r1, r4
 800707e:	4628      	mov	r0, r5
 8007080:	f000 f82a 	bl	80070d8 <__swsetup_r>
 8007084:	b118      	cbz	r0, 800708e <__swbuf_r+0x32>
 8007086:	f04f 37ff 	mov.w	r7, #4294967295
 800708a:	4638      	mov	r0, r7
 800708c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800708e:	6823      	ldr	r3, [r4, #0]
 8007090:	6922      	ldr	r2, [r4, #16]
 8007092:	1a98      	subs	r0, r3, r2
 8007094:	6963      	ldr	r3, [r4, #20]
 8007096:	b2f6      	uxtb	r6, r6
 8007098:	4283      	cmp	r3, r0
 800709a:	4637      	mov	r7, r6
 800709c:	dc05      	bgt.n	80070aa <__swbuf_r+0x4e>
 800709e:	4621      	mov	r1, r4
 80070a0:	4628      	mov	r0, r5
 80070a2:	f7ff ff7f 	bl	8006fa4 <_fflush_r>
 80070a6:	2800      	cmp	r0, #0
 80070a8:	d1ed      	bne.n	8007086 <__swbuf_r+0x2a>
 80070aa:	68a3      	ldr	r3, [r4, #8]
 80070ac:	3b01      	subs	r3, #1
 80070ae:	60a3      	str	r3, [r4, #8]
 80070b0:	6823      	ldr	r3, [r4, #0]
 80070b2:	1c5a      	adds	r2, r3, #1
 80070b4:	6022      	str	r2, [r4, #0]
 80070b6:	701e      	strb	r6, [r3, #0]
 80070b8:	6962      	ldr	r2, [r4, #20]
 80070ba:	1c43      	adds	r3, r0, #1
 80070bc:	429a      	cmp	r2, r3
 80070be:	d004      	beq.n	80070ca <__swbuf_r+0x6e>
 80070c0:	89a3      	ldrh	r3, [r4, #12]
 80070c2:	07db      	lsls	r3, r3, #31
 80070c4:	d5e1      	bpl.n	800708a <__swbuf_r+0x2e>
 80070c6:	2e0a      	cmp	r6, #10
 80070c8:	d1df      	bne.n	800708a <__swbuf_r+0x2e>
 80070ca:	4621      	mov	r1, r4
 80070cc:	4628      	mov	r0, r5
 80070ce:	f7ff ff69 	bl	8006fa4 <_fflush_r>
 80070d2:	2800      	cmp	r0, #0
 80070d4:	d0d9      	beq.n	800708a <__swbuf_r+0x2e>
 80070d6:	e7d6      	b.n	8007086 <__swbuf_r+0x2a>

080070d8 <__swsetup_r>:
 80070d8:	b538      	push	{r3, r4, r5, lr}
 80070da:	4b29      	ldr	r3, [pc, #164]	@ (8007180 <__swsetup_r+0xa8>)
 80070dc:	4605      	mov	r5, r0
 80070de:	6818      	ldr	r0, [r3, #0]
 80070e0:	460c      	mov	r4, r1
 80070e2:	b118      	cbz	r0, 80070ec <__swsetup_r+0x14>
 80070e4:	6a03      	ldr	r3, [r0, #32]
 80070e6:	b90b      	cbnz	r3, 80070ec <__swsetup_r+0x14>
 80070e8:	f7ff faa2 	bl	8006630 <__sinit>
 80070ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070f0:	0719      	lsls	r1, r3, #28
 80070f2:	d422      	bmi.n	800713a <__swsetup_r+0x62>
 80070f4:	06da      	lsls	r2, r3, #27
 80070f6:	d407      	bmi.n	8007108 <__swsetup_r+0x30>
 80070f8:	2209      	movs	r2, #9
 80070fa:	602a      	str	r2, [r5, #0]
 80070fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007100:	81a3      	strh	r3, [r4, #12]
 8007102:	f04f 30ff 	mov.w	r0, #4294967295
 8007106:	e033      	b.n	8007170 <__swsetup_r+0x98>
 8007108:	0758      	lsls	r0, r3, #29
 800710a:	d512      	bpl.n	8007132 <__swsetup_r+0x5a>
 800710c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800710e:	b141      	cbz	r1, 8007122 <__swsetup_r+0x4a>
 8007110:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007114:	4299      	cmp	r1, r3
 8007116:	d002      	beq.n	800711e <__swsetup_r+0x46>
 8007118:	4628      	mov	r0, r5
 800711a:	f7ff fba5 	bl	8006868 <_free_r>
 800711e:	2300      	movs	r3, #0
 8007120:	6363      	str	r3, [r4, #52]	@ 0x34
 8007122:	89a3      	ldrh	r3, [r4, #12]
 8007124:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007128:	81a3      	strh	r3, [r4, #12]
 800712a:	2300      	movs	r3, #0
 800712c:	6063      	str	r3, [r4, #4]
 800712e:	6923      	ldr	r3, [r4, #16]
 8007130:	6023      	str	r3, [r4, #0]
 8007132:	89a3      	ldrh	r3, [r4, #12]
 8007134:	f043 0308 	orr.w	r3, r3, #8
 8007138:	81a3      	strh	r3, [r4, #12]
 800713a:	6923      	ldr	r3, [r4, #16]
 800713c:	b94b      	cbnz	r3, 8007152 <__swsetup_r+0x7a>
 800713e:	89a3      	ldrh	r3, [r4, #12]
 8007140:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007144:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007148:	d003      	beq.n	8007152 <__swsetup_r+0x7a>
 800714a:	4621      	mov	r1, r4
 800714c:	4628      	mov	r0, r5
 800714e:	f000 f83f 	bl	80071d0 <__smakebuf_r>
 8007152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007156:	f013 0201 	ands.w	r2, r3, #1
 800715a:	d00a      	beq.n	8007172 <__swsetup_r+0x9a>
 800715c:	2200      	movs	r2, #0
 800715e:	60a2      	str	r2, [r4, #8]
 8007160:	6962      	ldr	r2, [r4, #20]
 8007162:	4252      	negs	r2, r2
 8007164:	61a2      	str	r2, [r4, #24]
 8007166:	6922      	ldr	r2, [r4, #16]
 8007168:	b942      	cbnz	r2, 800717c <__swsetup_r+0xa4>
 800716a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800716e:	d1c5      	bne.n	80070fc <__swsetup_r+0x24>
 8007170:	bd38      	pop	{r3, r4, r5, pc}
 8007172:	0799      	lsls	r1, r3, #30
 8007174:	bf58      	it	pl
 8007176:	6962      	ldrpl	r2, [r4, #20]
 8007178:	60a2      	str	r2, [r4, #8]
 800717a:	e7f4      	b.n	8007166 <__swsetup_r+0x8e>
 800717c:	2000      	movs	r0, #0
 800717e:	e7f7      	b.n	8007170 <__swsetup_r+0x98>
 8007180:	20000018 	.word	0x20000018

08007184 <__swhatbuf_r>:
 8007184:	b570      	push	{r4, r5, r6, lr}
 8007186:	460c      	mov	r4, r1
 8007188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800718c:	2900      	cmp	r1, #0
 800718e:	b096      	sub	sp, #88	@ 0x58
 8007190:	4615      	mov	r5, r2
 8007192:	461e      	mov	r6, r3
 8007194:	da0d      	bge.n	80071b2 <__swhatbuf_r+0x2e>
 8007196:	89a3      	ldrh	r3, [r4, #12]
 8007198:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800719c:	f04f 0100 	mov.w	r1, #0
 80071a0:	bf14      	ite	ne
 80071a2:	2340      	movne	r3, #64	@ 0x40
 80071a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80071a8:	2000      	movs	r0, #0
 80071aa:	6031      	str	r1, [r6, #0]
 80071ac:	602b      	str	r3, [r5, #0]
 80071ae:	b016      	add	sp, #88	@ 0x58
 80071b0:	bd70      	pop	{r4, r5, r6, pc}
 80071b2:	466a      	mov	r2, sp
 80071b4:	f000 f848 	bl	8007248 <_fstat_r>
 80071b8:	2800      	cmp	r0, #0
 80071ba:	dbec      	blt.n	8007196 <__swhatbuf_r+0x12>
 80071bc:	9901      	ldr	r1, [sp, #4]
 80071be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80071c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80071c6:	4259      	negs	r1, r3
 80071c8:	4159      	adcs	r1, r3
 80071ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80071ce:	e7eb      	b.n	80071a8 <__swhatbuf_r+0x24>

080071d0 <__smakebuf_r>:
 80071d0:	898b      	ldrh	r3, [r1, #12]
 80071d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071d4:	079d      	lsls	r5, r3, #30
 80071d6:	4606      	mov	r6, r0
 80071d8:	460c      	mov	r4, r1
 80071da:	d507      	bpl.n	80071ec <__smakebuf_r+0x1c>
 80071dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80071e0:	6023      	str	r3, [r4, #0]
 80071e2:	6123      	str	r3, [r4, #16]
 80071e4:	2301      	movs	r3, #1
 80071e6:	6163      	str	r3, [r4, #20]
 80071e8:	b003      	add	sp, #12
 80071ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071ec:	ab01      	add	r3, sp, #4
 80071ee:	466a      	mov	r2, sp
 80071f0:	f7ff ffc8 	bl	8007184 <__swhatbuf_r>
 80071f4:	9f00      	ldr	r7, [sp, #0]
 80071f6:	4605      	mov	r5, r0
 80071f8:	4639      	mov	r1, r7
 80071fa:	4630      	mov	r0, r6
 80071fc:	f7ff f900 	bl	8006400 <_malloc_r>
 8007200:	b948      	cbnz	r0, 8007216 <__smakebuf_r+0x46>
 8007202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007206:	059a      	lsls	r2, r3, #22
 8007208:	d4ee      	bmi.n	80071e8 <__smakebuf_r+0x18>
 800720a:	f023 0303 	bic.w	r3, r3, #3
 800720e:	f043 0302 	orr.w	r3, r3, #2
 8007212:	81a3      	strh	r3, [r4, #12]
 8007214:	e7e2      	b.n	80071dc <__smakebuf_r+0xc>
 8007216:	89a3      	ldrh	r3, [r4, #12]
 8007218:	6020      	str	r0, [r4, #0]
 800721a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800721e:	81a3      	strh	r3, [r4, #12]
 8007220:	9b01      	ldr	r3, [sp, #4]
 8007222:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007226:	b15b      	cbz	r3, 8007240 <__smakebuf_r+0x70>
 8007228:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800722c:	4630      	mov	r0, r6
 800722e:	f000 f81d 	bl	800726c <_isatty_r>
 8007232:	b128      	cbz	r0, 8007240 <__smakebuf_r+0x70>
 8007234:	89a3      	ldrh	r3, [r4, #12]
 8007236:	f023 0303 	bic.w	r3, r3, #3
 800723a:	f043 0301 	orr.w	r3, r3, #1
 800723e:	81a3      	strh	r3, [r4, #12]
 8007240:	89a3      	ldrh	r3, [r4, #12]
 8007242:	431d      	orrs	r5, r3
 8007244:	81a5      	strh	r5, [r4, #12]
 8007246:	e7cf      	b.n	80071e8 <__smakebuf_r+0x18>

08007248 <_fstat_r>:
 8007248:	b538      	push	{r3, r4, r5, lr}
 800724a:	4d07      	ldr	r5, [pc, #28]	@ (8007268 <_fstat_r+0x20>)
 800724c:	2300      	movs	r3, #0
 800724e:	4604      	mov	r4, r0
 8007250:	4608      	mov	r0, r1
 8007252:	4611      	mov	r1, r2
 8007254:	602b      	str	r3, [r5, #0]
 8007256:	f7f9 ffec 	bl	8001232 <_fstat>
 800725a:	1c43      	adds	r3, r0, #1
 800725c:	d102      	bne.n	8007264 <_fstat_r+0x1c>
 800725e:	682b      	ldr	r3, [r5, #0]
 8007260:	b103      	cbz	r3, 8007264 <_fstat_r+0x1c>
 8007262:	6023      	str	r3, [r4, #0]
 8007264:	bd38      	pop	{r3, r4, r5, pc}
 8007266:	bf00      	nop
 8007268:	200006a4 	.word	0x200006a4

0800726c <_isatty_r>:
 800726c:	b538      	push	{r3, r4, r5, lr}
 800726e:	4d06      	ldr	r5, [pc, #24]	@ (8007288 <_isatty_r+0x1c>)
 8007270:	2300      	movs	r3, #0
 8007272:	4604      	mov	r4, r0
 8007274:	4608      	mov	r0, r1
 8007276:	602b      	str	r3, [r5, #0]
 8007278:	f7f9 ffeb 	bl	8001252 <_isatty>
 800727c:	1c43      	adds	r3, r0, #1
 800727e:	d102      	bne.n	8007286 <_isatty_r+0x1a>
 8007280:	682b      	ldr	r3, [r5, #0]
 8007282:	b103      	cbz	r3, 8007286 <_isatty_r+0x1a>
 8007284:	6023      	str	r3, [r4, #0]
 8007286:	bd38      	pop	{r3, r4, r5, pc}
 8007288:	200006a4 	.word	0x200006a4

0800728c <_init>:
 800728c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800728e:	bf00      	nop
 8007290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007292:	bc08      	pop	{r3}
 8007294:	469e      	mov	lr, r3
 8007296:	4770      	bx	lr

08007298 <_fini>:
 8007298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800729a:	bf00      	nop
 800729c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800729e:	bc08      	pop	{r3}
 80072a0:	469e      	mov	lr, r3
 80072a2:	4770      	bx	lr
