
Copyrat_IEEE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c34  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08006dc4  08006dc4  00007dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e9c  08006e9c  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006e9c  08006e9c  00007e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ea4  08006ea4  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ea4  08006ea4  00007ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ea8  08006ea8  00007ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006eac  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008068  2**0
                  CONTENTS
 10 .bss          00000640  20000068  20000068  00008068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200006a8  200006a8  00008068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 13 .debug_info   000198e2  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000407f  00000000  00000000  0002197a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001768  00000000  00000000  00025a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001232  00000000  00000000  00027168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024586  00000000  00000000  0002839a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f0c1  00000000  00000000  0004c920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dcdb6  00000000  00000000  0006b9e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00148797  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006818  00000000  00000000  001487dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0014eff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006dac 	.word	0x08006dac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006dac 	.word	0x08006dac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000566:	463b      	mov	r3, r7
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000572:	4b3d      	ldr	r3, [pc, #244]	@ (8000668 <MX_ADC1_Init+0x108>)
 8000574:	4a3d      	ldr	r2, [pc, #244]	@ (800066c <MX_ADC1_Init+0x10c>)
 8000576:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000578:	4b3b      	ldr	r3, [pc, #236]	@ (8000668 <MX_ADC1_Init+0x108>)
 800057a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800057e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000580:	4b39      	ldr	r3, [pc, #228]	@ (8000668 <MX_ADC1_Init+0x108>)
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000586:	4b38      	ldr	r3, [pc, #224]	@ (8000668 <MX_ADC1_Init+0x108>)
 8000588:	2201      	movs	r2, #1
 800058a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800058c:	4b36      	ldr	r3, [pc, #216]	@ (8000668 <MX_ADC1_Init+0x108>)
 800058e:	2201      	movs	r2, #1
 8000590:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000592:	4b35      	ldr	r3, [pc, #212]	@ (8000668 <MX_ADC1_Init+0x108>)
 8000594:	2200      	movs	r2, #0
 8000596:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800059a:	4b33      	ldr	r3, [pc, #204]	@ (8000668 <MX_ADC1_Init+0x108>)
 800059c:	2200      	movs	r2, #0
 800059e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005a0:	4b31      	ldr	r3, [pc, #196]	@ (8000668 <MX_ADC1_Init+0x108>)
 80005a2:	4a33      	ldr	r2, [pc, #204]	@ (8000670 <MX_ADC1_Init+0x110>)
 80005a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005a6:	4b30      	ldr	r3, [pc, #192]	@ (8000668 <MX_ADC1_Init+0x108>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80005ac:	4b2e      	ldr	r3, [pc, #184]	@ (8000668 <MX_ADC1_Init+0x108>)
 80005ae:	2205      	movs	r2, #5
 80005b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005b2:	4b2d      	ldr	r3, [pc, #180]	@ (8000668 <MX_ADC1_Init+0x108>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ba:	4b2b      	ldr	r3, [pc, #172]	@ (8000668 <MX_ADC1_Init+0x108>)
 80005bc:	2201      	movs	r2, #1
 80005be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005c0:	4829      	ldr	r0, [pc, #164]	@ (8000668 <MX_ADC1_Init+0x108>)
 80005c2:	f001 fd0d 	bl	8001fe0 <HAL_ADC_Init>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005cc:	f000 fbc4 	bl	8000d58 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005d4:	2301      	movs	r3, #1
 80005d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005dc:	463b      	mov	r3, r7
 80005de:	4619      	mov	r1, r3
 80005e0:	4821      	ldr	r0, [pc, #132]	@ (8000668 <MX_ADC1_Init+0x108>)
 80005e2:	f001 fd41 	bl	8002068 <HAL_ADC_ConfigChannel>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005ec:	f000 fbb4 	bl	8000d58 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005f0:	2301      	movs	r3, #1
 80005f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f8:	463b      	mov	r3, r7
 80005fa:	4619      	mov	r1, r3
 80005fc:	481a      	ldr	r0, [pc, #104]	@ (8000668 <MX_ADC1_Init+0x108>)
 80005fe:	f001 fd33 	bl	8002068 <HAL_ADC_ConfigChannel>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000608:	f000 fba6 	bl	8000d58 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800060c:	2304      	movs	r3, #4
 800060e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000610:	2303      	movs	r3, #3
 8000612:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000614:	463b      	mov	r3, r7
 8000616:	4619      	mov	r1, r3
 8000618:	4813      	ldr	r0, [pc, #76]	@ (8000668 <MX_ADC1_Init+0x108>)
 800061a:	f001 fd25 	bl	8002068 <HAL_ADC_ConfigChannel>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000624:	f000 fb98 	bl	8000d58 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000628:	2305      	movs	r3, #5
 800062a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800062c:	2304      	movs	r3, #4
 800062e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000630:	463b      	mov	r3, r7
 8000632:	4619      	mov	r1, r3
 8000634:	480c      	ldr	r0, [pc, #48]	@ (8000668 <MX_ADC1_Init+0x108>)
 8000636:	f001 fd17 	bl	8002068 <HAL_ADC_ConfigChannel>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000640:	f000 fb8a 	bl	8000d58 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000644:	2307      	movs	r3, #7
 8000646:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000648:	2305      	movs	r3, #5
 800064a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800064c:	463b      	mov	r3, r7
 800064e:	4619      	mov	r1, r3
 8000650:	4805      	ldr	r0, [pc, #20]	@ (8000668 <MX_ADC1_Init+0x108>)
 8000652:	f001 fd09 	bl	8002068 <HAL_ADC_ConfigChannel>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800065c:	f000 fb7c 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000660:	bf00      	nop
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000084 	.word	0x20000084
 800066c:	40012000 	.word	0x40012000
 8000670:	0f000001 	.word	0x0f000001

08000674 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08a      	sub	sp, #40	@ 0x28
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a2f      	ldr	r2, [pc, #188]	@ (8000750 <HAL_ADC_MspInit+0xdc>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d157      	bne.n	8000746 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	613b      	str	r3, [r7, #16]
 800069a:	4b2e      	ldr	r3, [pc, #184]	@ (8000754 <HAL_ADC_MspInit+0xe0>)
 800069c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800069e:	4a2d      	ldr	r2, [pc, #180]	@ (8000754 <HAL_ADC_MspInit+0xe0>)
 80006a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80006a6:	4b2b      	ldr	r3, [pc, #172]	@ (8000754 <HAL_ADC_MspInit+0xe0>)
 80006a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006ae:	613b      	str	r3, [r7, #16]
 80006b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	4b27      	ldr	r3, [pc, #156]	@ (8000754 <HAL_ADC_MspInit+0xe0>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	4a26      	ldr	r2, [pc, #152]	@ (8000754 <HAL_ADC_MspInit+0xe0>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c2:	4b24      	ldr	r3, [pc, #144]	@ (8000754 <HAL_ADC_MspInit+0xe0>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80006ce:	23b3      	movs	r3, #179	@ 0xb3
 80006d0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d2:	2303      	movs	r3, #3
 80006d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4619      	mov	r1, r3
 80006e0:	481d      	ldr	r0, [pc, #116]	@ (8000758 <HAL_ADC_MspInit+0xe4>)
 80006e2:	f002 faab 	bl	8002c3c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80006e6:	4b1d      	ldr	r3, [pc, #116]	@ (800075c <HAL_ADC_MspInit+0xe8>)
 80006e8:	4a1d      	ldr	r2, [pc, #116]	@ (8000760 <HAL_ADC_MspInit+0xec>)
 80006ea:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006ec:	4b1b      	ldr	r3, [pc, #108]	@ (800075c <HAL_ADC_MspInit+0xe8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006f2:	4b1a      	ldr	r3, [pc, #104]	@ (800075c <HAL_ADC_MspInit+0xe8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006f8:	4b18      	ldr	r3, [pc, #96]	@ (800075c <HAL_ADC_MspInit+0xe8>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006fe:	4b17      	ldr	r3, [pc, #92]	@ (800075c <HAL_ADC_MspInit+0xe8>)
 8000700:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000704:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000706:	4b15      	ldr	r3, [pc, #84]	@ (800075c <HAL_ADC_MspInit+0xe8>)
 8000708:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800070c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800070e:	4b13      	ldr	r3, [pc, #76]	@ (800075c <HAL_ADC_MspInit+0xe8>)
 8000710:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000714:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000716:	4b11      	ldr	r3, [pc, #68]	@ (800075c <HAL_ADC_MspInit+0xe8>)
 8000718:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800071c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800071e:	4b0f      	ldr	r3, [pc, #60]	@ (800075c <HAL_ADC_MspInit+0xe8>)
 8000720:	2200      	movs	r2, #0
 8000722:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000724:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <HAL_ADC_MspInit+0xe8>)
 8000726:	2200      	movs	r2, #0
 8000728:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800072a:	480c      	ldr	r0, [pc, #48]	@ (800075c <HAL_ADC_MspInit+0xe8>)
 800072c:	f001 ff9c 	bl	8002668 <HAL_DMA_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000736:	f000 fb0f 	bl	8000d58 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4a07      	ldr	r2, [pc, #28]	@ (800075c <HAL_ADC_MspInit+0xe8>)
 800073e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000740:	4a06      	ldr	r2, [pc, #24]	@ (800075c <HAL_ADC_MspInit+0xe8>)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000746:	bf00      	nop
 8000748:	3728      	adds	r7, #40	@ 0x28
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40012000 	.word	0x40012000
 8000754:	40023800 	.word	0x40023800
 8000758:	40020000 	.word	0x40020000
 800075c:	200000cc 	.word	0x200000cc
 8000760:	40026410 	.word	0x40026410

08000764 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <MX_DMA_Init+0x3c>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a0b      	ldr	r2, [pc, #44]	@ (80007a0 <MX_DMA_Init+0x3c>)
 8000774:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_DMA_Init+0x3c>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	2105      	movs	r1, #5
 800078a:	2038      	movs	r0, #56	@ 0x38
 800078c:	f001 ff42 	bl	8002614 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000790:	2038      	movs	r0, #56	@ 0x38
 8000792:	f001 ff5b 	bl	800264c <HAL_NVIC_EnableIRQ>

}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800

080007a4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	@ 0x28
 80007a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
 80007be:	4b58      	ldr	r3, [pc, #352]	@ (8000920 <MX_GPIO_Init+0x17c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	4a57      	ldr	r2, [pc, #348]	@ (8000920 <MX_GPIO_Init+0x17c>)
 80007c4:	f043 0304 	orr.w	r3, r3, #4
 80007c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ca:	4b55      	ldr	r3, [pc, #340]	@ (8000920 <MX_GPIO_Init+0x17c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	f003 0304 	and.w	r3, r3, #4
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	4b51      	ldr	r3, [pc, #324]	@ (8000920 <MX_GPIO_Init+0x17c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	4a50      	ldr	r2, [pc, #320]	@ (8000920 <MX_GPIO_Init+0x17c>)
 80007e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e6:	4b4e      	ldr	r3, [pc, #312]	@ (8000920 <MX_GPIO_Init+0x17c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	4b4a      	ldr	r3, [pc, #296]	@ (8000920 <MX_GPIO_Init+0x17c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	4a49      	ldr	r2, [pc, #292]	@ (8000920 <MX_GPIO_Init+0x17c>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6313      	str	r3, [r2, #48]	@ 0x30
 8000802:	4b47      	ldr	r3, [pc, #284]	@ (8000920 <MX_GPIO_Init+0x17c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b43      	ldr	r3, [pc, #268]	@ (8000920 <MX_GPIO_Init+0x17c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a42      	ldr	r2, [pc, #264]	@ (8000920 <MX_GPIO_Init+0x17c>)
 8000818:	f043 0302 	orr.w	r3, r3, #2
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b40      	ldr	r3, [pc, #256]	@ (8000920 <MX_GPIO_Init+0x17c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0302 	and.w	r3, r3, #2
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	4b3c      	ldr	r3, [pc, #240]	@ (8000920 <MX_GPIO_Init+0x17c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a3b      	ldr	r2, [pc, #236]	@ (8000920 <MX_GPIO_Init+0x17c>)
 8000834:	f043 0308 	orr.w	r3, r3, #8
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b39      	ldr	r3, [pc, #228]	@ (8000920 <MX_GPIO_Init+0x17c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0308 	and.w	r3, r3, #8
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV8833_EN_GPIO_Port, DRV8833_EN_Pin, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2104      	movs	r1, #4
 800084a:	4836      	ldr	r0, [pc, #216]	@ (8000924 <MX_GPIO_Init+0x180>)
 800084c:	f002 fb92 	bl	8002f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_Pin|MPU6500_CS_Pin, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8000856:	4834      	ldr	r0, [pc, #208]	@ (8000928 <MX_GPIO_Init+0x184>)
 8000858:	f002 fb8c 	bl	8002f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC4 PC5 PC8
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 800085c:	f643 533f 	movw	r3, #15679	@ 0x3d3f
 8000860:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000862:	2303      	movs	r3, #3
 8000864:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	4619      	mov	r1, r3
 8000870:	482e      	ldr	r0, [pc, #184]	@ (800092c <MX_GPIO_Init+0x188>)
 8000872:	f002 f9e3 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRV8833_EN_Pin;
 8000876:	2304      	movs	r3, #4
 8000878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087a:	2301      	movs	r3, #1
 800087c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000882:	2302      	movs	r3, #2
 8000884:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV8833_EN_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	4619      	mov	r1, r3
 800088c:	4825      	ldr	r0, [pc, #148]	@ (8000924 <MX_GPIO_Init+0x180>)
 800088e:	f002 f9d5 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000892:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000898:	2303      	movs	r3, #3
 800089a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	4619      	mov	r1, r3
 80008a6:	481f      	ldr	r0, [pc, #124]	@ (8000924 <MX_GPIO_Init+0x180>)
 80008a8:	f002 f9c8 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_15;
 80008ac:	f44f 4302 	mov.w	r3, #33280	@ 0x8200
 80008b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008b2:	2303      	movs	r3, #3
 80008b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	4619      	mov	r1, r3
 80008c0:	4819      	ldr	r0, [pc, #100]	@ (8000928 <MX_GPIO_Init+0x184>)
 80008c2:	f002 f9bb 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|MPU6500_CS_Pin;
 80008c6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80008ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008cc:	2301      	movs	r3, #1
 80008ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	4619      	mov	r1, r3
 80008de:	4812      	ldr	r0, [pc, #72]	@ (8000928 <MX_GPIO_Init+0x184>)
 80008e0:	f002 f9ac 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DEBUG_BTN_Pin;
 80008e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DEBUG_BTN_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	480b      	ldr	r0, [pc, #44]	@ (8000928 <MX_GPIO_Init+0x184>)
 80008fa:	f002 f99f 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008fe:	2304      	movs	r3, #4
 8000900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000902:	2303      	movs	r3, #3
 8000904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	4807      	ldr	r0, [pc, #28]	@ (8000930 <MX_GPIO_Init+0x18c>)
 8000912:	f002 f993 	bl	8002c3c <HAL_GPIO_Init>

}
 8000916:	bf00      	nop
 8000918:	3728      	adds	r7, #40	@ 0x28
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800
 8000924:	40020400 	.word	0x40020400
 8000928:	40020000 	.word	0x40020000
 800092c:	40020800 	.word	0x40020800
 8000930:	40020c00 	.word	0x40020c00

08000934 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000938:	4b12      	ldr	r3, [pc, #72]	@ (8000984 <MX_I2C1_Init+0x50>)
 800093a:	4a13      	ldr	r2, [pc, #76]	@ (8000988 <MX_I2C1_Init+0x54>)
 800093c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800093e:	4b11      	ldr	r3, [pc, #68]	@ (8000984 <MX_I2C1_Init+0x50>)
 8000940:	4a12      	ldr	r2, [pc, #72]	@ (800098c <MX_I2C1_Init+0x58>)
 8000942:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000944:	4b0f      	ldr	r3, [pc, #60]	@ (8000984 <MX_I2C1_Init+0x50>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800094a:	4b0e      	ldr	r3, [pc, #56]	@ (8000984 <MX_I2C1_Init+0x50>)
 800094c:	2200      	movs	r2, #0
 800094e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000950:	4b0c      	ldr	r3, [pc, #48]	@ (8000984 <MX_I2C1_Init+0x50>)
 8000952:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000956:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000958:	4b0a      	ldr	r3, [pc, #40]	@ (8000984 <MX_I2C1_Init+0x50>)
 800095a:	2200      	movs	r2, #0
 800095c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800095e:	4b09      	ldr	r3, [pc, #36]	@ (8000984 <MX_I2C1_Init+0x50>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000964:	4b07      	ldr	r3, [pc, #28]	@ (8000984 <MX_I2C1_Init+0x50>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800096a:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <MX_I2C1_Init+0x50>)
 800096c:	2200      	movs	r2, #0
 800096e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000970:	4804      	ldr	r0, [pc, #16]	@ (8000984 <MX_I2C1_Init+0x50>)
 8000972:	f002 fb19 	bl	8002fa8 <HAL_I2C_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800097c:	f000 f9ec 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	2000012c 	.word	0x2000012c
 8000988:	40005400 	.word	0x40005400
 800098c:	000186a0 	.word	0x000186a0

08000990 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000994:	4b12      	ldr	r3, [pc, #72]	@ (80009e0 <MX_I2C2_Init+0x50>)
 8000996:	4a13      	ldr	r2, [pc, #76]	@ (80009e4 <MX_I2C2_Init+0x54>)
 8000998:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800099a:	4b11      	ldr	r3, [pc, #68]	@ (80009e0 <MX_I2C2_Init+0x50>)
 800099c:	4a12      	ldr	r2, [pc, #72]	@ (80009e8 <MX_I2C2_Init+0x58>)
 800099e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	@ (80009e0 <MX_I2C2_Init+0x50>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	@ (80009e0 <MX_I2C2_Init+0x50>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	@ (80009e0 <MX_I2C2_Init+0x50>)
 80009ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009b2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009b4:	4b0a      	ldr	r3, [pc, #40]	@ (80009e0 <MX_I2C2_Init+0x50>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80009ba:	4b09      	ldr	r3, [pc, #36]	@ (80009e0 <MX_I2C2_Init+0x50>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009c0:	4b07      	ldr	r3, [pc, #28]	@ (80009e0 <MX_I2C2_Init+0x50>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009c6:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <MX_I2C2_Init+0x50>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009cc:	4804      	ldr	r0, [pc, #16]	@ (80009e0 <MX_I2C2_Init+0x50>)
 80009ce:	f002 faeb 	bl	8002fa8 <HAL_I2C_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80009d8:	f000 f9be 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000180 	.word	0x20000180
 80009e4:	40005800 	.word	0x40005800
 80009e8:	000186a0 	.word	0x000186a0

080009ec <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80009f0:	4b12      	ldr	r3, [pc, #72]	@ (8000a3c <MX_I2C3_Init+0x50>)
 80009f2:	4a13      	ldr	r2, [pc, #76]	@ (8000a40 <MX_I2C3_Init+0x54>)
 80009f4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80009f6:	4b11      	ldr	r3, [pc, #68]	@ (8000a3c <MX_I2C3_Init+0x50>)
 80009f8:	4a12      	ldr	r2, [pc, #72]	@ (8000a44 <MX_I2C3_Init+0x58>)
 80009fa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a3c <MX_I2C3_Init+0x50>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	@ (8000a3c <MX_I2C3_Init+0x50>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	@ (8000a3c <MX_I2C3_Init+0x50>)
 8000a0a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a0e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a10:	4b0a      	ldr	r3, [pc, #40]	@ (8000a3c <MX_I2C3_Init+0x50>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000a16:	4b09      	ldr	r3, [pc, #36]	@ (8000a3c <MX_I2C3_Init+0x50>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a1c:	4b07      	ldr	r3, [pc, #28]	@ (8000a3c <MX_I2C3_Init+0x50>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a22:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <MX_I2C3_Init+0x50>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a28:	4804      	ldr	r0, [pc, #16]	@ (8000a3c <MX_I2C3_Init+0x50>)
 8000a2a:	f002 fabd 	bl	8002fa8 <HAL_I2C_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000a34:	f000 f990 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	200001d4 	.word	0x200001d4
 8000a40:	40005c00 	.word	0x40005c00
 8000a44:	000186a0 	.word	0x000186a0

08000a48 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08e      	sub	sp, #56	@ 0x38
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a5b      	ldr	r2, [pc, #364]	@ (8000bd4 <HAL_I2C_MspInit+0x18c>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d12c      	bne.n	8000ac4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	623b      	str	r3, [r7, #32]
 8000a6e:	4b5a      	ldr	r3, [pc, #360]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	4a59      	ldr	r2, [pc, #356]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000a74:	f043 0302 	orr.w	r3, r3, #2
 8000a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7a:	4b57      	ldr	r3, [pc, #348]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	f003 0302 	and.w	r3, r3, #2
 8000a82:	623b      	str	r3, [r7, #32]
 8000a84:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a86:	23c0      	movs	r3, #192	@ 0xc0
 8000a88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a8a:	2312      	movs	r3, #18
 8000a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a92:	2303      	movs	r3, #3
 8000a94:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a96:	2304      	movs	r3, #4
 8000a98:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	484e      	ldr	r0, [pc, #312]	@ (8000bdc <HAL_I2C_MspInit+0x194>)
 8000aa2:	f002 f8cb 	bl	8002c3c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
 8000aaa:	4b4b      	ldr	r3, [pc, #300]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aae:	4a4a      	ldr	r2, [pc, #296]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000ab0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ab4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ab6:	4b48      	ldr	r3, [pc, #288]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000abe:	61fb      	str	r3, [r7, #28]
 8000ac0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000ac2:	e083      	b.n	8000bcc <HAL_I2C_MspInit+0x184>
  else if(i2cHandle->Instance==I2C2)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a45      	ldr	r2, [pc, #276]	@ (8000be0 <HAL_I2C_MspInit+0x198>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d12d      	bne.n	8000b2a <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61bb      	str	r3, [r7, #24]
 8000ad2:	4b41      	ldr	r3, [pc, #260]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	4a40      	ldr	r2, [pc, #256]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000ad8:	f043 0302 	orr.w	r3, r3, #2
 8000adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ade:	4b3e      	ldr	r3, [pc, #248]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	f003 0302 	and.w	r3, r3, #2
 8000ae6:	61bb      	str	r3, [r7, #24]
 8000ae8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000aea:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000aee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000af0:	2312      	movs	r3, #18
 8000af2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af8:	2303      	movs	r3, #3
 8000afa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000afc:	2304      	movs	r3, #4
 8000afe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b04:	4619      	mov	r1, r3
 8000b06:	4835      	ldr	r0, [pc, #212]	@ (8000bdc <HAL_I2C_MspInit+0x194>)
 8000b08:	f002 f898 	bl	8002c3c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	4b31      	ldr	r3, [pc, #196]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b14:	4a30      	ldr	r2, [pc, #192]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000b16:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b1c:	4b2e      	ldr	r3, [pc, #184]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b24:	617b      	str	r3, [r7, #20]
 8000b26:	697b      	ldr	r3, [r7, #20]
}
 8000b28:	e050      	b.n	8000bcc <HAL_I2C_MspInit+0x184>
  else if(i2cHandle->Instance==I2C3)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a2d      	ldr	r2, [pc, #180]	@ (8000be4 <HAL_I2C_MspInit+0x19c>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d14b      	bne.n	8000bcc <HAL_I2C_MspInit+0x184>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b34:	2300      	movs	r3, #0
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	4b27      	ldr	r3, [pc, #156]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3c:	4a26      	ldr	r2, [pc, #152]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000b3e:	f043 0304 	orr.w	r3, r3, #4
 8000b42:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b44:	4b24      	ldr	r3, [pc, #144]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b48:	f003 0304 	and.w	r3, r3, #4
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	4b20      	ldr	r3, [pc, #128]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b58:	4a1f      	ldr	r2, [pc, #124]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000b5a:	f043 0301 	orr.w	r3, r3, #1
 8000b5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b60:	4b1d      	ldr	r3, [pc, #116]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b64:	f003 0301 	and.w	r3, r3, #1
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b72:	2312      	movs	r3, #18
 8000b74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b7e:	2304      	movs	r3, #4
 8000b80:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b86:	4619      	mov	r1, r3
 8000b88:	4817      	ldr	r0, [pc, #92]	@ (8000be8 <HAL_I2C_MspInit+0x1a0>)
 8000b8a:	f002 f857 	bl	8002c3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b94:	2312      	movs	r3, #18
 8000b96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ba0:	2304      	movs	r3, #4
 8000ba2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4810      	ldr	r0, [pc, #64]	@ (8000bec <HAL_I2C_MspInit+0x1a4>)
 8000bac:	f002 f846 	bl	8002c3c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	4b08      	ldr	r3, [pc, #32]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb8:	4a07      	ldr	r2, [pc, #28]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000bba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000bbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bc0:	4b05      	ldr	r3, [pc, #20]	@ (8000bd8 <HAL_I2C_MspInit+0x190>)
 8000bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	68bb      	ldr	r3, [r7, #8]
}
 8000bcc:	bf00      	nop
 8000bce:	3738      	adds	r7, #56	@ 0x38
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40005400 	.word	0x40005400
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40020400 	.word	0x40020400
 8000be0:	40005800 	.word	0x40005800
 8000be4:	40005c00 	.word	0x40005c00
 8000be8:	40020800 	.word	0x40020800
 8000bec:	40020000 	.word	0x40020000

08000bf0 <main>:
  * @retval int
  */


int main(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf6:	f001 f98d 	bl	8001f14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bfa:	f000 f831 	bl	8000c60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bfe:	f7ff fdd1 	bl	80007a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c02:	f7ff fdaf 	bl	8000764 <MX_DMA_Init>
  MX_ADC1_Init();
 8000c06:	f7ff fcab 	bl	8000560 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000c0a:	f7ff fe93 	bl	8000934 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000c0e:	f7ff febf 	bl	8000990 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000c12:	f7ff feeb 	bl	80009ec <MX_I2C3_Init>
  MX_SPI1_Init();
 8000c16:	f000 f8a5 	bl	8000d64 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000c1a:	f000 faab 	bl	8001174 <MX_TIM3_Init>
  MX_TIM10_Init();
 8000c1e:	f000 fb43 	bl	80012a8 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000c22:	f000 fb8f 	bl	8001344 <MX_TIM11_Init>
  MX_TIM12_Init();
 8000c26:	f000 fbdb 	bl	80013e0 <MX_TIM12_Init>
  MX_TIM13_Init();
 8000c2a:	f000 fc29 	bl	8001480 <MX_TIM13_Init>
  MX_USART2_UART_Init();
 8000c2e:	f000 fdf7 	bl	8001820 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  mpu6500_init();
 8000c32:	f001 f88d 	bl	8001d50 <mpu6500_init>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int16_t AccData[3] = {0,0,0} ;
 8000c36:	2300      	movs	r3, #0
 8000c38:	813b      	strh	r3, [r7, #8]
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	817b      	strh	r3, [r7, #10]
 8000c3e:	2300      	movs	r3, #0
 8000c40:	81bb      	strh	r3, [r7, #12]
  int16_t GyroData[3] = {0,0,0};
 8000c42:	2300      	movs	r3, #0
 8000c44:	803b      	strh	r3, [r7, #0]
 8000c46:	2300      	movs	r3, #0
 8000c48:	807b      	strh	r3, [r7, #2]
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	80bb      	strh	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	mpu6500_get_data(AccData, GyroData);
 8000c4e:	463a      	mov	r2, r7
 8000c50:	f107 0308 	add.w	r3, r7, #8
 8000c54:	4611      	mov	r1, r2
 8000c56:	4618      	mov	r0, r3
 8000c58:	f001 f904 	bl	8001e64 <mpu6500_get_data>
 8000c5c:	e7f7      	b.n	8000c4e <main+0x5e>
	...

08000c60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b094      	sub	sp, #80	@ 0x50
 8000c64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c66:	f107 0320 	add.w	r3, r7, #32
 8000c6a:	2230      	movs	r2, #48	@ 0x30
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f005 fb01 	bl	8006276 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c74:	f107 030c 	add.w	r3, r7, #12
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c84:	2300      	movs	r3, #0
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	4b28      	ldr	r3, [pc, #160]	@ (8000d2c <SystemClock_Config+0xcc>)
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c8c:	4a27      	ldr	r2, [pc, #156]	@ (8000d2c <SystemClock_Config+0xcc>)
 8000c8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c92:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c94:	4b25      	ldr	r3, [pc, #148]	@ (8000d2c <SystemClock_Config+0xcc>)
 8000c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	4b22      	ldr	r3, [pc, #136]	@ (8000d30 <SystemClock_Config+0xd0>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a21      	ldr	r2, [pc, #132]	@ (8000d30 <SystemClock_Config+0xd0>)
 8000caa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cae:	6013      	str	r3, [r2, #0]
 8000cb0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d30 <SystemClock_Config+0xd0>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cb8:	607b      	str	r3, [r7, #4]
 8000cba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cc4:	2310      	movs	r3, #16
 8000cc6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000cd0:	2308      	movs	r3, #8
 8000cd2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000cd4:	23a8      	movs	r3, #168	@ 0xa8
 8000cd6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cdc:	2304      	movs	r3, #4
 8000cde:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce0:	f107 0320 	add.w	r3, r7, #32
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f002 faa3 	bl	8003230 <HAL_RCC_OscConfig>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000cf0:	f000 f832 	bl	8000d58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf4:	230f      	movs	r3, #15
 8000cf6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d00:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d0a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d0c:	f107 030c 	add.w	r3, r7, #12
 8000d10:	2105      	movs	r1, #5
 8000d12:	4618      	mov	r0, r3
 8000d14:	f002 fd04 	bl	8003720 <HAL_RCC_ClockConfig>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d1e:	f000 f81b 	bl	8000d58 <Error_Handler>
  }
}
 8000d22:	bf00      	nop
 8000d24:	3750      	adds	r7, #80	@ 0x50
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40007000 	.word	0x40007000

08000d34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a04      	ldr	r2, [pc, #16]	@ (8000d54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d101      	bne.n	8000d4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d46:	f001 f907 	bl	8001f58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40010000 	.word	0x40010000

08000d58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d5c:	b672      	cpsid	i
}
 8000d5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <Error_Handler+0x8>

08000d64 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d68:	4b17      	ldr	r3, [pc, #92]	@ (8000dc8 <MX_SPI1_Init+0x64>)
 8000d6a:	4a18      	ldr	r2, [pc, #96]	@ (8000dcc <MX_SPI1_Init+0x68>)
 8000d6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d6e:	4b16      	ldr	r3, [pc, #88]	@ (8000dc8 <MX_SPI1_Init+0x64>)
 8000d70:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d76:	4b14      	ldr	r3, [pc, #80]	@ (8000dc8 <MX_SPI1_Init+0x64>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d7c:	4b12      	ldr	r3, [pc, #72]	@ (8000dc8 <MX_SPI1_Init+0x64>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d82:	4b11      	ldr	r3, [pc, #68]	@ (8000dc8 <MX_SPI1_Init+0x64>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d88:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc8 <MX_SPI1_Init+0x64>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc8 <MX_SPI1_Init+0x64>)
 8000d90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d96:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc8 <MX_SPI1_Init+0x64>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc8 <MX_SPI1_Init+0x64>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000da2:	4b09      	ldr	r3, [pc, #36]	@ (8000dc8 <MX_SPI1_Init+0x64>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000da8:	4b07      	ldr	r3, [pc, #28]	@ (8000dc8 <MX_SPI1_Init+0x64>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000dae:	4b06      	ldr	r3, [pc, #24]	@ (8000dc8 <MX_SPI1_Init+0x64>)
 8000db0:	220a      	movs	r2, #10
 8000db2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000db4:	4804      	ldr	r0, [pc, #16]	@ (8000dc8 <MX_SPI1_Init+0x64>)
 8000db6:	f002 fec5 	bl	8003b44 <HAL_SPI_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000dc0:	f7ff ffca 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000228 	.word	0x20000228
 8000dcc:	40013000 	.word	0x40013000

08000dd0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08a      	sub	sp, #40	@ 0x28
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a19      	ldr	r2, [pc, #100]	@ (8000e54 <HAL_SPI_MspInit+0x84>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d12b      	bne.n	8000e4a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	4b18      	ldr	r3, [pc, #96]	@ (8000e58 <HAL_SPI_MspInit+0x88>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dfa:	4a17      	ldr	r2, [pc, #92]	@ (8000e58 <HAL_SPI_MspInit+0x88>)
 8000dfc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e02:	4b15      	ldr	r3, [pc, #84]	@ (8000e58 <HAL_SPI_MspInit+0x88>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	4b11      	ldr	r3, [pc, #68]	@ (8000e58 <HAL_SPI_MspInit+0x88>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e16:	4a10      	ldr	r2, [pc, #64]	@ (8000e58 <HAL_SPI_MspInit+0x88>)
 8000e18:	f043 0302 	orr.w	r3, r3, #2
 8000e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e58 <HAL_SPI_MspInit+0x88>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e22:	f003 0302 	and.w	r3, r3, #2
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000e2a:	2338      	movs	r3, #56	@ 0x38
 8000e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e36:	2303      	movs	r3, #3
 8000e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e3a:	2305      	movs	r3, #5
 8000e3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	4619      	mov	r1, r3
 8000e44:	4805      	ldr	r0, [pc, #20]	@ (8000e5c <HAL_SPI_MspInit+0x8c>)
 8000e46:	f001 fef9 	bl	8002c3c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	3728      	adds	r7, #40	@ 0x28
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40013000 	.word	0x40013000
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020400 	.word	0x40020400

08000e60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	4b12      	ldr	r3, [pc, #72]	@ (8000eb4 <HAL_MspInit+0x54>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e6e:	4a11      	ldr	r2, [pc, #68]	@ (8000eb4 <HAL_MspInit+0x54>)
 8000e70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e74:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e76:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb4 <HAL_MspInit+0x54>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	603b      	str	r3, [r7, #0]
 8000e86:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb4 <HAL_MspInit+0x54>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb4 <HAL_MspInit+0x54>)
 8000e8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e92:	4b08      	ldr	r3, [pc, #32]	@ (8000eb4 <HAL_MspInit+0x54>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e9a:	603b      	str	r3, [r7, #0]
 8000e9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	210f      	movs	r1, #15
 8000ea2:	f06f 0001 	mvn.w	r0, #1
 8000ea6:	f001 fbb5 	bl	8002614 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40023800 	.word	0x40023800

08000eb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08c      	sub	sp, #48	@ 0x30
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	4b2f      	ldr	r3, [pc, #188]	@ (8000f8c <HAL_InitTick+0xd4>)
 8000ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed0:	4a2e      	ldr	r2, [pc, #184]	@ (8000f8c <HAL_InitTick+0xd4>)
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ed8:	4b2c      	ldr	r3, [pc, #176]	@ (8000f8c <HAL_InitTick+0xd4>)
 8000eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ee4:	f107 020c 	add.w	r2, r7, #12
 8000ee8:	f107 0310 	add.w	r3, r7, #16
 8000eec:	4611      	mov	r1, r2
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f002 fdf6 	bl	8003ae0 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000ef4:	f002 fde0 	bl	8003ab8 <HAL_RCC_GetPCLK2Freq>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f00:	4a23      	ldr	r2, [pc, #140]	@ (8000f90 <HAL_InitTick+0xd8>)
 8000f02:	fba2 2303 	umull	r2, r3, r2, r3
 8000f06:	0c9b      	lsrs	r3, r3, #18
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f0c:	4b21      	ldr	r3, [pc, #132]	@ (8000f94 <HAL_InitTick+0xdc>)
 8000f0e:	4a22      	ldr	r2, [pc, #136]	@ (8000f98 <HAL_InitTick+0xe0>)
 8000f10:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000f12:	4b20      	ldr	r3, [pc, #128]	@ (8000f94 <HAL_InitTick+0xdc>)
 8000f14:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f18:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f1a:	4a1e      	ldr	r2, [pc, #120]	@ (8000f94 <HAL_InitTick+0xdc>)
 8000f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f1e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f20:	4b1c      	ldr	r3, [pc, #112]	@ (8000f94 <HAL_InitTick+0xdc>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f26:	4b1b      	ldr	r3, [pc, #108]	@ (8000f94 <HAL_InitTick+0xdc>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f2c:	4b19      	ldr	r3, [pc, #100]	@ (8000f94 <HAL_InitTick+0xdc>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000f32:	4818      	ldr	r0, [pc, #96]	@ (8000f94 <HAL_InitTick+0xdc>)
 8000f34:	f003 fbd8 	bl	80046e8 <HAL_TIM_Base_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000f3e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d11b      	bne.n	8000f7e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000f46:	4813      	ldr	r0, [pc, #76]	@ (8000f94 <HAL_InitTick+0xdc>)
 8000f48:	f003 fc1e 	bl	8004788 <HAL_TIM_Base_Start_IT>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000f52:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d111      	bne.n	8000f7e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000f5a:	2019      	movs	r0, #25
 8000f5c:	f001 fb76 	bl	800264c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2b0f      	cmp	r3, #15
 8000f64:	d808      	bhi.n	8000f78 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000f66:	2200      	movs	r2, #0
 8000f68:	6879      	ldr	r1, [r7, #4]
 8000f6a:	2019      	movs	r0, #25
 8000f6c:	f001 fb52 	bl	8002614 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f70:	4a0a      	ldr	r2, [pc, #40]	@ (8000f9c <HAL_InitTick+0xe4>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6013      	str	r3, [r2, #0]
 8000f76:	e002      	b.n	8000f7e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000f7e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3730      	adds	r7, #48	@ 0x30
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	431bde83 	.word	0x431bde83
 8000f94:	20000280 	.word	0x20000280
 8000f98:	40010000 	.word	0x40010000
 8000f9c:	20000004 	.word	0x20000004

08000fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fa4:	bf00      	nop
 8000fa6:	e7fd      	b.n	8000fa4 <NMI_Handler+0x4>

08000fa8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <HardFault_Handler+0x4>

08000fb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <MemManage_Handler+0x4>

08000fb8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <BusFault_Handler+0x4>

08000fc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <UsageFault_Handler+0x4>

08000fc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
	...

08000fd8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fdc:	4803      	ldr	r0, [pc, #12]	@ (8000fec <TIM1_UP_TIM10_IRQHandler+0x14>)
 8000fde:	f003 fc92 	bl	8004906 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8000fe2:	4803      	ldr	r0, [pc, #12]	@ (8000ff0 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8000fe4:	f003 fc8f 	bl	8004906 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000280 	.word	0x20000280
 8000ff0:	20000314 	.word	0x20000314

08000ff4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ff8:	4802      	ldr	r0, [pc, #8]	@ (8001004 <DMA2_Stream0_IRQHandler+0x10>)
 8000ffa:	f001 fbe3 	bl	80027c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	200000cc 	.word	0x200000cc

08001008 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	e00a      	b.n	8001030 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800101a:	f3af 8000 	nop.w
 800101e:	4601      	mov	r1, r0
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	1c5a      	adds	r2, r3, #1
 8001024:	60ba      	str	r2, [r7, #8]
 8001026:	b2ca      	uxtb	r2, r1
 8001028:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	3301      	adds	r3, #1
 800102e:	617b      	str	r3, [r7, #20]
 8001030:	697a      	ldr	r2, [r7, #20]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	429a      	cmp	r2, r3
 8001036:	dbf0      	blt.n	800101a <_read+0x12>
  }

  return len;
 8001038:	687b      	ldr	r3, [r7, #4]
}
 800103a:	4618      	mov	r0, r3
 800103c:	3718      	adds	r7, #24
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b086      	sub	sp, #24
 8001046:	af00      	add	r7, sp, #0
 8001048:	60f8      	str	r0, [r7, #12]
 800104a:	60b9      	str	r1, [r7, #8]
 800104c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
 8001052:	e009      	b.n	8001068 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	1c5a      	adds	r2, r3, #1
 8001058:	60ba      	str	r2, [r7, #8]
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	4618      	mov	r0, r3
 800105e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	3301      	adds	r3, #1
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	697a      	ldr	r2, [r7, #20]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	429a      	cmp	r2, r3
 800106e:	dbf1      	blt.n	8001054 <_write+0x12>
  }
  return len;
 8001070:	687b      	ldr	r3, [r7, #4]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3718      	adds	r7, #24
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <_close>:

int _close(int file)
{
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001082:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001086:	4618      	mov	r0, r3
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001092:	b480      	push	{r7}
 8001094:	b083      	sub	sp, #12
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
 800109a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010a2:	605a      	str	r2, [r3, #4]
  return 0;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <_isatty>:

int _isatty(int file)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b083      	sub	sp, #12
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010ba:	2301      	movs	r3, #1
}
 80010bc:	4618      	mov	r0, r3
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
	...

080010e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010ec:	4a14      	ldr	r2, [pc, #80]	@ (8001140 <_sbrk+0x5c>)
 80010ee:	4b15      	ldr	r3, [pc, #84]	@ (8001144 <_sbrk+0x60>)
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f8:	4b13      	ldr	r3, [pc, #76]	@ (8001148 <_sbrk+0x64>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d102      	bne.n	8001106 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001100:	4b11      	ldr	r3, [pc, #68]	@ (8001148 <_sbrk+0x64>)
 8001102:	4a12      	ldr	r2, [pc, #72]	@ (800114c <_sbrk+0x68>)
 8001104:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001106:	4b10      	ldr	r3, [pc, #64]	@ (8001148 <_sbrk+0x64>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	429a      	cmp	r2, r3
 8001112:	d207      	bcs.n	8001124 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001114:	f005 f90e 	bl	8006334 <__errno>
 8001118:	4603      	mov	r3, r0
 800111a:	220c      	movs	r2, #12
 800111c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800111e:	f04f 33ff 	mov.w	r3, #4294967295
 8001122:	e009      	b.n	8001138 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001124:	4b08      	ldr	r3, [pc, #32]	@ (8001148 <_sbrk+0x64>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800112a:	4b07      	ldr	r3, [pc, #28]	@ (8001148 <_sbrk+0x64>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4413      	add	r3, r2
 8001132:	4a05      	ldr	r2, [pc, #20]	@ (8001148 <_sbrk+0x64>)
 8001134:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001136:	68fb      	ldr	r3, [r7, #12]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20020000 	.word	0x20020000
 8001144:	00000400 	.word	0x00000400
 8001148:	200002c8 	.word	0x200002c8
 800114c:	200006a8 	.word	0x200006a8

08001150 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001154:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <SystemInit+0x20>)
 8001156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800115a:	4a05      	ldr	r2, [pc, #20]	@ (8001170 <SystemInit+0x20>)
 800115c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001160:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <MX_TIM3_Init>:
TIM_HandleTypeDef htim12;
TIM_HandleTypeDef htim13;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08e      	sub	sp, #56	@ 0x38
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800117a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001188:	f107 0320 	add.w	r3, r7, #32
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
 80011a0:	615a      	str	r2, [r3, #20]
 80011a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011a4:	4b3e      	ldr	r3, [pc, #248]	@ (80012a0 <MX_TIM3_Init+0x12c>)
 80011a6:	4a3f      	ldr	r2, [pc, #252]	@ (80012a4 <MX_TIM3_Init+0x130>)
 80011a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80011aa:	4b3d      	ldr	r3, [pc, #244]	@ (80012a0 <MX_TIM3_Init+0x12c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b0:	4b3b      	ldr	r3, [pc, #236]	@ (80012a0 <MX_TIM3_Init+0x12c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80011b6:	4b3a      	ldr	r3, [pc, #232]	@ (80012a0 <MX_TIM3_Init+0x12c>)
 80011b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011be:	4b38      	ldr	r3, [pc, #224]	@ (80012a0 <MX_TIM3_Init+0x12c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c4:	4b36      	ldr	r3, [pc, #216]	@ (80012a0 <MX_TIM3_Init+0x12c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011ca:	4835      	ldr	r0, [pc, #212]	@ (80012a0 <MX_TIM3_Init+0x12c>)
 80011cc:	f003 fa8c 	bl	80046e8 <HAL_TIM_Base_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80011d6:	f7ff fdbf 	bl	8000d58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011de:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011e0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011e4:	4619      	mov	r1, r3
 80011e6:	482e      	ldr	r0, [pc, #184]	@ (80012a0 <MX_TIM3_Init+0x12c>)
 80011e8:	f003 fd40 	bl	8004c6c <HAL_TIM_ConfigClockSource>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80011f2:	f7ff fdb1 	bl	8000d58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011f6:	482a      	ldr	r0, [pc, #168]	@ (80012a0 <MX_TIM3_Init+0x12c>)
 80011f8:	f003 fb36 	bl	8004868 <HAL_TIM_PWM_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001202:	f7ff fda9 	bl	8000d58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001206:	2300      	movs	r3, #0
 8001208:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120a:	2300      	movs	r3, #0
 800120c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800120e:	f107 0320 	add.w	r3, r7, #32
 8001212:	4619      	mov	r1, r3
 8001214:	4822      	ldr	r0, [pc, #136]	@ (80012a0 <MX_TIM3_Init+0x12c>)
 8001216:	f004 f90f 	bl	8005438 <HAL_TIMEx_MasterConfigSynchronization>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001220:	f7ff fd9a 	bl	8000d58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001224:	2360      	movs	r3, #96	@ 0x60
 8001226:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800122c:	2302      	movs	r3, #2
 800122e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	2200      	movs	r2, #0
 8001238:	4619      	mov	r1, r3
 800123a:	4819      	ldr	r0, [pc, #100]	@ (80012a0 <MX_TIM3_Init+0x12c>)
 800123c:	f003 fc54 	bl	8004ae8 <HAL_TIM_PWM_ConfigChannel>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001246:	f7ff fd87 	bl	8000d58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	2204      	movs	r2, #4
 800124e:	4619      	mov	r1, r3
 8001250:	4813      	ldr	r0, [pc, #76]	@ (80012a0 <MX_TIM3_Init+0x12c>)
 8001252:	f003 fc49 	bl	8004ae8 <HAL_TIM_PWM_ConfigChannel>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800125c:	f7ff fd7c 	bl	8000d58 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001260:	2300      	movs	r3, #0
 8001262:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	2208      	movs	r2, #8
 8001268:	4619      	mov	r1, r3
 800126a:	480d      	ldr	r0, [pc, #52]	@ (80012a0 <MX_TIM3_Init+0x12c>)
 800126c:	f003 fc3c 	bl	8004ae8 <HAL_TIM_PWM_ConfigChannel>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 8001276:	f7ff fd6f 	bl	8000d58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	220c      	movs	r2, #12
 800127e:	4619      	mov	r1, r3
 8001280:	4807      	ldr	r0, [pc, #28]	@ (80012a0 <MX_TIM3_Init+0x12c>)
 8001282:	f003 fc31 	bl	8004ae8 <HAL_TIM_PWM_ConfigChannel>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM3_Init+0x11c>
  {
    Error_Handler();
 800128c:	f7ff fd64 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001290:	4803      	ldr	r0, [pc, #12]	@ (80012a0 <MX_TIM3_Init+0x12c>)
 8001292:	f000 f9cf 	bl	8001634 <HAL_TIM_MspPostInit>

}
 8001296:	bf00      	nop
 8001298:	3738      	adds	r7, #56	@ 0x38
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	200002cc 	.word	0x200002cc
 80012a4:	40000400 	.word	0x40000400

080012a8 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
 80012bc:	615a      	str	r2, [r3, #20]
 80012be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80012c0:	4b1e      	ldr	r3, [pc, #120]	@ (800133c <MX_TIM10_Init+0x94>)
 80012c2:	4a1f      	ldr	r2, [pc, #124]	@ (8001340 <MX_TIM10_Init+0x98>)
 80012c4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80012c6:	4b1d      	ldr	r3, [pc, #116]	@ (800133c <MX_TIM10_Init+0x94>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012cc:	4b1b      	ldr	r3, [pc, #108]	@ (800133c <MX_TIM10_Init+0x94>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80012d2:	4b1a      	ldr	r3, [pc, #104]	@ (800133c <MX_TIM10_Init+0x94>)
 80012d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012d8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012da:	4b18      	ldr	r3, [pc, #96]	@ (800133c <MX_TIM10_Init+0x94>)
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e0:	4b16      	ldr	r3, [pc, #88]	@ (800133c <MX_TIM10_Init+0x94>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80012e6:	4815      	ldr	r0, [pc, #84]	@ (800133c <MX_TIM10_Init+0x94>)
 80012e8:	f003 f9fe 	bl	80046e8 <HAL_TIM_Base_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80012f2:	f7ff fd31 	bl	8000d58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80012f6:	4811      	ldr	r0, [pc, #68]	@ (800133c <MX_TIM10_Init+0x94>)
 80012f8:	f003 fab6 	bl	8004868 <HAL_TIM_PWM_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001302:	f7ff fd29 	bl	8000d58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001306:	2360      	movs	r3, #96	@ 0x60
 8001308:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800130e:	2302      	movs	r3, #2
 8001310:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	2200      	movs	r2, #0
 800131a:	4619      	mov	r1, r3
 800131c:	4807      	ldr	r0, [pc, #28]	@ (800133c <MX_TIM10_Init+0x94>)
 800131e:	f003 fbe3 	bl	8004ae8 <HAL_TIM_PWM_ConfigChannel>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8001328:	f7ff fd16 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800132c:	4803      	ldr	r0, [pc, #12]	@ (800133c <MX_TIM10_Init+0x94>)
 800132e:	f000 f981 	bl	8001634 <HAL_TIM_MspPostInit>

}
 8001332:	bf00      	nop
 8001334:	3720      	adds	r7, #32
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000314 	.word	0x20000314
 8001340:	40014400 	.word	0x40014400

08001344 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b088      	sub	sp, #32
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
 8001358:	615a      	str	r2, [r3, #20]
 800135a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800135c:	4b1e      	ldr	r3, [pc, #120]	@ (80013d8 <MX_TIM11_Init+0x94>)
 800135e:	4a1f      	ldr	r2, [pc, #124]	@ (80013dc <MX_TIM11_Init+0x98>)
 8001360:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8001362:	4b1d      	ldr	r3, [pc, #116]	@ (80013d8 <MX_TIM11_Init+0x94>)
 8001364:	2200      	movs	r2, #0
 8001366:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001368:	4b1b      	ldr	r3, [pc, #108]	@ (80013d8 <MX_TIM11_Init+0x94>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800136e:	4b1a      	ldr	r3, [pc, #104]	@ (80013d8 <MX_TIM11_Init+0x94>)
 8001370:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001374:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001376:	4b18      	ldr	r3, [pc, #96]	@ (80013d8 <MX_TIM11_Init+0x94>)
 8001378:	2200      	movs	r2, #0
 800137a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800137c:	4b16      	ldr	r3, [pc, #88]	@ (80013d8 <MX_TIM11_Init+0x94>)
 800137e:	2200      	movs	r2, #0
 8001380:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001382:	4815      	ldr	r0, [pc, #84]	@ (80013d8 <MX_TIM11_Init+0x94>)
 8001384:	f003 f9b0 	bl	80046e8 <HAL_TIM_Base_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800138e:	f7ff fce3 	bl	8000d58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8001392:	4811      	ldr	r0, [pc, #68]	@ (80013d8 <MX_TIM11_Init+0x94>)
 8001394:	f003 fa68 	bl	8004868 <HAL_TIM_PWM_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800139e:	f7ff fcdb 	bl	8000d58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013a2:	2360      	movs	r3, #96	@ 0x60
 80013a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80013aa:	2302      	movs	r3, #2
 80013ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	2200      	movs	r2, #0
 80013b6:	4619      	mov	r1, r3
 80013b8:	4807      	ldr	r0, [pc, #28]	@ (80013d8 <MX_TIM11_Init+0x94>)
 80013ba:	f003 fb95 	bl	8004ae8 <HAL_TIM_PWM_ConfigChannel>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80013c4:	f7ff fcc8 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80013c8:	4803      	ldr	r0, [pc, #12]	@ (80013d8 <MX_TIM11_Init+0x94>)
 80013ca:	f000 f933 	bl	8001634 <HAL_TIM_MspPostInit>

}
 80013ce:	bf00      	nop
 80013d0:	3720      	adds	r7, #32
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	2000035c 	.word	0x2000035c
 80013dc:	40014800 	.word	0x40014800

080013e0 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b088      	sub	sp, #32
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
 80013f4:	615a      	str	r2, [r3, #20]
 80013f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80013f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001478 <MX_TIM12_Init+0x98>)
 80013fa:	4a20      	ldr	r2, [pc, #128]	@ (800147c <MX_TIM12_Init+0x9c>)
 80013fc:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80013fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001478 <MX_TIM12_Init+0x98>)
 8001400:	2200      	movs	r2, #0
 8001402:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001404:	4b1c      	ldr	r3, [pc, #112]	@ (8001478 <MX_TIM12_Init+0x98>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800140a:	4b1b      	ldr	r3, [pc, #108]	@ (8001478 <MX_TIM12_Init+0x98>)
 800140c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001410:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001412:	4b19      	ldr	r3, [pc, #100]	@ (8001478 <MX_TIM12_Init+0x98>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001418:	4b17      	ldr	r3, [pc, #92]	@ (8001478 <MX_TIM12_Init+0x98>)
 800141a:	2200      	movs	r2, #0
 800141c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800141e:	4816      	ldr	r0, [pc, #88]	@ (8001478 <MX_TIM12_Init+0x98>)
 8001420:	f003 fa22 	bl	8004868 <HAL_TIM_PWM_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800142a:	f7ff fc95 	bl	8000d58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800142e:	2360      	movs	r3, #96	@ 0x60
 8001430:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001436:	2302      	movs	r3, #2
 8001438:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	2200      	movs	r2, #0
 8001442:	4619      	mov	r1, r3
 8001444:	480c      	ldr	r0, [pc, #48]	@ (8001478 <MX_TIM12_Init+0x98>)
 8001446:	f003 fb4f 	bl	8004ae8 <HAL_TIM_PWM_ConfigChannel>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001450:	f7ff fc82 	bl	8000d58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	2204      	movs	r2, #4
 8001458:	4619      	mov	r1, r3
 800145a:	4807      	ldr	r0, [pc, #28]	@ (8001478 <MX_TIM12_Init+0x98>)
 800145c:	f003 fb44 	bl	8004ae8 <HAL_TIM_PWM_ConfigChannel>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8001466:	f7ff fc77 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800146a:	4803      	ldr	r0, [pc, #12]	@ (8001478 <MX_TIM12_Init+0x98>)
 800146c:	f000 f8e2 	bl	8001634 <HAL_TIM_MspPostInit>

}
 8001470:	bf00      	nop
 8001472:	3720      	adds	r7, #32
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	200003a4 	.word	0x200003a4
 800147c:	40001800 	.word	0x40001800

08001480 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
 8001494:	615a      	str	r2, [r3, #20]
 8001496:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001498:	4b1e      	ldr	r3, [pc, #120]	@ (8001514 <MX_TIM13_Init+0x94>)
 800149a:	4a1f      	ldr	r2, [pc, #124]	@ (8001518 <MX_TIM13_Init+0x98>)
 800149c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 800149e:	4b1d      	ldr	r3, [pc, #116]	@ (8001514 <MX_TIM13_Init+0x94>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001514 <MX_TIM13_Init+0x94>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 80014aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001514 <MX_TIM13_Init+0x94>)
 80014ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014b0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b2:	4b18      	ldr	r3, [pc, #96]	@ (8001514 <MX_TIM13_Init+0x94>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b8:	4b16      	ldr	r3, [pc, #88]	@ (8001514 <MX_TIM13_Init+0x94>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80014be:	4815      	ldr	r0, [pc, #84]	@ (8001514 <MX_TIM13_Init+0x94>)
 80014c0:	f003 f912 	bl	80046e8 <HAL_TIM_Base_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80014ca:	f7ff fc45 	bl	8000d58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80014ce:	4811      	ldr	r0, [pc, #68]	@ (8001514 <MX_TIM13_Init+0x94>)
 80014d0:	f003 f9ca 	bl	8004868 <HAL_TIM_PWM_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80014da:	f7ff fc3d 	bl	8000d58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014de:	2360      	movs	r3, #96	@ 0x60
 80014e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	2200      	movs	r2, #0
 80014f2:	4619      	mov	r1, r3
 80014f4:	4807      	ldr	r0, [pc, #28]	@ (8001514 <MX_TIM13_Init+0x94>)
 80014f6:	f003 faf7 	bl	8004ae8 <HAL_TIM_PWM_ConfigChannel>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001500:	f7ff fc2a 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001504:	4803      	ldr	r0, [pc, #12]	@ (8001514 <MX_TIM13_Init+0x94>)
 8001506:	f000 f895 	bl	8001634 <HAL_TIM_MspPostInit>

}
 800150a:	bf00      	nop
 800150c:	3720      	adds	r7, #32
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200003ec 	.word	0x200003ec
 8001518:	40001c00 	.word	0x40001c00

0800151c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a2c      	ldr	r2, [pc, #176]	@ (80015dc <HAL_TIM_Base_MspInit+0xc0>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d10e      	bne.n	800154c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
 8001532:	4b2b      	ldr	r3, [pc, #172]	@ (80015e0 <HAL_TIM_Base_MspInit+0xc4>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001536:	4a2a      	ldr	r2, [pc, #168]	@ (80015e0 <HAL_TIM_Base_MspInit+0xc4>)
 8001538:	f043 0302 	orr.w	r3, r3, #2
 800153c:	6413      	str	r3, [r2, #64]	@ 0x40
 800153e:	4b28      	ldr	r3, [pc, #160]	@ (80015e0 <HAL_TIM_Base_MspInit+0xc4>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	617b      	str	r3, [r7, #20]
 8001548:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 800154a:	e042      	b.n	80015d2 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM10)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a24      	ldr	r2, [pc, #144]	@ (80015e4 <HAL_TIM_Base_MspInit+0xc8>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d116      	bne.n	8001584 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
 800155a:	4b21      	ldr	r3, [pc, #132]	@ (80015e0 <HAL_TIM_Base_MspInit+0xc4>)
 800155c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800155e:	4a20      	ldr	r2, [pc, #128]	@ (80015e0 <HAL_TIM_Base_MspInit+0xc4>)
 8001560:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001564:	6453      	str	r3, [r2, #68]	@ 0x44
 8001566:	4b1e      	ldr	r3, [pc, #120]	@ (80015e0 <HAL_TIM_Base_MspInit+0xc4>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800156a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800156e:	613b      	str	r3, [r7, #16]
 8001570:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	210f      	movs	r1, #15
 8001576:	2019      	movs	r0, #25
 8001578:	f001 f84c 	bl	8002614 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800157c:	2019      	movs	r0, #25
 800157e:	f001 f865 	bl	800264c <HAL_NVIC_EnableIRQ>
}
 8001582:	e026      	b.n	80015d2 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM11)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a17      	ldr	r2, [pc, #92]	@ (80015e8 <HAL_TIM_Base_MspInit+0xcc>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d10e      	bne.n	80015ac <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	4b13      	ldr	r3, [pc, #76]	@ (80015e0 <HAL_TIM_Base_MspInit+0xc4>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001596:	4a12      	ldr	r2, [pc, #72]	@ (80015e0 <HAL_TIM_Base_MspInit+0xc4>)
 8001598:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800159c:	6453      	str	r3, [r2, #68]	@ 0x44
 800159e:	4b10      	ldr	r3, [pc, #64]	@ (80015e0 <HAL_TIM_Base_MspInit+0xc4>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
}
 80015aa:	e012      	b.n	80015d2 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM13)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a0e      	ldr	r2, [pc, #56]	@ (80015ec <HAL_TIM_Base_MspInit+0xd0>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d10d      	bne.n	80015d2 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	4b09      	ldr	r3, [pc, #36]	@ (80015e0 <HAL_TIM_Base_MspInit+0xc4>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015be:	4a08      	ldr	r2, [pc, #32]	@ (80015e0 <HAL_TIM_Base_MspInit+0xc4>)
 80015c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015c6:	4b06      	ldr	r3, [pc, #24]	@ (80015e0 <HAL_TIM_Base_MspInit+0xc4>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	68bb      	ldr	r3, [r7, #8]
}
 80015d2:	bf00      	nop
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40000400 	.word	0x40000400
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40014400 	.word	0x40014400
 80015e8:	40014800 	.word	0x40014800
 80015ec:	40001c00 	.word	0x40001c00

080015f0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM12)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a0b      	ldr	r2, [pc, #44]	@ (800162c <HAL_TIM_PWM_MspInit+0x3c>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d10d      	bne.n	800161e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	4b0a      	ldr	r3, [pc, #40]	@ (8001630 <HAL_TIM_PWM_MspInit+0x40>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160a:	4a09      	ldr	r2, [pc, #36]	@ (8001630 <HAL_TIM_PWM_MspInit+0x40>)
 800160c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001610:	6413      	str	r3, [r2, #64]	@ 0x40
 8001612:	4b07      	ldr	r3, [pc, #28]	@ (8001630 <HAL_TIM_PWM_MspInit+0x40>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 800161e:	bf00      	nop
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	40001800 	.word	0x40001800
 8001630:	40023800 	.word	0x40023800

08001634 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08e      	sub	sp, #56	@ 0x38
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a6a      	ldr	r2, [pc, #424]	@ (80017fc <HAL_TIM_MspPostInit+0x1c8>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d13c      	bne.n	80016d0 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	623b      	str	r3, [r7, #32]
 800165a:	4b69      	ldr	r3, [pc, #420]	@ (8001800 <HAL_TIM_MspPostInit+0x1cc>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165e:	4a68      	ldr	r2, [pc, #416]	@ (8001800 <HAL_TIM_MspPostInit+0x1cc>)
 8001660:	f043 0302 	orr.w	r3, r3, #2
 8001664:	6313      	str	r3, [r2, #48]	@ 0x30
 8001666:	4b66      	ldr	r3, [pc, #408]	@ (8001800 <HAL_TIM_MspPostInit+0x1cc>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	623b      	str	r3, [r7, #32]
 8001670:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
 8001676:	4b62      	ldr	r3, [pc, #392]	@ (8001800 <HAL_TIM_MspPostInit+0x1cc>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167a:	4a61      	ldr	r2, [pc, #388]	@ (8001800 <HAL_TIM_MspPostInit+0x1cc>)
 800167c:	f043 0304 	orr.w	r3, r3, #4
 8001680:	6313      	str	r3, [r2, #48]	@ 0x30
 8001682:	4b5f      	ldr	r3, [pc, #380]	@ (8001800 <HAL_TIM_MspPostInit+0x1cc>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	f003 0304 	and.w	r3, r3, #4
 800168a:	61fb      	str	r3, [r7, #28]
 800168c:	69fb      	ldr	r3, [r7, #28]
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800168e:	2303      	movs	r3, #3
 8001690:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001692:	2302      	movs	r3, #2
 8001694:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169a:	2300      	movs	r3, #0
 800169c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800169e:	2302      	movs	r3, #2
 80016a0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016a6:	4619      	mov	r1, r3
 80016a8:	4856      	ldr	r0, [pc, #344]	@ (8001804 <HAL_TIM_MspPostInit+0x1d0>)
 80016aa:	f001 fac7 	bl	8002c3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016ae:	23c0      	movs	r3, #192	@ 0xc0
 80016b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	2302      	movs	r3, #2
 80016b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ba:	2300      	movs	r3, #0
 80016bc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016be:	2302      	movs	r3, #2
 80016c0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016c6:	4619      	mov	r1, r3
 80016c8:	484f      	ldr	r0, [pc, #316]	@ (8001808 <HAL_TIM_MspPostInit+0x1d4>)
 80016ca:	f001 fab7 	bl	8002c3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 80016ce:	e091      	b.n	80017f4 <HAL_TIM_MspPostInit+0x1c0>
  else if(timHandle->Instance==TIM10)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a4d      	ldr	r2, [pc, #308]	@ (800180c <HAL_TIM_MspPostInit+0x1d8>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d11f      	bne.n	800171a <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	61bb      	str	r3, [r7, #24]
 80016de:	4b48      	ldr	r3, [pc, #288]	@ (8001800 <HAL_TIM_MspPostInit+0x1cc>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e2:	4a47      	ldr	r2, [pc, #284]	@ (8001800 <HAL_TIM_MspPostInit+0x1cc>)
 80016e4:	f043 0302 	orr.w	r3, r3, #2
 80016e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ea:	4b45      	ldr	r3, [pc, #276]	@ (8001800 <HAL_TIM_MspPostInit+0x1cc>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	61bb      	str	r3, [r7, #24]
 80016f4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fc:	2302      	movs	r3, #2
 80016fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001704:	2300      	movs	r3, #0
 8001706:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001708:	2303      	movs	r3, #3
 800170a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001710:	4619      	mov	r1, r3
 8001712:	483c      	ldr	r0, [pc, #240]	@ (8001804 <HAL_TIM_MspPostInit+0x1d0>)
 8001714:	f001 fa92 	bl	8002c3c <HAL_GPIO_Init>
}
 8001718:	e06c      	b.n	80017f4 <HAL_TIM_MspPostInit+0x1c0>
  else if(timHandle->Instance==TIM11)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a3c      	ldr	r2, [pc, #240]	@ (8001810 <HAL_TIM_MspPostInit+0x1dc>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d11f      	bne.n	8001764 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	4b35      	ldr	r3, [pc, #212]	@ (8001800 <HAL_TIM_MspPostInit+0x1cc>)
 800172a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172c:	4a34      	ldr	r2, [pc, #208]	@ (8001800 <HAL_TIM_MspPostInit+0x1cc>)
 800172e:	f043 0302 	orr.w	r3, r3, #2
 8001732:	6313      	str	r3, [r2, #48]	@ 0x30
 8001734:	4b32      	ldr	r3, [pc, #200]	@ (8001800 <HAL_TIM_MspPostInit+0x1cc>)
 8001736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	617b      	str	r3, [r7, #20]
 800173e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001740:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001744:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001746:	2302      	movs	r3, #2
 8001748:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174e:	2300      	movs	r3, #0
 8001750:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001752:	2303      	movs	r3, #3
 8001754:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001756:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800175a:	4619      	mov	r1, r3
 800175c:	4829      	ldr	r0, [pc, #164]	@ (8001804 <HAL_TIM_MspPostInit+0x1d0>)
 800175e:	f001 fa6d 	bl	8002c3c <HAL_GPIO_Init>
}
 8001762:	e047      	b.n	80017f4 <HAL_TIM_MspPostInit+0x1c0>
  else if(timHandle->Instance==TIM12)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a2a      	ldr	r2, [pc, #168]	@ (8001814 <HAL_TIM_MspPostInit+0x1e0>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d11f      	bne.n	80017ae <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	613b      	str	r3, [r7, #16]
 8001772:	4b23      	ldr	r3, [pc, #140]	@ (8001800 <HAL_TIM_MspPostInit+0x1cc>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001776:	4a22      	ldr	r2, [pc, #136]	@ (8001800 <HAL_TIM_MspPostInit+0x1cc>)
 8001778:	f043 0302 	orr.w	r3, r3, #2
 800177c:	6313      	str	r3, [r2, #48]	@ 0x30
 800177e:	4b20      	ldr	r3, [pc, #128]	@ (8001800 <HAL_TIM_MspPostInit+0x1cc>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	613b      	str	r3, [r7, #16]
 8001788:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800178a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800178e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001790:	2302      	movs	r3, #2
 8001792:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001798:	2300      	movs	r3, #0
 800179a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800179c:	2309      	movs	r3, #9
 800179e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017a4:	4619      	mov	r1, r3
 80017a6:	4817      	ldr	r0, [pc, #92]	@ (8001804 <HAL_TIM_MspPostInit+0x1d0>)
 80017a8:	f001 fa48 	bl	8002c3c <HAL_GPIO_Init>
}
 80017ac:	e022      	b.n	80017f4 <HAL_TIM_MspPostInit+0x1c0>
  else if(timHandle->Instance==TIM13)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a19      	ldr	r2, [pc, #100]	@ (8001818 <HAL_TIM_MspPostInit+0x1e4>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d11d      	bne.n	80017f4 <HAL_TIM_MspPostInit+0x1c0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b8:	2300      	movs	r3, #0
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	4b10      	ldr	r3, [pc, #64]	@ (8001800 <HAL_TIM_MspPostInit+0x1cc>)
 80017be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c0:	4a0f      	ldr	r2, [pc, #60]	@ (8001800 <HAL_TIM_MspPostInit+0x1cc>)
 80017c2:	f043 0301 	orr.w	r3, r3, #1
 80017c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001800 <HAL_TIM_MspPostInit+0x1cc>)
 80017ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017d4:	2340      	movs	r3, #64	@ 0x40
 80017d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d8:	2302      	movs	r3, #2
 80017da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	2300      	movs	r3, #0
 80017e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80017e4:	2309      	movs	r3, #9
 80017e6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017ec:	4619      	mov	r1, r3
 80017ee:	480b      	ldr	r0, [pc, #44]	@ (800181c <HAL_TIM_MspPostInit+0x1e8>)
 80017f0:	f001 fa24 	bl	8002c3c <HAL_GPIO_Init>
}
 80017f4:	bf00      	nop
 80017f6:	3738      	adds	r7, #56	@ 0x38
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40000400 	.word	0x40000400
 8001800:	40023800 	.word	0x40023800
 8001804:	40020400 	.word	0x40020400
 8001808:	40020800 	.word	0x40020800
 800180c:	40014400 	.word	0x40014400
 8001810:	40014800 	.word	0x40014800
 8001814:	40001800 	.word	0x40001800
 8001818:	40001c00 	.word	0x40001c00
 800181c:	40020000 	.word	0x40020000

08001820 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001824:	4b11      	ldr	r3, [pc, #68]	@ (800186c <MX_USART2_UART_Init+0x4c>)
 8001826:	4a12      	ldr	r2, [pc, #72]	@ (8001870 <MX_USART2_UART_Init+0x50>)
 8001828:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800182a:	4b10      	ldr	r3, [pc, #64]	@ (800186c <MX_USART2_UART_Init+0x4c>)
 800182c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001830:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001832:	4b0e      	ldr	r3, [pc, #56]	@ (800186c <MX_USART2_UART_Init+0x4c>)
 8001834:	2200      	movs	r2, #0
 8001836:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001838:	4b0c      	ldr	r3, [pc, #48]	@ (800186c <MX_USART2_UART_Init+0x4c>)
 800183a:	2200      	movs	r2, #0
 800183c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800183e:	4b0b      	ldr	r3, [pc, #44]	@ (800186c <MX_USART2_UART_Init+0x4c>)
 8001840:	2200      	movs	r2, #0
 8001842:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001844:	4b09      	ldr	r3, [pc, #36]	@ (800186c <MX_USART2_UART_Init+0x4c>)
 8001846:	220c      	movs	r2, #12
 8001848:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800184a:	4b08      	ldr	r3, [pc, #32]	@ (800186c <MX_USART2_UART_Init+0x4c>)
 800184c:	2200      	movs	r2, #0
 800184e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001850:	4b06      	ldr	r3, [pc, #24]	@ (800186c <MX_USART2_UART_Init+0x4c>)
 8001852:	2200      	movs	r2, #0
 8001854:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001856:	4805      	ldr	r0, [pc, #20]	@ (800186c <MX_USART2_UART_Init+0x4c>)
 8001858:	f003 fe7e 	bl	8005558 <HAL_UART_Init>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001862:	f7ff fa79 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000434 	.word	0x20000434
 8001870:	40004400 	.word	0x40004400

08001874 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b08a      	sub	sp, #40	@ 0x28
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187c:	f107 0314 	add.w	r3, r7, #20
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a19      	ldr	r2, [pc, #100]	@ (80018f8 <HAL_UART_MspInit+0x84>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d12b      	bne.n	80018ee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	613b      	str	r3, [r7, #16]
 800189a:	4b18      	ldr	r3, [pc, #96]	@ (80018fc <HAL_UART_MspInit+0x88>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189e:	4a17      	ldr	r2, [pc, #92]	@ (80018fc <HAL_UART_MspInit+0x88>)
 80018a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80018a6:	4b15      	ldr	r3, [pc, #84]	@ (80018fc <HAL_UART_MspInit+0x88>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	4b11      	ldr	r3, [pc, #68]	@ (80018fc <HAL_UART_MspInit+0x88>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ba:	4a10      	ldr	r2, [pc, #64]	@ (80018fc <HAL_UART_MspInit+0x88>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c2:	4b0e      	ldr	r3, [pc, #56]	@ (80018fc <HAL_UART_MspInit+0x88>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018ce:	230c      	movs	r3, #12
 80018d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d2:	2302      	movs	r3, #2
 80018d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018da:	2303      	movs	r3, #3
 80018dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018de:	2307      	movs	r3, #7
 80018e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e2:	f107 0314 	add.w	r3, r7, #20
 80018e6:	4619      	mov	r1, r3
 80018e8:	4805      	ldr	r0, [pc, #20]	@ (8001900 <HAL_UART_MspInit+0x8c>)
 80018ea:	f001 f9a7 	bl	8002c3c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80018ee:	bf00      	nop
 80018f0:	3728      	adds	r7, #40	@ 0x28
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40004400 	.word	0x40004400
 80018fc:	40023800 	.word	0x40023800
 8001900:	40020000 	.word	0x40020000

08001904 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001904:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800193c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001908:	f7ff fc22 	bl	8001150 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800190c:	480c      	ldr	r0, [pc, #48]	@ (8001940 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800190e:	490d      	ldr	r1, [pc, #52]	@ (8001944 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001910:	4a0d      	ldr	r2, [pc, #52]	@ (8001948 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001912:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001914:	e002      	b.n	800191c <LoopCopyDataInit>

08001916 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001916:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001918:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800191a:	3304      	adds	r3, #4

0800191c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800191c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800191e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001920:	d3f9      	bcc.n	8001916 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001922:	4a0a      	ldr	r2, [pc, #40]	@ (800194c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001924:	4c0a      	ldr	r4, [pc, #40]	@ (8001950 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001926:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001928:	e001      	b.n	800192e <LoopFillZerobss>

0800192a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800192a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800192c:	3204      	adds	r2, #4

0800192e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800192e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001930:	d3fb      	bcc.n	800192a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001932:	f004 fd05 	bl	8006340 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001936:	f7ff f95b 	bl	8000bf0 <main>
  bx  lr    
 800193a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800193c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001940:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001944:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001948:	08006eac 	.word	0x08006eac
  ldr r2, =_sbss
 800194c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001950:	200006a8 	.word	0x200006a8

08001954 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001954:	e7fe      	b.n	8001954 <ADC_IRQHandler>

08001956 <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b084      	sub	sp, #16
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d105      	bne.n	8001970 <stm32_lock_init+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001964:	b672      	cpsid	i
}
 8001966:	bf00      	nop
 8001968:	f7ff f9f6 	bl	8000d58 <Error_Handler>
 800196c:	bf00      	nop
 800196e:	e7fd      	b.n	800196c <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8001970:	2300      	movs	r3, #0
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	e007      	b.n	8001986 <stm32_lock_init+0x30>
  {
    lock->basepri[i] = 0;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	68fa      	ldr	r2, [r7, #12]
 800197a:	2100      	movs	r1, #0
 800197c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	3301      	adds	r3, #1
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d9f4      	bls.n	8001976 <stm32_lock_init+0x20>
  }
  lock->nesting_level = 0;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	721a      	strb	r2, [r3, #8]
}
 8001992:	bf00      	nop
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b084      	sub	sp, #16
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d105      	bne.n	80019b4 <stm32_lock_acquire+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 80019a8:	b672      	cpsid	i
}
 80019aa:	bf00      	nop
 80019ac:	f7ff f9d4 	bl	8000d58 <Error_Handler>
 80019b0:	bf00      	nop
 80019b2:	e7fd      	b.n	80019b0 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	7a1b      	ldrb	r3, [r3, #8]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d905      	bls.n	80019c8 <stm32_lock_acquire+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 80019bc:	b672      	cpsid	i
}
 80019be:	bf00      	nop
 80019c0:	f7ff f9ca 	bl	8000d58 <Error_Handler>
 80019c4:	bf00      	nop
 80019c6:	e7fd      	b.n	80019c4 <stm32_lock_acquire+0x2a>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	7a1b      	ldrb	r3, [r3, #8]
 80019cc:	1c5a      	adds	r2, r3, #1
 80019ce:	b2d1      	uxtb	r1, r2
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	7211      	strb	r1, [r2, #8]
 80019d4:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80019d6:	f3ef 8211 	mrs	r2, BASEPRI
 80019da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019de:	f383 8811 	msr	BASEPRI, r3
 80019e2:	f3bf 8f6f 	isb	sy
 80019e6:	f3bf 8f4f 	dsb	sy
 80019ea:	60fa      	str	r2, [r7, #12]
 80019ec:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80019f6:	bf00      	nop
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b084      	sub	sp, #16
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d105      	bne.n	8001a18 <stm32_lock_release+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001a0c:	b672      	cpsid	i
}
 8001a0e:	bf00      	nop
 8001a10:	f7ff f9a2 	bl	8000d58 <Error_Handler>
 8001a14:	bf00      	nop
 8001a16:	e7fd      	b.n	8001a14 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	7a1b      	ldrb	r3, [r3, #8]
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	7a1b      	ldrb	r3, [r3, #8]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d905      	bls.n	8001a38 <stm32_lock_release+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001a2c:	b672      	cpsid	i
}
 8001a2e:	bf00      	nop
 8001a30:	f7ff f992 	bl	8000d58 <Error_Handler>
 8001a34:	bf00      	nop
 8001a36:	e7fd      	b.n	8001a34 <stm32_lock_release+0x36>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	7a1b      	ldrb	r3, [r3, #8]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a44:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001a4c:	bf00      	nop
}
 8001a4e:	bf00      	nop
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d105      	bne.n	8001a70 <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8001a64:	f004 fc66 	bl	8006334 <__errno>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2216      	movs	r2, #22
 8001a6c:	601a      	str	r2, [r3, #0]
    return;
 8001a6e:	e016      	b.n	8001a9e <__retarget_lock_init_recursive+0x48>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8001a70:	200c      	movs	r0, #12
 8001a72:	f004 fa2b 	bl	8005ecc <malloc>
 8001a76:	4603      	mov	r3, r0
 8001a78:	461a      	mov	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d005      	beq.n	8001a92 <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff ff63 	bl	8001956 <stm32_lock_init>
    return;
 8001a90:	e005      	b.n	8001a9e <__retarget_lock_init_recursive+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 8001a92:	b672      	cpsid	i
}
 8001a94:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8001a96:	f7ff f95f 	bl	8000d58 <Error_Handler>
 8001a9a:	bf00      	nop
 8001a9c:	e7fd      	b.n	8001a9a <__retarget_lock_init_recursive+0x44>
}
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d105      	bne.n	8001abe <__retarget_lock_acquire_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab2:	b672      	cpsid	i
}
 8001ab4:	bf00      	nop
 8001ab6:	f7ff f94f 	bl	8000d58 <Error_Handler>
 8001aba:	bf00      	nop
 8001abc:	e7fd      	b.n	8001aba <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff ff6a 	bl	800199a <stm32_lock_acquire>
}
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d105      	bne.n	8001ae8 <__retarget_lock_release_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001adc:	b672      	cpsid	i
}
 8001ade:	bf00      	nop
 8001ae0:	f7ff f93a 	bl	8000d58 <Error_Handler>
 8001ae4:	bf00      	nop
 8001ae6:	e7fd      	b.n	8001ae4 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff ff87 	bl	80019fe <stm32_lock_release>
}
 8001af0:	bf00      	nop
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <MX_USART2_UART_Init>:

extern UART_HandleTypeDef huart2;
static bool logger_initialised = false;

static void MX_USART2_UART_Init(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 8001afc:	4b0e      	ldr	r3, [pc, #56]	@ (8001b38 <MX_USART2_UART_Init+0x40>)
 8001afe:	4a0f      	ldr	r2, [pc, #60]	@ (8001b3c <MX_USART2_UART_Init+0x44>)
 8001b00:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8001b02:	4b0d      	ldr	r3, [pc, #52]	@ (8001b38 <MX_USART2_UART_Init+0x40>)
 8001b04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b08:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b38 <MX_USART2_UART_Init+0x40>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8001b10:	4b09      	ldr	r3, [pc, #36]	@ (8001b38 <MX_USART2_UART_Init+0x40>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8001b16:	4b08      	ldr	r3, [pc, #32]	@ (8001b38 <MX_USART2_UART_Init+0x40>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8001b1c:	4b06      	ldr	r3, [pc, #24]	@ (8001b38 <MX_USART2_UART_Init+0x40>)
 8001b1e:	220c      	movs	r2, #12
 8001b20:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b22:	4b05      	ldr	r3, [pc, #20]	@ (8001b38 <MX_USART2_UART_Init+0x40>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b28:	4b03      	ldr	r3, [pc, #12]	@ (8001b38 <MX_USART2_UART_Init+0x40>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	61da      	str	r2, [r3, #28]
    // if (HAL_UART_Init(&huart2) != HAL_OK)
    // {
    //   Error_Handler();
    // }
}
 8001b2e:	bf00      	nop
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	20000434 	.word	0x20000434
 8001b3c:	40004400 	.word	0x40004400

08001b40 <set_log_level>:

void set_log_level(stm32_log_level_t log_level) {
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	71fb      	strb	r3, [r7, #7]
    if (!logger_initialised) {
 8001b4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb8 <set_log_level+0x78>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	f083 0301 	eor.w	r3, r3, #1
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d004      	beq.n	8001b62 <set_log_level+0x22>
#ifdef SEMIHOSTING
        initialise_monitor_handles();
#else
        MX_USART2_UART_Init();
 8001b58:	f7ff ffce 	bl	8001af8 <MX_USART2_UART_Init>
#endif
        logger_initialised = true; 
 8001b5c:	4b16      	ldr	r3, [pc, #88]	@ (8001bb8 <set_log_level+0x78>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	701a      	strb	r2, [r3, #0]
    }
    switch(log_level) {
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	3b01      	subs	r3, #1
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	d820      	bhi.n	8001bac <set_log_level+0x6c>
 8001b6a:	a201      	add	r2, pc, #4	@ (adr r2, 8001b70 <set_log_level+0x30>)
 8001b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b70:	08001b85 	.word	0x08001b85
 8001b74:	08001b8d 	.word	0x08001b8d
 8001b78:	08001b95 	.word	0x08001b95
 8001b7c:	08001b9d 	.word	0x08001b9d
 8001b80:	08001ba5 	.word	0x08001ba5
        case LOG_ERROR:
            printf(LOG_COLOR_E);
 8001b84:	480d      	ldr	r0, [pc, #52]	@ (8001bbc <set_log_level+0x7c>)
 8001b86:	f004 fb19 	bl	80061bc <iprintf>
            break;
 8001b8a:	e010      	b.n	8001bae <set_log_level+0x6e>
        case LOG_WARN:
            printf(LOG_COLOR_W);
 8001b8c:	480c      	ldr	r0, [pc, #48]	@ (8001bc0 <set_log_level+0x80>)
 8001b8e:	f004 fb15 	bl	80061bc <iprintf>
            break;
 8001b92:	e00c      	b.n	8001bae <set_log_level+0x6e>
        case LOG_INFO:
            printf(LOG_COLOR_I);
 8001b94:	480b      	ldr	r0, [pc, #44]	@ (8001bc4 <set_log_level+0x84>)
 8001b96:	f004 fb11 	bl	80061bc <iprintf>
            break;
 8001b9a:	e008      	b.n	8001bae <set_log_level+0x6e>
        case LOG_DEBUG:
            printf(LOG_COLOR_D);
 8001b9c:	480a      	ldr	r0, [pc, #40]	@ (8001bc8 <set_log_level+0x88>)
 8001b9e:	f004 fb0d 	bl	80061bc <iprintf>
            break;
 8001ba2:	e004      	b.n	8001bae <set_log_level+0x6e>
        case LOG_VERBOSE:
            printf(LOG_COLOR_V);
 8001ba4:	4809      	ldr	r0, [pc, #36]	@ (8001bcc <set_log_level+0x8c>)
 8001ba6:	f004 fb09 	bl	80061bc <iprintf>
            break;
 8001baa:	e000      	b.n	8001bae <set_log_level+0x6e>
        default:
            break; 
 8001bac:	bf00      	nop
    }
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000494 	.word	0x20000494
 8001bbc:	08006dc4 	.word	0x08006dc4
 8001bc0:	08006dcc 	.word	0x08006dcc
 8001bc4:	08006dd4 	.word	0x08006dd4
 8001bc8:	08006ddc 	.word	0x08006ddc
 8001bcc:	08006de4 	.word	0x08006de4

08001bd0 <MPU6500_OnActivate>:
// TODO: Remove this buffer, instead return
static uint8_t _buffer[14];
// static uint8_t _mag_adjust[3];

__weak void MPU6500_OnActivate()
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
	...

08001be0 <MPU6500_Activate>:

static inline void MPU6500_Activate()
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
    MPU6500_OnActivate();
 8001be4:	f7ff fff4 	bl	8001bd0 <MPU6500_OnActivate>
    HAL_GPIO_WritePin(MPU6500_CS_GPIO, MPU6500_CS_PIN, GPIO_PIN_RESET);
 8001be8:	2200      	movs	r2, #0
 8001bea:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001bee:	4802      	ldr	r0, [pc, #8]	@ (8001bf8 <MPU6500_Activate+0x18>)
 8001bf0:	f001 f9c0 	bl	8002f74 <HAL_GPIO_WritePin>
}
 8001bf4:	bf00      	nop
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40020000 	.word	0x40020000

08001bfc <MPU6500_Deactivate>:

static inline void MPU6500_Deactivate()
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MPU6500_CS_GPIO, MPU6500_CS_PIN, GPIO_PIN_SET);
 8001c00:	2201      	movs	r2, #1
 8001c02:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c06:	4802      	ldr	r0, [pc, #8]	@ (8001c10 <MPU6500_Deactivate+0x14>)
 8001c08:	f001 f9b4 	bl	8002f74 <HAL_GPIO_WritePin>
}
 8001c0c:	bf00      	nop
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40020000 	.word	0x40020000

08001c14 <SPIx_WriteRead>:

uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af02      	add	r7, sp, #8
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
    uint8_t receivedbyte = 0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	73fb      	strb	r3, [r7, #15]
    if (HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)&Byte, (uint8_t *)&receivedbyte, 1, 0x1000) != HAL_OK)
 8001c22:	f107 020f 	add.w	r2, r7, #15
 8001c26:	1df9      	adds	r1, r7, #7
 8001c28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	2301      	movs	r3, #1
 8001c30:	4806      	ldr	r0, [pc, #24]	@ (8001c4c <SPIx_WriteRead+0x38>)
 8001c32:	f002 fa6d 	bl	8004110 <HAL_SPI_TransmitReceive>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <SPIx_WriteRead+0x2c>
    {
        return -1;
 8001c3c:	23ff      	movs	r3, #255	@ 0xff
 8001c3e:	e000      	b.n	8001c42 <SPIx_WriteRead+0x2e>
    }
    else
    {
    }
    return receivedbyte;
 8001c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000228 	.word	0x20000228

08001c50 <MPU_SPI_Write>:

void MPU_SPI_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	70fb      	strb	r3, [r7, #3]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	803b      	strh	r3, [r7, #0]
    MPU6500_Activate();
 8001c60:	f7ff ffbe 	bl	8001be0 <MPU6500_Activate>
    SPIx_WriteRead(WriteAddr);
 8001c64:	78fb      	ldrb	r3, [r7, #3]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff ffd4 	bl	8001c14 <SPIx_WriteRead>
    while (NumByteToWrite >= 0x01)
 8001c6c:	e00a      	b.n	8001c84 <MPU_SPI_Write+0x34>
    {
        SPIx_WriteRead(*pBuffer);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff ffce 	bl	8001c14 <SPIx_WriteRead>
        NumByteToWrite--;
 8001c78:	883b      	ldrh	r3, [r7, #0]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	803b      	strh	r3, [r7, #0]
        pBuffer++;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3301      	adds	r3, #1
 8001c82:	607b      	str	r3, [r7, #4]
    while (NumByteToWrite >= 0x01)
 8001c84:	883b      	ldrh	r3, [r7, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1f1      	bne.n	8001c6e <MPU_SPI_Write+0x1e>
    }
    MPU6500_Deactivate();
 8001c8a:	f7ff ffb7 	bl	8001bfc <MPU6500_Deactivate>
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <MPU_SPI_Read>:

void MPU_SPI_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	70fb      	strb	r3, [r7, #3]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	803b      	strh	r3, [r7, #0]
    MPU6500_Activate();
 8001ca8:	f7ff ff9a 	bl	8001be0 <MPU6500_Activate>
    uint8_t data = ReadAddr | READWRITE_CMD;
 8001cac:	2280      	movs	r2, #128	@ 0x80
 8001cae:	78fb      	ldrb	r3, [r7, #3]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	73fb      	strb	r3, [r7, #15]
    HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 8001cb6:	f107 010f 	add.w	r1, r7, #15
 8001cba:	f04f 33ff 	mov.w	r3, #4294967295
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	4807      	ldr	r0, [pc, #28]	@ (8001ce0 <MPU_SPI_Read+0x48>)
 8001cc2:	f001 ffc8 	bl	8003c56 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, pBuffer, NumByteToRead, HAL_MAX_DELAY);
 8001cc6:	883a      	ldrh	r2, [r7, #0]
 8001cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8001ccc:	6879      	ldr	r1, [r7, #4]
 8001cce:	4804      	ldr	r0, [pc, #16]	@ (8001ce0 <MPU_SPI_Read+0x48>)
 8001cd0:	f002 f905 	bl	8003ede <HAL_SPI_Receive>
    MPU6500_Deactivate();
 8001cd4:	f7ff ff92 	bl	8001bfc <MPU6500_Deactivate>
}
 8001cd8:	bf00      	nop
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	20000228 	.word	0x20000228

08001ce4 <mpu6500_write_register>:

/* writes a byte to MPU6500 register given a register address and data */
void mpu6500_write_register(uint8_t subAddress, uint8_t data)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	460a      	mov	r2, r1
 8001cee:	71fb      	strb	r3, [r7, #7]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	71bb      	strb	r3, [r7, #6]
    MPU_SPI_Write(&data, subAddress, 1);
 8001cf4:	79f9      	ldrb	r1, [r7, #7]
 8001cf6:	1dbb      	adds	r3, r7, #6
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff ffa8 	bl	8001c50 <MPU_SPI_Write>
    HAL_Delay(10);
 8001d00:	200a      	movs	r0, #10
 8001d02:	f000 f949 	bl	8001f98 <HAL_Delay>
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <mpu6500_read_registers>:

/* reads registers from MPU6500 given a starting register address, number of bytes, and a pointer to store data */
void mpu6500_read_registers(uint8_t subAddress, uint8_t count, uint8_t *dest)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	4603      	mov	r3, r0
 8001d16:	603a      	str	r2, [r7, #0]
 8001d18:	71fb      	strb	r3, [r7, #7]
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	71bb      	strb	r3, [r7, #6]
    MPU_SPI_Read(dest, subAddress, count);
 8001d1e:	79bb      	ldrb	r3, [r7, #6]
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	4619      	mov	r1, r3
 8001d26:	6838      	ldr	r0, [r7, #0]
 8001d28:	f7ff ffb6 	bl	8001c98 <MPU_SPI_Read>
}
 8001d2c:	bf00      	nop
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <whoAmI>:

/* gets the MPU6500 WHO_AM_I register value, expected to be 0x71 */
static uint8_t whoAmI()
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
    uint8_t data;
    // read the WHO AM I register
    mpu6500_read_registers(WHO_AM_I, 1, &data);
 8001d3a:	2075      	movs	r0, #117	@ 0x75
 8001d3c:	1dfb      	adds	r3, r7, #7
 8001d3e:	461a      	mov	r2, r3
 8001d40:	2101      	movs	r1, #1
 8001d42:	f7ff ffe4 	bl	8001d0e <mpu6500_read_registers>

    // return the register value
    return data;
 8001d46:	79fb      	ldrb	r3, [r7, #7]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <mpu6500_init>:

/* starts communication with the MP6500 */
HAL_StatusTypeDef mpu6500_init() //Careful with this, don't use it since Im p sure other things cover it
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b088      	sub	sp, #32
 8001d54:	af02      	add	r7, sp, #8
    /* Initialising the GPIO of Chip select */
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d56:	463b      	mov	r3, r7
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
 8001d62:	611a      	str	r2, [r3, #16]
    HAL_StatusTypeDef err = HAL_SPI_Init(&hspi1);
    HAL_ERROR_CHECK(err == HAL_OK, "Failed to initialise the SPI Driver", err);
    */

    // select clock source to gyro
    mpu6500_write_register(PWR_MGMNT_1, CLOCK_SEL_PLL);
 8001d64:	236b      	movs	r3, #107	@ 0x6b
 8001d66:	2201      	movs	r2, #1
 8001d68:	4611      	mov	r1, r2
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff ffba 	bl	8001ce4 <mpu6500_write_register>
    // enable I2C master mode
    mpu6500_write_register(USER_CTRL, I2C_MST_EN);
 8001d70:	236a      	movs	r3, #106	@ 0x6a
 8001d72:	2220      	movs	r2, #32
 8001d74:	4611      	mov	r1, r2
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff ffb4 	bl	8001ce4 <mpu6500_write_register>
    // set the I2C bus speed to 400 kHz
    mpu6500_write_register(I2C_MST_CTRL, I2C_MST_CLK);
 8001d7c:	2324      	movs	r3, #36	@ 0x24
 8001d7e:	220d      	movs	r2, #13
 8001d80:	4611      	mov	r1, r2
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff ffae 	bl	8001ce4 <mpu6500_write_register>

    // reset the MPU6500
    mpu6500_write_register(PWR_MGMNT_1, PWR_RESET);
 8001d88:	236b      	movs	r3, #107	@ 0x6b
 8001d8a:	2280      	movs	r2, #128	@ 0x80
 8001d8c:	4611      	mov	r1, r2
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff ffa8 	bl	8001ce4 <mpu6500_write_register>
    // wait for MPU-6500 to come back up
    HAL_Delay(10);
 8001d94:	200a      	movs	r0, #10
 8001d96:	f000 f8ff 	bl	8001f98 <HAL_Delay>
    
    // select clock source to gyro
    mpu6500_write_register(PWR_MGMNT_1, CLOCK_SEL_PLL);
 8001d9a:	236b      	movs	r3, #107	@ 0x6b
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	4611      	mov	r1, r2
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff ff9f 	bl	8001ce4 <mpu6500_write_register>

    // check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
    uint8_t who = 0;
 8001da6:	2300      	movs	r3, #0
 8001da8:	75fb      	strb	r3, [r7, #23]
    who = whoAmI();
 8001daa:	f7ff ffc3 	bl	8001d34 <whoAmI>
 8001dae:	4603      	mov	r3, r0
 8001db0:	75fb      	strb	r3, [r7, #23]
    HAL_ERROR_CHECK(who == 0x70, "Unable to verify the address of whoami register", HAL_ERROR);
 8001db2:	7dfb      	ldrb	r3, [r7, #23]
 8001db4:	2b70      	cmp	r3, #112	@ 0x70
 8001db6:	d013      	beq.n	8001de0 <mpu6500_init+0x90>
 8001db8:	2001      	movs	r0, #1
 8001dba:	f7ff fec1 	bl	8001b40 <set_log_level>
 8001dbe:	f000 f8df 	bl	8001f80 <HAL_GetTick>
 8001dc2:	4601      	mov	r1, r0
 8001dc4:	4b23      	ldr	r3, [pc, #140]	@ (8001e54 <mpu6500_init+0x104>)
 8001dc6:	9301      	str	r3, [sp, #4]
 8001dc8:	2387      	movs	r3, #135	@ 0x87
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	4b22      	ldr	r3, [pc, #136]	@ (8001e58 <mpu6500_init+0x108>)
 8001dce:	4a23      	ldr	r2, [pc, #140]	@ (8001e5c <mpu6500_init+0x10c>)
 8001dd0:	4823      	ldr	r0, [pc, #140]	@ (8001e60 <mpu6500_init+0x110>)
 8001dd2:	f004 f9f3 	bl	80061bc <iprintf>
 8001dd6:	200a      	movs	r0, #10
 8001dd8:	f004 fa02 	bl	80061e0 <putchar>
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e035      	b.n	8001e4c <mpu6500_init+0xfc>

    // enable accelerometer and gyro
    mpu6500_write_register(PWR_MGMNT_2, SEN_ENABLE);
 8001de0:	236c      	movs	r3, #108	@ 0x6c
 8001de2:	2200      	movs	r2, #0
 8001de4:	4611      	mov	r1, r2
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff ff7c 	bl	8001ce4 <mpu6500_write_register>

    // setting accel range to 16G as default
    mpu6500_write_register(ACCEL_CONFIG, ACCEL_FS_SEL_16G);
 8001dec:	231c      	movs	r3, #28
 8001dee:	2218      	movs	r2, #24
 8001df0:	4611      	mov	r1, r2
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff ff76 	bl	8001ce4 <mpu6500_write_register>

    // setting the gyro range to 2000DPS as default
    mpu6500_write_register(GYRO_CONFIG, GYRO_FS_SEL_250DPS);
 8001df8:	231b      	movs	r3, #27
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	4611      	mov	r1, r2
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff ff70 	bl	8001ce4 <mpu6500_write_register>

    // setting bandwidth to 184Hz as default
    mpu6500_write_register(ACCEL_CONFIG2, DLPF_184);
 8001e04:	231d      	movs	r3, #29
 8001e06:	2201      	movs	r2, #1
 8001e08:	4611      	mov	r1, r2
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff ff6a 	bl	8001ce4 <mpu6500_write_register>

    // setting gyro bandwidth to 184Hz
    mpu6500_write_register(CONFIG, DLPF_184);
 8001e10:	231a      	movs	r3, #26
 8001e12:	2201      	movs	r2, #1
 8001e14:	4611      	mov	r1, r2
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff ff64 	bl	8001ce4 <mpu6500_write_register>

    // setting the sample rate divider to 0 as default
    mpu6500_write_register(SMPDIV, 0x00);
 8001e1c:	2319      	movs	r3, #25
 8001e1e:	2100      	movs	r1, #0
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ff5f 	bl	8001ce4 <mpu6500_write_register>

    // enable I2C master mode
    mpu6500_write_register(USER_CTRL, I2C_MST_EN);
 8001e26:	236a      	movs	r3, #106	@ 0x6a
 8001e28:	2220      	movs	r2, #32
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff ff59 	bl	8001ce4 <mpu6500_write_register>

    // set the I2C bus speed to 400 kHz
    mpu6500_write_register(I2C_MST_CTRL, I2C_MST_CLK);
 8001e32:	2324      	movs	r3, #36	@ 0x24
 8001e34:	220d      	movs	r2, #13
 8001e36:	4611      	mov	r1, r2
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ff53 	bl	8001ce4 <mpu6500_write_register>

    // select clock source to gyro
    mpu6500_write_register(PWR_MGMNT_1, CLOCK_SEL_PLL);
 8001e3e:	236b      	movs	r3, #107	@ 0x6b
 8001e40:	2201      	movs	r2, #1
 8001e42:	4611      	mov	r1, r2
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff ff4d 	bl	8001ce4 <mpu6500_write_register>

    // successful init, return 0
    return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	08006e08 	.word	0x08006e08
 8001e58:	08006e50 	.word	0x08006e50
 8001e5c:	08006dec 	.word	0x08006dec
 8001e60:	08006df4 	.word	0x08006df4

08001e64 <mpu6500_get_data>:
    mpu6500_write_register(ACCEL_CONFIG2, bandwidth);
    mpu6500_write_register(CONFIG, bandwidth);
}
/* read the data, each argiment should point to a array for x, y, and x */
void mpu6500_get_data(int16_t *AccData, int16_t *GyroData)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
    // grab the data from the MPU6500
    mpu6500_read_registers(ACCEL_OUT, 14, _buffer);
 8001e6e:	233b      	movs	r3, #59	@ 0x3b
 8001e70:	4a27      	ldr	r2, [pc, #156]	@ (8001f10 <mpu6500_get_data+0xac>)
 8001e72:	210e      	movs	r1, #14
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff4a 	bl	8001d0e <mpu6500_read_registers>

    // combine into 16 bit values
    AccData[0] = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 8001e7a:	4b25      	ldr	r3, [pc, #148]	@ (8001f10 <mpu6500_get_data+0xac>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	021b      	lsls	r3, r3, #8
 8001e80:	b21a      	sxth	r2, r3
 8001e82:	4b23      	ldr	r3, [pc, #140]	@ (8001f10 <mpu6500_get_data+0xac>)
 8001e84:	785b      	ldrb	r3, [r3, #1]
 8001e86:	b21b      	sxth	r3, r3
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	b21a      	sxth	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	801a      	strh	r2, [r3, #0]
    AccData[1] = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 8001e90:	4b1f      	ldr	r3, [pc, #124]	@ (8001f10 <mpu6500_get_data+0xac>)
 8001e92:	789b      	ldrb	r3, [r3, #2]
 8001e94:	021b      	lsls	r3, r3, #8
 8001e96:	b219      	sxth	r1, r3
 8001e98:	4b1d      	ldr	r3, [pc, #116]	@ (8001f10 <mpu6500_get_data+0xac>)
 8001e9a:	78db      	ldrb	r3, [r3, #3]
 8001e9c:	b21a      	sxth	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	3302      	adds	r3, #2
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	b212      	sxth	r2, r2
 8001ea6:	801a      	strh	r2, [r3, #0]
    AccData[2] = (((int16_t)_buffer[4]) << 8) | _buffer[5];
 8001ea8:	4b19      	ldr	r3, [pc, #100]	@ (8001f10 <mpu6500_get_data+0xac>)
 8001eaa:	791b      	ldrb	r3, [r3, #4]
 8001eac:	021b      	lsls	r3, r3, #8
 8001eae:	b219      	sxth	r1, r3
 8001eb0:	4b17      	ldr	r3, [pc, #92]	@ (8001f10 <mpu6500_get_data+0xac>)
 8001eb2:	795b      	ldrb	r3, [r3, #5]
 8001eb4:	b21a      	sxth	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3304      	adds	r3, #4
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	b212      	sxth	r2, r2
 8001ebe:	801a      	strh	r2, [r3, #0]
    GyroData[0] = (((int16_t)_buffer[8]) << 8) | _buffer[9];
 8001ec0:	4b13      	ldr	r3, [pc, #76]	@ (8001f10 <mpu6500_get_data+0xac>)
 8001ec2:	7a1b      	ldrb	r3, [r3, #8]
 8001ec4:	021b      	lsls	r3, r3, #8
 8001ec6:	b21a      	sxth	r2, r3
 8001ec8:	4b11      	ldr	r3, [pc, #68]	@ (8001f10 <mpu6500_get_data+0xac>)
 8001eca:	7a5b      	ldrb	r3, [r3, #9]
 8001ecc:	b21b      	sxth	r3, r3
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	b21a      	sxth	r2, r3
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	801a      	strh	r2, [r3, #0]
    GyroData[1] = (((int16_t)_buffer[10]) << 8) | _buffer[11];
 8001ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f10 <mpu6500_get_data+0xac>)
 8001ed8:	7a9b      	ldrb	r3, [r3, #10]
 8001eda:	021b      	lsls	r3, r3, #8
 8001edc:	b219      	sxth	r1, r3
 8001ede:	4b0c      	ldr	r3, [pc, #48]	@ (8001f10 <mpu6500_get_data+0xac>)
 8001ee0:	7adb      	ldrb	r3, [r3, #11]
 8001ee2:	b21a      	sxth	r2, r3
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	3302      	adds	r3, #2
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	b212      	sxth	r2, r2
 8001eec:	801a      	strh	r2, [r3, #0]
    GyroData[2] = (((int16_t)_buffer[12]) << 8) | _buffer[13];
 8001eee:	4b08      	ldr	r3, [pc, #32]	@ (8001f10 <mpu6500_get_data+0xac>)
 8001ef0:	7b1b      	ldrb	r3, [r3, #12]
 8001ef2:	021b      	lsls	r3, r3, #8
 8001ef4:	b219      	sxth	r1, r3
 8001ef6:	4b06      	ldr	r3, [pc, #24]	@ (8001f10 <mpu6500_get_data+0xac>)
 8001ef8:	7b5b      	ldrb	r3, [r3, #13]
 8001efa:	b21a      	sxth	r2, r3
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	3304      	adds	r3, #4
 8001f00:	430a      	orrs	r2, r1
 8001f02:	b212      	sxth	r2, r2
 8001f04:	801a      	strh	r2, [r3, #0]
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20000498 	.word	0x20000498

08001f14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f18:	4b0e      	ldr	r3, [pc, #56]	@ (8001f54 <HAL_Init+0x40>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f54 <HAL_Init+0x40>)
 8001f1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f24:	4b0b      	ldr	r3, [pc, #44]	@ (8001f54 <HAL_Init+0x40>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a0a      	ldr	r2, [pc, #40]	@ (8001f54 <HAL_Init+0x40>)
 8001f2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f30:	4b08      	ldr	r3, [pc, #32]	@ (8001f54 <HAL_Init+0x40>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a07      	ldr	r2, [pc, #28]	@ (8001f54 <HAL_Init+0x40>)
 8001f36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f3c:	2003      	movs	r0, #3
 8001f3e:	f000 fb5e 	bl	80025fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f42:	200f      	movs	r0, #15
 8001f44:	f7fe ffb8 	bl	8000eb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f48:	f7fe ff8a 	bl	8000e60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40023c00 	.word	0x40023c00

08001f58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f5c:	4b06      	ldr	r3, [pc, #24]	@ (8001f78 <HAL_IncTick+0x20>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	461a      	mov	r2, r3
 8001f62:	4b06      	ldr	r3, [pc, #24]	@ (8001f7c <HAL_IncTick+0x24>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4413      	add	r3, r2
 8001f68:	4a04      	ldr	r2, [pc, #16]	@ (8001f7c <HAL_IncTick+0x24>)
 8001f6a:	6013      	str	r3, [r2, #0]
}
 8001f6c:	bf00      	nop
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	20000008 	.word	0x20000008
 8001f7c:	200004a8 	.word	0x200004a8

08001f80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  return uwTick;
 8001f84:	4b03      	ldr	r3, [pc, #12]	@ (8001f94 <HAL_GetTick+0x14>)
 8001f86:	681b      	ldr	r3, [r3, #0]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	200004a8 	.word	0x200004a8

08001f98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fa0:	f7ff ffee 	bl	8001f80 <HAL_GetTick>
 8001fa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb0:	d005      	beq.n	8001fbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8001fdc <HAL_Delay+0x44>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4413      	add	r3, r2
 8001fbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fbe:	bf00      	nop
 8001fc0:	f7ff ffde 	bl	8001f80 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d8f7      	bhi.n	8001fc0 <HAL_Delay+0x28>
  {
  }
}
 8001fd0:	bf00      	nop
 8001fd2:	bf00      	nop
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20000008 	.word	0x20000008

08001fe0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e033      	b.n	800205e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d109      	bne.n	8002012 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7fe fb38 	bl	8000674 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002016:	f003 0310 	and.w	r3, r3, #16
 800201a:	2b00      	cmp	r3, #0
 800201c:	d118      	bne.n	8002050 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002022:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002026:	f023 0302 	bic.w	r3, r3, #2
 800202a:	f043 0202 	orr.w	r2, r3, #2
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f93a 	bl	80022ac <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002042:	f023 0303 	bic.w	r3, r3, #3
 8002046:	f043 0201 	orr.w	r2, r3, #1
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	641a      	str	r2, [r3, #64]	@ 0x40
 800204e:	e001      	b.n	8002054 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800205c:	7bfb      	ldrb	r3, [r7, #15]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
	...

08002068 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002072:	2300      	movs	r3, #0
 8002074:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800207c:	2b01      	cmp	r3, #1
 800207e:	d101      	bne.n	8002084 <HAL_ADC_ConfigChannel+0x1c>
 8002080:	2302      	movs	r3, #2
 8002082:	e105      	b.n	8002290 <HAL_ADC_ConfigChannel+0x228>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2b09      	cmp	r3, #9
 8002092:	d925      	bls.n	80020e0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68d9      	ldr	r1, [r3, #12]
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	b29b      	uxth	r3, r3
 80020a0:	461a      	mov	r2, r3
 80020a2:	4613      	mov	r3, r2
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	4413      	add	r3, r2
 80020a8:	3b1e      	subs	r3, #30
 80020aa:	2207      	movs	r2, #7
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	43da      	mvns	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	400a      	ands	r2, r1
 80020b8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68d9      	ldr	r1, [r3, #12]
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	4618      	mov	r0, r3
 80020cc:	4603      	mov	r3, r0
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	4403      	add	r3, r0
 80020d2:	3b1e      	subs	r3, #30
 80020d4:	409a      	lsls	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	430a      	orrs	r2, r1
 80020dc:	60da      	str	r2, [r3, #12]
 80020de:	e022      	b.n	8002126 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6919      	ldr	r1, [r3, #16]
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	461a      	mov	r2, r3
 80020ee:	4613      	mov	r3, r2
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	4413      	add	r3, r2
 80020f4:	2207      	movs	r2, #7
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43da      	mvns	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	400a      	ands	r2, r1
 8002102:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6919      	ldr	r1, [r3, #16]
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	689a      	ldr	r2, [r3, #8]
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	b29b      	uxth	r3, r3
 8002114:	4618      	mov	r0, r3
 8002116:	4603      	mov	r3, r0
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	4403      	add	r3, r0
 800211c:	409a      	lsls	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b06      	cmp	r3, #6
 800212c:	d824      	bhi.n	8002178 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	3b05      	subs	r3, #5
 8002140:	221f      	movs	r2, #31
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43da      	mvns	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	400a      	ands	r2, r1
 800214e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	b29b      	uxth	r3, r3
 800215c:	4618      	mov	r0, r3
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685a      	ldr	r2, [r3, #4]
 8002162:	4613      	mov	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	3b05      	subs	r3, #5
 800216a:	fa00 f203 	lsl.w	r2, r0, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	430a      	orrs	r2, r1
 8002174:	635a      	str	r2, [r3, #52]	@ 0x34
 8002176:	e04c      	b.n	8002212 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2b0c      	cmp	r3, #12
 800217e:	d824      	bhi.n	80021ca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685a      	ldr	r2, [r3, #4]
 800218a:	4613      	mov	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	3b23      	subs	r3, #35	@ 0x23
 8002192:	221f      	movs	r2, #31
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43da      	mvns	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	400a      	ands	r2, r1
 80021a0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	4618      	mov	r0, r3
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	4613      	mov	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	3b23      	subs	r3, #35	@ 0x23
 80021bc:	fa00 f203 	lsl.w	r2, r0, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80021c8:	e023      	b.n	8002212 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	4613      	mov	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	3b41      	subs	r3, #65	@ 0x41
 80021dc:	221f      	movs	r2, #31
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43da      	mvns	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	400a      	ands	r2, r1
 80021ea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	4618      	mov	r0, r3
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	3b41      	subs	r3, #65	@ 0x41
 8002206:	fa00 f203 	lsl.w	r2, r0, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	430a      	orrs	r2, r1
 8002210:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002212:	4b22      	ldr	r3, [pc, #136]	@ (800229c <HAL_ADC_ConfigChannel+0x234>)
 8002214:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a21      	ldr	r2, [pc, #132]	@ (80022a0 <HAL_ADC_ConfigChannel+0x238>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d109      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x1cc>
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2b12      	cmp	r3, #18
 8002226:	d105      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a19      	ldr	r2, [pc, #100]	@ (80022a0 <HAL_ADC_ConfigChannel+0x238>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d123      	bne.n	8002286 <HAL_ADC_ConfigChannel+0x21e>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2b10      	cmp	r3, #16
 8002244:	d003      	beq.n	800224e <HAL_ADC_ConfigChannel+0x1e6>
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2b11      	cmp	r3, #17
 800224c:	d11b      	bne.n	8002286 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2b10      	cmp	r3, #16
 8002260:	d111      	bne.n	8002286 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002262:	4b10      	ldr	r3, [pc, #64]	@ (80022a4 <HAL_ADC_ConfigChannel+0x23c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a10      	ldr	r2, [pc, #64]	@ (80022a8 <HAL_ADC_ConfigChannel+0x240>)
 8002268:	fba2 2303 	umull	r2, r3, r2, r3
 800226c:	0c9a      	lsrs	r2, r3, #18
 800226e:	4613      	mov	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002278:	e002      	b.n	8002280 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	3b01      	subs	r3, #1
 800227e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1f9      	bne.n	800227a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	40012300 	.word	0x40012300
 80022a0:	40012000 	.word	0x40012000
 80022a4:	20000000 	.word	0x20000000
 80022a8:	431bde83 	.word	0x431bde83

080022ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022b4:	4b79      	ldr	r3, [pc, #484]	@ (800249c <ADC_Init+0x1f0>)
 80022b6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	431a      	orrs	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6859      	ldr	r1, [r3, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	021a      	lsls	r2, r3, #8
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002304:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6859      	ldr	r1, [r3, #4]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	430a      	orrs	r2, r1
 8002316:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002326:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6899      	ldr	r1, [r3, #8]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68da      	ldr	r2, [r3, #12]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	430a      	orrs	r2, r1
 8002338:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800233e:	4a58      	ldr	r2, [pc, #352]	@ (80024a0 <ADC_Init+0x1f4>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d022      	beq.n	800238a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689a      	ldr	r2, [r3, #8]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002352:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6899      	ldr	r1, [r3, #8]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	430a      	orrs	r2, r1
 8002364:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002374:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6899      	ldr	r1, [r3, #8]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	609a      	str	r2, [r3, #8]
 8002388:	e00f      	b.n	80023aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002398:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80023a8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 0202 	bic.w	r2, r2, #2
 80023b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6899      	ldr	r1, [r3, #8]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	7e1b      	ldrb	r3, [r3, #24]
 80023c4:	005a      	lsls	r2, r3, #1
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d01b      	beq.n	8002410 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023e6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80023f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6859      	ldr	r1, [r3, #4]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002402:	3b01      	subs	r3, #1
 8002404:	035a      	lsls	r2, r3, #13
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	430a      	orrs	r2, r1
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	e007      	b.n	8002420 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800241e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800242e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	3b01      	subs	r3, #1
 800243c:	051a      	lsls	r2, r3, #20
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	430a      	orrs	r2, r1
 8002444:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002454:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6899      	ldr	r1, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002462:	025a      	lsls	r2, r3, #9
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	430a      	orrs	r2, r1
 800246a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800247a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6899      	ldr	r1, [r3, #8]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	029a      	lsls	r2, r3, #10
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	430a      	orrs	r2, r1
 800248e:	609a      	str	r2, [r3, #8]
}
 8002490:	bf00      	nop
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	40012300 	.word	0x40012300
 80024a0:	0f000001 	.word	0x0f000001

080024a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024b4:	4b0c      	ldr	r3, [pc, #48]	@ (80024e8 <__NVIC_SetPriorityGrouping+0x44>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024c0:	4013      	ands	r3, r2
 80024c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024d6:	4a04      	ldr	r2, [pc, #16]	@ (80024e8 <__NVIC_SetPriorityGrouping+0x44>)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	60d3      	str	r3, [r2, #12]
}
 80024dc:	bf00      	nop
 80024de:	3714      	adds	r7, #20
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	e000ed00 	.word	0xe000ed00

080024ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024f0:	4b04      	ldr	r3, [pc, #16]	@ (8002504 <__NVIC_GetPriorityGrouping+0x18>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	0a1b      	lsrs	r3, r3, #8
 80024f6:	f003 0307 	and.w	r3, r3, #7
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	e000ed00 	.word	0xe000ed00

08002508 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	2b00      	cmp	r3, #0
 8002518:	db0b      	blt.n	8002532 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800251a:	79fb      	ldrb	r3, [r7, #7]
 800251c:	f003 021f 	and.w	r2, r3, #31
 8002520:	4907      	ldr	r1, [pc, #28]	@ (8002540 <__NVIC_EnableIRQ+0x38>)
 8002522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002526:	095b      	lsrs	r3, r3, #5
 8002528:	2001      	movs	r0, #1
 800252a:	fa00 f202 	lsl.w	r2, r0, r2
 800252e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	e000e100 	.word	0xe000e100

08002544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	6039      	str	r1, [r7, #0]
 800254e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002554:	2b00      	cmp	r3, #0
 8002556:	db0a      	blt.n	800256e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	b2da      	uxtb	r2, r3
 800255c:	490c      	ldr	r1, [pc, #48]	@ (8002590 <__NVIC_SetPriority+0x4c>)
 800255e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002562:	0112      	lsls	r2, r2, #4
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	440b      	add	r3, r1
 8002568:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800256c:	e00a      	b.n	8002584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	b2da      	uxtb	r2, r3
 8002572:	4908      	ldr	r1, [pc, #32]	@ (8002594 <__NVIC_SetPriority+0x50>)
 8002574:	79fb      	ldrb	r3, [r7, #7]
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	3b04      	subs	r3, #4
 800257c:	0112      	lsls	r2, r2, #4
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	440b      	add	r3, r1
 8002582:	761a      	strb	r2, [r3, #24]
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	e000e100 	.word	0xe000e100
 8002594:	e000ed00 	.word	0xe000ed00

08002598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002598:	b480      	push	{r7}
 800259a:	b089      	sub	sp, #36	@ 0x24
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	f1c3 0307 	rsb	r3, r3, #7
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	bf28      	it	cs
 80025b6:	2304      	movcs	r3, #4
 80025b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	3304      	adds	r3, #4
 80025be:	2b06      	cmp	r3, #6
 80025c0:	d902      	bls.n	80025c8 <NVIC_EncodePriority+0x30>
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	3b03      	subs	r3, #3
 80025c6:	e000      	b.n	80025ca <NVIC_EncodePriority+0x32>
 80025c8:	2300      	movs	r3, #0
 80025ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025cc:	f04f 32ff 	mov.w	r2, #4294967295
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43da      	mvns	r2, r3
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	401a      	ands	r2, r3
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025e0:	f04f 31ff 	mov.w	r1, #4294967295
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ea:	43d9      	mvns	r1, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f0:	4313      	orrs	r3, r2
         );
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3724      	adds	r7, #36	@ 0x24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff ff4c 	bl	80024a4 <__NVIC_SetPriorityGrouping>
}
 800260c:	bf00      	nop
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
 8002620:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002622:	2300      	movs	r3, #0
 8002624:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002626:	f7ff ff61 	bl	80024ec <__NVIC_GetPriorityGrouping>
 800262a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	68b9      	ldr	r1, [r7, #8]
 8002630:	6978      	ldr	r0, [r7, #20]
 8002632:	f7ff ffb1 	bl	8002598 <NVIC_EncodePriority>
 8002636:	4602      	mov	r2, r0
 8002638:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800263c:	4611      	mov	r1, r2
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff ff80 	bl	8002544 <__NVIC_SetPriority>
}
 8002644:	bf00      	nop
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff ff54 	bl	8002508 <__NVIC_EnableIRQ>
}
 8002660:	bf00      	nop
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002674:	f7ff fc84 	bl	8001f80 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e099      	b.n	80027b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2202      	movs	r2, #2
 8002688:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 0201 	bic.w	r2, r2, #1
 80026a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026a4:	e00f      	b.n	80026c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026a6:	f7ff fc6b 	bl	8001f80 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b05      	cmp	r3, #5
 80026b2:	d908      	bls.n	80026c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2220      	movs	r2, #32
 80026b8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2203      	movs	r2, #3
 80026be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e078      	b.n	80027b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1e8      	bne.n	80026a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	4b38      	ldr	r3, [pc, #224]	@ (80027c0 <HAL_DMA_Init+0x158>)
 80026e0:	4013      	ands	r3, r2
 80026e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800270a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	4313      	orrs	r3, r2
 8002716:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271c:	2b04      	cmp	r3, #4
 800271e:	d107      	bne.n	8002730 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002728:	4313      	orrs	r3, r2
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	4313      	orrs	r3, r2
 800272e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	f023 0307 	bic.w	r3, r3, #7
 8002746:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	4313      	orrs	r3, r2
 8002750:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002756:	2b04      	cmp	r3, #4
 8002758:	d117      	bne.n	800278a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	4313      	orrs	r3, r2
 8002762:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00e      	beq.n	800278a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 f9e9 	bl	8002b44 <DMA_CheckFifoParam>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d008      	beq.n	800278a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2240      	movs	r2, #64	@ 0x40
 800277c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002786:	2301      	movs	r3, #1
 8002788:	e016      	b.n	80027b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f9a0 	bl	8002ad8 <DMA_CalcBaseAndBitshift>
 8002798:	4603      	mov	r3, r0
 800279a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027a0:	223f      	movs	r2, #63	@ 0x3f
 80027a2:	409a      	lsls	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3718      	adds	r7, #24
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	f010803f 	.word	0xf010803f

080027c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027d0:	4b8e      	ldr	r3, [pc, #568]	@ (8002a0c <HAL_DMA_IRQHandler+0x248>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a8e      	ldr	r2, [pc, #568]	@ (8002a10 <HAL_DMA_IRQHandler+0x24c>)
 80027d6:	fba2 2303 	umull	r2, r3, r2, r3
 80027da:	0a9b      	lsrs	r3, r3, #10
 80027dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ee:	2208      	movs	r2, #8
 80027f0:	409a      	lsls	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	4013      	ands	r3, r2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d01a      	beq.n	8002830 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	2b00      	cmp	r3, #0
 8002806:	d013      	beq.n	8002830 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 0204 	bic.w	r2, r2, #4
 8002816:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800281c:	2208      	movs	r2, #8
 800281e:	409a      	lsls	r2, r3
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002828:	f043 0201 	orr.w	r2, r3, #1
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002834:	2201      	movs	r2, #1
 8002836:	409a      	lsls	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4013      	ands	r3, r2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d012      	beq.n	8002866 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00b      	beq.n	8002866 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002852:	2201      	movs	r2, #1
 8002854:	409a      	lsls	r2, r3
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800285e:	f043 0202 	orr.w	r2, r3, #2
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800286a:	2204      	movs	r2, #4
 800286c:	409a      	lsls	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	4013      	ands	r3, r2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d012      	beq.n	800289c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00b      	beq.n	800289c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002888:	2204      	movs	r2, #4
 800288a:	409a      	lsls	r2, r3
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002894:	f043 0204 	orr.w	r2, r3, #4
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a0:	2210      	movs	r2, #16
 80028a2:	409a      	lsls	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	4013      	ands	r3, r2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d043      	beq.n	8002934 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d03c      	beq.n	8002934 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028be:	2210      	movs	r2, #16
 80028c0:	409a      	lsls	r2, r3
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d018      	beq.n	8002906 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d108      	bne.n	80028f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d024      	beq.n	8002934 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	4798      	blx	r3
 80028f2:	e01f      	b.n	8002934 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d01b      	beq.n	8002934 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	4798      	blx	r3
 8002904:	e016      	b.n	8002934 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002910:	2b00      	cmp	r3, #0
 8002912:	d107      	bne.n	8002924 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 0208 	bic.w	r2, r2, #8
 8002922:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002928:	2b00      	cmp	r3, #0
 800292a:	d003      	beq.n	8002934 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002938:	2220      	movs	r2, #32
 800293a:	409a      	lsls	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4013      	ands	r3, r2
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 808f 	beq.w	8002a64 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0310 	and.w	r3, r3, #16
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 8087 	beq.w	8002a64 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800295a:	2220      	movs	r2, #32
 800295c:	409a      	lsls	r2, r3
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b05      	cmp	r3, #5
 800296c:	d136      	bne.n	80029dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 0216 	bic.w	r2, r2, #22
 800297c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	695a      	ldr	r2, [r3, #20]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800298c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002992:	2b00      	cmp	r3, #0
 8002994:	d103      	bne.n	800299e <HAL_DMA_IRQHandler+0x1da>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800299a:	2b00      	cmp	r3, #0
 800299c:	d007      	beq.n	80029ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 0208 	bic.w	r2, r2, #8
 80029ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b2:	223f      	movs	r2, #63	@ 0x3f
 80029b4:	409a      	lsls	r2, r3
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d07e      	beq.n	8002ad0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	4798      	blx	r3
        }
        return;
 80029da:	e079      	b.n	8002ad0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d01d      	beq.n	8002a26 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d10d      	bne.n	8002a14 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d031      	beq.n	8002a64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	4798      	blx	r3
 8002a08:	e02c      	b.n	8002a64 <HAL_DMA_IRQHandler+0x2a0>
 8002a0a:	bf00      	nop
 8002a0c:	20000000 	.word	0x20000000
 8002a10:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d023      	beq.n	8002a64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	4798      	blx	r3
 8002a24:	e01e      	b.n	8002a64 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10f      	bne.n	8002a54 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 0210 	bic.w	r2, r2, #16
 8002a42:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d032      	beq.n	8002ad2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d022      	beq.n	8002abe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2205      	movs	r2, #5
 8002a7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0201 	bic.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	3301      	adds	r3, #1
 8002a94:	60bb      	str	r3, [r7, #8]
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d307      	bcc.n	8002aac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f2      	bne.n	8002a90 <HAL_DMA_IRQHandler+0x2cc>
 8002aaa:	e000      	b.n	8002aae <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002aac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d005      	beq.n	8002ad2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	4798      	blx	r3
 8002ace:	e000      	b.n	8002ad2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ad0:	bf00      	nop
    }
  }
}
 8002ad2:	3718      	adds	r7, #24
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	3b10      	subs	r3, #16
 8002ae8:	4a14      	ldr	r2, [pc, #80]	@ (8002b3c <DMA_CalcBaseAndBitshift+0x64>)
 8002aea:	fba2 2303 	umull	r2, r3, r2, r3
 8002aee:	091b      	lsrs	r3, r3, #4
 8002af0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002af2:	4a13      	ldr	r2, [pc, #76]	@ (8002b40 <DMA_CalcBaseAndBitshift+0x68>)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4413      	add	r3, r2
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	461a      	mov	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2b03      	cmp	r3, #3
 8002b04:	d909      	bls.n	8002b1a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002b0e:	f023 0303 	bic.w	r3, r3, #3
 8002b12:	1d1a      	adds	r2, r3, #4
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	659a      	str	r2, [r3, #88]	@ 0x58
 8002b18:	e007      	b.n	8002b2a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002b22:	f023 0303 	bic.w	r3, r3, #3
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3714      	adds	r7, #20
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	aaaaaaab 	.word	0xaaaaaaab
 8002b40:	08006e60 	.word	0x08006e60

08002b44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d11f      	bne.n	8002b9e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	2b03      	cmp	r3, #3
 8002b62:	d856      	bhi.n	8002c12 <DMA_CheckFifoParam+0xce>
 8002b64:	a201      	add	r2, pc, #4	@ (adr r2, 8002b6c <DMA_CheckFifoParam+0x28>)
 8002b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b6a:	bf00      	nop
 8002b6c:	08002b7d 	.word	0x08002b7d
 8002b70:	08002b8f 	.word	0x08002b8f
 8002b74:	08002b7d 	.word	0x08002b7d
 8002b78:	08002c13 	.word	0x08002c13
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d046      	beq.n	8002c16 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b8c:	e043      	b.n	8002c16 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b92:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002b96:	d140      	bne.n	8002c1a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b9c:	e03d      	b.n	8002c1a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ba6:	d121      	bne.n	8002bec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	2b03      	cmp	r3, #3
 8002bac:	d837      	bhi.n	8002c1e <DMA_CheckFifoParam+0xda>
 8002bae:	a201      	add	r2, pc, #4	@ (adr r2, 8002bb4 <DMA_CheckFifoParam+0x70>)
 8002bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb4:	08002bc5 	.word	0x08002bc5
 8002bb8:	08002bcb 	.word	0x08002bcb
 8002bbc:	08002bc5 	.word	0x08002bc5
 8002bc0:	08002bdd 	.word	0x08002bdd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8002bc8:	e030      	b.n	8002c2c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d025      	beq.n	8002c22 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bda:	e022      	b.n	8002c22 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002be4:	d11f      	bne.n	8002c26 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002bea:	e01c      	b.n	8002c26 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d903      	bls.n	8002bfa <DMA_CheckFifoParam+0xb6>
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	2b03      	cmp	r3, #3
 8002bf6:	d003      	beq.n	8002c00 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002bf8:	e018      	b.n	8002c2c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	73fb      	strb	r3, [r7, #15]
      break;
 8002bfe:	e015      	b.n	8002c2c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00e      	beq.n	8002c2a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c10:	e00b      	b.n	8002c2a <DMA_CheckFifoParam+0xe6>
      break;
 8002c12:	bf00      	nop
 8002c14:	e00a      	b.n	8002c2c <DMA_CheckFifoParam+0xe8>
      break;
 8002c16:	bf00      	nop
 8002c18:	e008      	b.n	8002c2c <DMA_CheckFifoParam+0xe8>
      break;
 8002c1a:	bf00      	nop
 8002c1c:	e006      	b.n	8002c2c <DMA_CheckFifoParam+0xe8>
      break;
 8002c1e:	bf00      	nop
 8002c20:	e004      	b.n	8002c2c <DMA_CheckFifoParam+0xe8>
      break;
 8002c22:	bf00      	nop
 8002c24:	e002      	b.n	8002c2c <DMA_CheckFifoParam+0xe8>
      break;   
 8002c26:	bf00      	nop
 8002c28:	e000      	b.n	8002c2c <DMA_CheckFifoParam+0xe8>
      break;
 8002c2a:	bf00      	nop
    }
  } 
  
  return status; 
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3714      	adds	r7, #20
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop

08002c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b089      	sub	sp, #36	@ 0x24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c46:	2300      	movs	r3, #0
 8002c48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c52:	2300      	movs	r3, #0
 8002c54:	61fb      	str	r3, [r7, #28]
 8002c56:	e16b      	b.n	8002f30 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c58:	2201      	movs	r2, #1
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	f040 815a 	bne.w	8002f2a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f003 0303 	and.w	r3, r3, #3
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d005      	beq.n	8002c8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d130      	bne.n	8002cf0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	2203      	movs	r2, #3
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	43db      	mvns	r3, r3
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	68da      	ldr	r2, [r3, #12]
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	091b      	lsrs	r3, r3, #4
 8002cda:	f003 0201 	and.w	r2, r3, #1
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f003 0303 	and.w	r3, r3, #3
 8002cf8:	2b03      	cmp	r3, #3
 8002cfa:	d017      	beq.n	8002d2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	2203      	movs	r2, #3
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4013      	ands	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f003 0303 	and.w	r3, r3, #3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d123      	bne.n	8002d80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	08da      	lsrs	r2, r3, #3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3208      	adds	r2, #8
 8002d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	220f      	movs	r2, #15
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	43db      	mvns	r3, r3
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	691a      	ldr	r2, [r3, #16]
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	08da      	lsrs	r2, r3, #3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	3208      	adds	r2, #8
 8002d7a:	69b9      	ldr	r1, [r7, #24]
 8002d7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	2203      	movs	r2, #3
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	43db      	mvns	r3, r3
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	4013      	ands	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f003 0203 	and.w	r2, r3, #3
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 80b4 	beq.w	8002f2a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60fb      	str	r3, [r7, #12]
 8002dc6:	4b60      	ldr	r3, [pc, #384]	@ (8002f48 <HAL_GPIO_Init+0x30c>)
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dca:	4a5f      	ldr	r2, [pc, #380]	@ (8002f48 <HAL_GPIO_Init+0x30c>)
 8002dcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002dd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dd2:	4b5d      	ldr	r3, [pc, #372]	@ (8002f48 <HAL_GPIO_Init+0x30c>)
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dda:	60fb      	str	r3, [r7, #12]
 8002ddc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dde:	4a5b      	ldr	r2, [pc, #364]	@ (8002f4c <HAL_GPIO_Init+0x310>)
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	089b      	lsrs	r3, r3, #2
 8002de4:	3302      	adds	r3, #2
 8002de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	f003 0303 	and.w	r3, r3, #3
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	220f      	movs	r2, #15
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a52      	ldr	r2, [pc, #328]	@ (8002f50 <HAL_GPIO_Init+0x314>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d02b      	beq.n	8002e62 <HAL_GPIO_Init+0x226>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a51      	ldr	r2, [pc, #324]	@ (8002f54 <HAL_GPIO_Init+0x318>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d025      	beq.n	8002e5e <HAL_GPIO_Init+0x222>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a50      	ldr	r2, [pc, #320]	@ (8002f58 <HAL_GPIO_Init+0x31c>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d01f      	beq.n	8002e5a <HAL_GPIO_Init+0x21e>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a4f      	ldr	r2, [pc, #316]	@ (8002f5c <HAL_GPIO_Init+0x320>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d019      	beq.n	8002e56 <HAL_GPIO_Init+0x21a>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a4e      	ldr	r2, [pc, #312]	@ (8002f60 <HAL_GPIO_Init+0x324>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d013      	beq.n	8002e52 <HAL_GPIO_Init+0x216>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a4d      	ldr	r2, [pc, #308]	@ (8002f64 <HAL_GPIO_Init+0x328>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d00d      	beq.n	8002e4e <HAL_GPIO_Init+0x212>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a4c      	ldr	r2, [pc, #304]	@ (8002f68 <HAL_GPIO_Init+0x32c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d007      	beq.n	8002e4a <HAL_GPIO_Init+0x20e>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a4b      	ldr	r2, [pc, #300]	@ (8002f6c <HAL_GPIO_Init+0x330>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d101      	bne.n	8002e46 <HAL_GPIO_Init+0x20a>
 8002e42:	2307      	movs	r3, #7
 8002e44:	e00e      	b.n	8002e64 <HAL_GPIO_Init+0x228>
 8002e46:	2308      	movs	r3, #8
 8002e48:	e00c      	b.n	8002e64 <HAL_GPIO_Init+0x228>
 8002e4a:	2306      	movs	r3, #6
 8002e4c:	e00a      	b.n	8002e64 <HAL_GPIO_Init+0x228>
 8002e4e:	2305      	movs	r3, #5
 8002e50:	e008      	b.n	8002e64 <HAL_GPIO_Init+0x228>
 8002e52:	2304      	movs	r3, #4
 8002e54:	e006      	b.n	8002e64 <HAL_GPIO_Init+0x228>
 8002e56:	2303      	movs	r3, #3
 8002e58:	e004      	b.n	8002e64 <HAL_GPIO_Init+0x228>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e002      	b.n	8002e64 <HAL_GPIO_Init+0x228>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e000      	b.n	8002e64 <HAL_GPIO_Init+0x228>
 8002e62:	2300      	movs	r3, #0
 8002e64:	69fa      	ldr	r2, [r7, #28]
 8002e66:	f002 0203 	and.w	r2, r2, #3
 8002e6a:	0092      	lsls	r2, r2, #2
 8002e6c:	4093      	lsls	r3, r2
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e74:	4935      	ldr	r1, [pc, #212]	@ (8002f4c <HAL_GPIO_Init+0x310>)
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	089b      	lsrs	r3, r3, #2
 8002e7a:	3302      	adds	r3, #2
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e82:	4b3b      	ldr	r3, [pc, #236]	@ (8002f70 <HAL_GPIO_Init+0x334>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ea6:	4a32      	ldr	r2, [pc, #200]	@ (8002f70 <HAL_GPIO_Init+0x334>)
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002eac:	4b30      	ldr	r3, [pc, #192]	@ (8002f70 <HAL_GPIO_Init+0x334>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d003      	beq.n	8002ed0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ed0:	4a27      	ldr	r2, [pc, #156]	@ (8002f70 <HAL_GPIO_Init+0x334>)
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ed6:	4b26      	ldr	r3, [pc, #152]	@ (8002f70 <HAL_GPIO_Init+0x334>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002efa:	4a1d      	ldr	r2, [pc, #116]	@ (8002f70 <HAL_GPIO_Init+0x334>)
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f00:	4b1b      	ldr	r3, [pc, #108]	@ (8002f70 <HAL_GPIO_Init+0x334>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d003      	beq.n	8002f24 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f24:	4a12      	ldr	r2, [pc, #72]	@ (8002f70 <HAL_GPIO_Init+0x334>)
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	61fb      	str	r3, [r7, #28]
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	2b0f      	cmp	r3, #15
 8002f34:	f67f ae90 	bls.w	8002c58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f38:	bf00      	nop
 8002f3a:	bf00      	nop
 8002f3c:	3724      	adds	r7, #36	@ 0x24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	40013800 	.word	0x40013800
 8002f50:	40020000 	.word	0x40020000
 8002f54:	40020400 	.word	0x40020400
 8002f58:	40020800 	.word	0x40020800
 8002f5c:	40020c00 	.word	0x40020c00
 8002f60:	40021000 	.word	0x40021000
 8002f64:	40021400 	.word	0x40021400
 8002f68:	40021800 	.word	0x40021800
 8002f6c:	40021c00 	.word	0x40021c00
 8002f70:	40013c00 	.word	0x40013c00

08002f74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	807b      	strh	r3, [r7, #2]
 8002f80:	4613      	mov	r3, r2
 8002f82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f84:	787b      	ldrb	r3, [r7, #1]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f8a:	887a      	ldrh	r2, [r7, #2]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f90:	e003      	b.n	8002f9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f92:	887b      	ldrh	r3, [r7, #2]
 8002f94:	041a      	lsls	r2, r3, #16
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	619a      	str	r2, [r3, #24]
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
	...

08002fa8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e12b      	b.n	8003212 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d106      	bne.n	8002fd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7fd fd3a 	bl	8000a48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2224      	movs	r2, #36	@ 0x24
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0201 	bic.w	r2, r2, #1
 8002fea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ffa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800300a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800300c:	f000 fd40 	bl	8003a90 <HAL_RCC_GetPCLK1Freq>
 8003010:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	4a81      	ldr	r2, [pc, #516]	@ (800321c <HAL_I2C_Init+0x274>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d807      	bhi.n	800302c <HAL_I2C_Init+0x84>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4a80      	ldr	r2, [pc, #512]	@ (8003220 <HAL_I2C_Init+0x278>)
 8003020:	4293      	cmp	r3, r2
 8003022:	bf94      	ite	ls
 8003024:	2301      	movls	r3, #1
 8003026:	2300      	movhi	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	e006      	b.n	800303a <HAL_I2C_Init+0x92>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	4a7d      	ldr	r2, [pc, #500]	@ (8003224 <HAL_I2C_Init+0x27c>)
 8003030:	4293      	cmp	r3, r2
 8003032:	bf94      	ite	ls
 8003034:	2301      	movls	r3, #1
 8003036:	2300      	movhi	r3, #0
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e0e7      	b.n	8003212 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	4a78      	ldr	r2, [pc, #480]	@ (8003228 <HAL_I2C_Init+0x280>)
 8003046:	fba2 2303 	umull	r2, r3, r2, r3
 800304a:	0c9b      	lsrs	r3, r3, #18
 800304c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68ba      	ldr	r2, [r7, #8]
 800305e:	430a      	orrs	r2, r1
 8003060:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	4a6a      	ldr	r2, [pc, #424]	@ (800321c <HAL_I2C_Init+0x274>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d802      	bhi.n	800307c <HAL_I2C_Init+0xd4>
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	3301      	adds	r3, #1
 800307a:	e009      	b.n	8003090 <HAL_I2C_Init+0xe8>
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003082:	fb02 f303 	mul.w	r3, r2, r3
 8003086:	4a69      	ldr	r2, [pc, #420]	@ (800322c <HAL_I2C_Init+0x284>)
 8003088:	fba2 2303 	umull	r2, r3, r2, r3
 800308c:	099b      	lsrs	r3, r3, #6
 800308e:	3301      	adds	r3, #1
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6812      	ldr	r2, [r2, #0]
 8003094:	430b      	orrs	r3, r1
 8003096:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80030a2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	495c      	ldr	r1, [pc, #368]	@ (800321c <HAL_I2C_Init+0x274>)
 80030ac:	428b      	cmp	r3, r1
 80030ae:	d819      	bhi.n	80030e4 <HAL_I2C_Init+0x13c>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	1e59      	subs	r1, r3, #1
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80030be:	1c59      	adds	r1, r3, #1
 80030c0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80030c4:	400b      	ands	r3, r1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00a      	beq.n	80030e0 <HAL_I2C_Init+0x138>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	1e59      	subs	r1, r3, #1
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80030d8:	3301      	adds	r3, #1
 80030da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030de:	e051      	b.n	8003184 <HAL_I2C_Init+0x1dc>
 80030e0:	2304      	movs	r3, #4
 80030e2:	e04f      	b.n	8003184 <HAL_I2C_Init+0x1dc>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d111      	bne.n	8003110 <HAL_I2C_Init+0x168>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	1e58      	subs	r0, r3, #1
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6859      	ldr	r1, [r3, #4]
 80030f4:	460b      	mov	r3, r1
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	440b      	add	r3, r1
 80030fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80030fe:	3301      	adds	r3, #1
 8003100:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003104:	2b00      	cmp	r3, #0
 8003106:	bf0c      	ite	eq
 8003108:	2301      	moveq	r3, #1
 800310a:	2300      	movne	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	e012      	b.n	8003136 <HAL_I2C_Init+0x18e>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	1e58      	subs	r0, r3, #1
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6859      	ldr	r1, [r3, #4]
 8003118:	460b      	mov	r3, r1
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	440b      	add	r3, r1
 800311e:	0099      	lsls	r1, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	fbb0 f3f3 	udiv	r3, r0, r3
 8003126:	3301      	adds	r3, #1
 8003128:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800312c:	2b00      	cmp	r3, #0
 800312e:	bf0c      	ite	eq
 8003130:	2301      	moveq	r3, #1
 8003132:	2300      	movne	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <HAL_I2C_Init+0x196>
 800313a:	2301      	movs	r3, #1
 800313c:	e022      	b.n	8003184 <HAL_I2C_Init+0x1dc>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10e      	bne.n	8003164 <HAL_I2C_Init+0x1bc>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	1e58      	subs	r0, r3, #1
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6859      	ldr	r1, [r3, #4]
 800314e:	460b      	mov	r3, r1
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	440b      	add	r3, r1
 8003154:	fbb0 f3f3 	udiv	r3, r0, r3
 8003158:	3301      	adds	r3, #1
 800315a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800315e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003162:	e00f      	b.n	8003184 <HAL_I2C_Init+0x1dc>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	1e58      	subs	r0, r3, #1
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6859      	ldr	r1, [r3, #4]
 800316c:	460b      	mov	r3, r1
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	0099      	lsls	r1, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	fbb0 f3f3 	udiv	r3, r0, r3
 800317a:	3301      	adds	r3, #1
 800317c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003180:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003184:	6879      	ldr	r1, [r7, #4]
 8003186:	6809      	ldr	r1, [r1, #0]
 8003188:	4313      	orrs	r3, r2
 800318a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69da      	ldr	r2, [r3, #28]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80031b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6911      	ldr	r1, [r2, #16]
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	68d2      	ldr	r2, [r2, #12]
 80031be:	4311      	orrs	r1, r2
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	6812      	ldr	r2, [r2, #0]
 80031c4:	430b      	orrs	r3, r1
 80031c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	695a      	ldr	r2, [r3, #20]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0201 	orr.w	r2, r2, #1
 80031f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2220      	movs	r2, #32
 80031fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	000186a0 	.word	0x000186a0
 8003220:	001e847f 	.word	0x001e847f
 8003224:	003d08ff 	.word	0x003d08ff
 8003228:	431bde83 	.word	0x431bde83
 800322c:	10624dd3 	.word	0x10624dd3

08003230 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e267      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d075      	beq.n	800333a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800324e:	4b88      	ldr	r3, [pc, #544]	@ (8003470 <HAL_RCC_OscConfig+0x240>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 030c 	and.w	r3, r3, #12
 8003256:	2b04      	cmp	r3, #4
 8003258:	d00c      	beq.n	8003274 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800325a:	4b85      	ldr	r3, [pc, #532]	@ (8003470 <HAL_RCC_OscConfig+0x240>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003262:	2b08      	cmp	r3, #8
 8003264:	d112      	bne.n	800328c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003266:	4b82      	ldr	r3, [pc, #520]	@ (8003470 <HAL_RCC_OscConfig+0x240>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800326e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003272:	d10b      	bne.n	800328c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003274:	4b7e      	ldr	r3, [pc, #504]	@ (8003470 <HAL_RCC_OscConfig+0x240>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d05b      	beq.n	8003338 <HAL_RCC_OscConfig+0x108>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d157      	bne.n	8003338 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e242      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003294:	d106      	bne.n	80032a4 <HAL_RCC_OscConfig+0x74>
 8003296:	4b76      	ldr	r3, [pc, #472]	@ (8003470 <HAL_RCC_OscConfig+0x240>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a75      	ldr	r2, [pc, #468]	@ (8003470 <HAL_RCC_OscConfig+0x240>)
 800329c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032a0:	6013      	str	r3, [r2, #0]
 80032a2:	e01d      	b.n	80032e0 <HAL_RCC_OscConfig+0xb0>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032ac:	d10c      	bne.n	80032c8 <HAL_RCC_OscConfig+0x98>
 80032ae:	4b70      	ldr	r3, [pc, #448]	@ (8003470 <HAL_RCC_OscConfig+0x240>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a6f      	ldr	r2, [pc, #444]	@ (8003470 <HAL_RCC_OscConfig+0x240>)
 80032b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032b8:	6013      	str	r3, [r2, #0]
 80032ba:	4b6d      	ldr	r3, [pc, #436]	@ (8003470 <HAL_RCC_OscConfig+0x240>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a6c      	ldr	r2, [pc, #432]	@ (8003470 <HAL_RCC_OscConfig+0x240>)
 80032c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032c4:	6013      	str	r3, [r2, #0]
 80032c6:	e00b      	b.n	80032e0 <HAL_RCC_OscConfig+0xb0>
 80032c8:	4b69      	ldr	r3, [pc, #420]	@ (8003470 <HAL_RCC_OscConfig+0x240>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a68      	ldr	r2, [pc, #416]	@ (8003470 <HAL_RCC_OscConfig+0x240>)
 80032ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032d2:	6013      	str	r3, [r2, #0]
 80032d4:	4b66      	ldr	r3, [pc, #408]	@ (8003470 <HAL_RCC_OscConfig+0x240>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a65      	ldr	r2, [pc, #404]	@ (8003470 <HAL_RCC_OscConfig+0x240>)
 80032da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d013      	beq.n	8003310 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e8:	f7fe fe4a 	bl	8001f80 <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032f0:	f7fe fe46 	bl	8001f80 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b64      	cmp	r3, #100	@ 0x64
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e207      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003302:	4b5b      	ldr	r3, [pc, #364]	@ (8003470 <HAL_RCC_OscConfig+0x240>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d0f0      	beq.n	80032f0 <HAL_RCC_OscConfig+0xc0>
 800330e:	e014      	b.n	800333a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003310:	f7fe fe36 	bl	8001f80 <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003318:	f7fe fe32 	bl	8001f80 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b64      	cmp	r3, #100	@ 0x64
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e1f3      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800332a:	4b51      	ldr	r3, [pc, #324]	@ (8003470 <HAL_RCC_OscConfig+0x240>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1f0      	bne.n	8003318 <HAL_RCC_OscConfig+0xe8>
 8003336:	e000      	b.n	800333a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d063      	beq.n	800340e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003346:	4b4a      	ldr	r3, [pc, #296]	@ (8003470 <HAL_RCC_OscConfig+0x240>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f003 030c 	and.w	r3, r3, #12
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00b      	beq.n	800336a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003352:	4b47      	ldr	r3, [pc, #284]	@ (8003470 <HAL_RCC_OscConfig+0x240>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800335a:	2b08      	cmp	r3, #8
 800335c:	d11c      	bne.n	8003398 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800335e:	4b44      	ldr	r3, [pc, #272]	@ (8003470 <HAL_RCC_OscConfig+0x240>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d116      	bne.n	8003398 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800336a:	4b41      	ldr	r3, [pc, #260]	@ (8003470 <HAL_RCC_OscConfig+0x240>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d005      	beq.n	8003382 <HAL_RCC_OscConfig+0x152>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d001      	beq.n	8003382 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e1c7      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003382:	4b3b      	ldr	r3, [pc, #236]	@ (8003470 <HAL_RCC_OscConfig+0x240>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	4937      	ldr	r1, [pc, #220]	@ (8003470 <HAL_RCC_OscConfig+0x240>)
 8003392:	4313      	orrs	r3, r2
 8003394:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003396:	e03a      	b.n	800340e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d020      	beq.n	80033e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033a0:	4b34      	ldr	r3, [pc, #208]	@ (8003474 <HAL_RCC_OscConfig+0x244>)
 80033a2:	2201      	movs	r2, #1
 80033a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a6:	f7fe fdeb 	bl	8001f80 <HAL_GetTick>
 80033aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ac:	e008      	b.n	80033c0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ae:	f7fe fde7 	bl	8001f80 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d901      	bls.n	80033c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e1a8      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c0:	4b2b      	ldr	r3, [pc, #172]	@ (8003470 <HAL_RCC_OscConfig+0x240>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d0f0      	beq.n	80033ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033cc:	4b28      	ldr	r3, [pc, #160]	@ (8003470 <HAL_RCC_OscConfig+0x240>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	4925      	ldr	r1, [pc, #148]	@ (8003470 <HAL_RCC_OscConfig+0x240>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	600b      	str	r3, [r1, #0]
 80033e0:	e015      	b.n	800340e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033e2:	4b24      	ldr	r3, [pc, #144]	@ (8003474 <HAL_RCC_OscConfig+0x244>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e8:	f7fe fdca 	bl	8001f80 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033f0:	f7fe fdc6 	bl	8001f80 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e187      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003402:	4b1b      	ldr	r3, [pc, #108]	@ (8003470 <HAL_RCC_OscConfig+0x240>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f0      	bne.n	80033f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	2b00      	cmp	r3, #0
 8003418:	d036      	beq.n	8003488 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d016      	beq.n	8003450 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003422:	4b15      	ldr	r3, [pc, #84]	@ (8003478 <HAL_RCC_OscConfig+0x248>)
 8003424:	2201      	movs	r2, #1
 8003426:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003428:	f7fe fdaa 	bl	8001f80 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003430:	f7fe fda6 	bl	8001f80 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e167      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003442:	4b0b      	ldr	r3, [pc, #44]	@ (8003470 <HAL_RCC_OscConfig+0x240>)
 8003444:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d0f0      	beq.n	8003430 <HAL_RCC_OscConfig+0x200>
 800344e:	e01b      	b.n	8003488 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003450:	4b09      	ldr	r3, [pc, #36]	@ (8003478 <HAL_RCC_OscConfig+0x248>)
 8003452:	2200      	movs	r2, #0
 8003454:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003456:	f7fe fd93 	bl	8001f80 <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800345c:	e00e      	b.n	800347c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800345e:	f7fe fd8f 	bl	8001f80 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d907      	bls.n	800347c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e150      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
 8003470:	40023800 	.word	0x40023800
 8003474:	42470000 	.word	0x42470000
 8003478:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800347c:	4b88      	ldr	r3, [pc, #544]	@ (80036a0 <HAL_RCC_OscConfig+0x470>)
 800347e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1ea      	bne.n	800345e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 8097 	beq.w	80035c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003496:	2300      	movs	r3, #0
 8003498:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800349a:	4b81      	ldr	r3, [pc, #516]	@ (80036a0 <HAL_RCC_OscConfig+0x470>)
 800349c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10f      	bne.n	80034c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034a6:	2300      	movs	r3, #0
 80034a8:	60bb      	str	r3, [r7, #8]
 80034aa:	4b7d      	ldr	r3, [pc, #500]	@ (80036a0 <HAL_RCC_OscConfig+0x470>)
 80034ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ae:	4a7c      	ldr	r2, [pc, #496]	@ (80036a0 <HAL_RCC_OscConfig+0x470>)
 80034b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80034b6:	4b7a      	ldr	r3, [pc, #488]	@ (80036a0 <HAL_RCC_OscConfig+0x470>)
 80034b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034be:	60bb      	str	r3, [r7, #8]
 80034c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034c2:	2301      	movs	r3, #1
 80034c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c6:	4b77      	ldr	r3, [pc, #476]	@ (80036a4 <HAL_RCC_OscConfig+0x474>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d118      	bne.n	8003504 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034d2:	4b74      	ldr	r3, [pc, #464]	@ (80036a4 <HAL_RCC_OscConfig+0x474>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a73      	ldr	r2, [pc, #460]	@ (80036a4 <HAL_RCC_OscConfig+0x474>)
 80034d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034de:	f7fe fd4f 	bl	8001f80 <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e4:	e008      	b.n	80034f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034e6:	f7fe fd4b 	bl	8001f80 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e10c      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f8:	4b6a      	ldr	r3, [pc, #424]	@ (80036a4 <HAL_RCC_OscConfig+0x474>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0f0      	beq.n	80034e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d106      	bne.n	800351a <HAL_RCC_OscConfig+0x2ea>
 800350c:	4b64      	ldr	r3, [pc, #400]	@ (80036a0 <HAL_RCC_OscConfig+0x470>)
 800350e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003510:	4a63      	ldr	r2, [pc, #396]	@ (80036a0 <HAL_RCC_OscConfig+0x470>)
 8003512:	f043 0301 	orr.w	r3, r3, #1
 8003516:	6713      	str	r3, [r2, #112]	@ 0x70
 8003518:	e01c      	b.n	8003554 <HAL_RCC_OscConfig+0x324>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	2b05      	cmp	r3, #5
 8003520:	d10c      	bne.n	800353c <HAL_RCC_OscConfig+0x30c>
 8003522:	4b5f      	ldr	r3, [pc, #380]	@ (80036a0 <HAL_RCC_OscConfig+0x470>)
 8003524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003526:	4a5e      	ldr	r2, [pc, #376]	@ (80036a0 <HAL_RCC_OscConfig+0x470>)
 8003528:	f043 0304 	orr.w	r3, r3, #4
 800352c:	6713      	str	r3, [r2, #112]	@ 0x70
 800352e:	4b5c      	ldr	r3, [pc, #368]	@ (80036a0 <HAL_RCC_OscConfig+0x470>)
 8003530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003532:	4a5b      	ldr	r2, [pc, #364]	@ (80036a0 <HAL_RCC_OscConfig+0x470>)
 8003534:	f043 0301 	orr.w	r3, r3, #1
 8003538:	6713      	str	r3, [r2, #112]	@ 0x70
 800353a:	e00b      	b.n	8003554 <HAL_RCC_OscConfig+0x324>
 800353c:	4b58      	ldr	r3, [pc, #352]	@ (80036a0 <HAL_RCC_OscConfig+0x470>)
 800353e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003540:	4a57      	ldr	r2, [pc, #348]	@ (80036a0 <HAL_RCC_OscConfig+0x470>)
 8003542:	f023 0301 	bic.w	r3, r3, #1
 8003546:	6713      	str	r3, [r2, #112]	@ 0x70
 8003548:	4b55      	ldr	r3, [pc, #340]	@ (80036a0 <HAL_RCC_OscConfig+0x470>)
 800354a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800354c:	4a54      	ldr	r2, [pc, #336]	@ (80036a0 <HAL_RCC_OscConfig+0x470>)
 800354e:	f023 0304 	bic.w	r3, r3, #4
 8003552:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d015      	beq.n	8003588 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800355c:	f7fe fd10 	bl	8001f80 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003562:	e00a      	b.n	800357a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003564:	f7fe fd0c 	bl	8001f80 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003572:	4293      	cmp	r3, r2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e0cb      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800357a:	4b49      	ldr	r3, [pc, #292]	@ (80036a0 <HAL_RCC_OscConfig+0x470>)
 800357c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d0ee      	beq.n	8003564 <HAL_RCC_OscConfig+0x334>
 8003586:	e014      	b.n	80035b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003588:	f7fe fcfa 	bl	8001f80 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800358e:	e00a      	b.n	80035a6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003590:	f7fe fcf6 	bl	8001f80 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800359e:	4293      	cmp	r3, r2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e0b5      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035a6:	4b3e      	ldr	r3, [pc, #248]	@ (80036a0 <HAL_RCC_OscConfig+0x470>)
 80035a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1ee      	bne.n	8003590 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035b2:	7dfb      	ldrb	r3, [r7, #23]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d105      	bne.n	80035c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035b8:	4b39      	ldr	r3, [pc, #228]	@ (80036a0 <HAL_RCC_OscConfig+0x470>)
 80035ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035bc:	4a38      	ldr	r2, [pc, #224]	@ (80036a0 <HAL_RCC_OscConfig+0x470>)
 80035be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 80a1 	beq.w	8003710 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035ce:	4b34      	ldr	r3, [pc, #208]	@ (80036a0 <HAL_RCC_OscConfig+0x470>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f003 030c 	and.w	r3, r3, #12
 80035d6:	2b08      	cmp	r3, #8
 80035d8:	d05c      	beq.n	8003694 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d141      	bne.n	8003666 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035e2:	4b31      	ldr	r3, [pc, #196]	@ (80036a8 <HAL_RCC_OscConfig+0x478>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e8:	f7fe fcca 	bl	8001f80 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f0:	f7fe fcc6 	bl	8001f80 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e087      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003602:	4b27      	ldr	r3, [pc, #156]	@ (80036a0 <HAL_RCC_OscConfig+0x470>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f0      	bne.n	80035f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	69da      	ldr	r2, [r3, #28]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	431a      	orrs	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361c:	019b      	lsls	r3, r3, #6
 800361e:	431a      	orrs	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003624:	085b      	lsrs	r3, r3, #1
 8003626:	3b01      	subs	r3, #1
 8003628:	041b      	lsls	r3, r3, #16
 800362a:	431a      	orrs	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003630:	061b      	lsls	r3, r3, #24
 8003632:	491b      	ldr	r1, [pc, #108]	@ (80036a0 <HAL_RCC_OscConfig+0x470>)
 8003634:	4313      	orrs	r3, r2
 8003636:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003638:	4b1b      	ldr	r3, [pc, #108]	@ (80036a8 <HAL_RCC_OscConfig+0x478>)
 800363a:	2201      	movs	r2, #1
 800363c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363e:	f7fe fc9f 	bl	8001f80 <HAL_GetTick>
 8003642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003644:	e008      	b.n	8003658 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003646:	f7fe fc9b 	bl	8001f80 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d901      	bls.n	8003658 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e05c      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003658:	4b11      	ldr	r3, [pc, #68]	@ (80036a0 <HAL_RCC_OscConfig+0x470>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0f0      	beq.n	8003646 <HAL_RCC_OscConfig+0x416>
 8003664:	e054      	b.n	8003710 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003666:	4b10      	ldr	r3, [pc, #64]	@ (80036a8 <HAL_RCC_OscConfig+0x478>)
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366c:	f7fe fc88 	bl	8001f80 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003674:	f7fe fc84 	bl	8001f80 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e045      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003686:	4b06      	ldr	r3, [pc, #24]	@ (80036a0 <HAL_RCC_OscConfig+0x470>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1f0      	bne.n	8003674 <HAL_RCC_OscConfig+0x444>
 8003692:	e03d      	b.n	8003710 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d107      	bne.n	80036ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e038      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
 80036a0:	40023800 	.word	0x40023800
 80036a4:	40007000 	.word	0x40007000
 80036a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036ac:	4b1b      	ldr	r3, [pc, #108]	@ (800371c <HAL_RCC_OscConfig+0x4ec>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d028      	beq.n	800370c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d121      	bne.n	800370c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d11a      	bne.n	800370c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80036dc:	4013      	ands	r3, r2
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80036e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d111      	bne.n	800370c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f2:	085b      	lsrs	r3, r3, #1
 80036f4:	3b01      	subs	r3, #1
 80036f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d107      	bne.n	800370c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003706:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003708:	429a      	cmp	r2, r3
 800370a:	d001      	beq.n	8003710 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e000      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3718      	adds	r7, #24
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	40023800 	.word	0x40023800

08003720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e0cc      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003734:	4b68      	ldr	r3, [pc, #416]	@ (80038d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0307 	and.w	r3, r3, #7
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	429a      	cmp	r2, r3
 8003740:	d90c      	bls.n	800375c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003742:	4b65      	ldr	r3, [pc, #404]	@ (80038d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	b2d2      	uxtb	r2, r2
 8003748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800374a:	4b63      	ldr	r3, [pc, #396]	@ (80038d8 <HAL_RCC_ClockConfig+0x1b8>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	429a      	cmp	r2, r3
 8003756:	d001      	beq.n	800375c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e0b8      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d020      	beq.n	80037aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	2b00      	cmp	r3, #0
 8003772:	d005      	beq.n	8003780 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003774:	4b59      	ldr	r3, [pc, #356]	@ (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	4a58      	ldr	r2, [pc, #352]	@ (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 800377a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800377e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0308 	and.w	r3, r3, #8
 8003788:	2b00      	cmp	r3, #0
 800378a:	d005      	beq.n	8003798 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800378c:	4b53      	ldr	r3, [pc, #332]	@ (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	4a52      	ldr	r2, [pc, #328]	@ (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 8003792:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003796:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003798:	4b50      	ldr	r3, [pc, #320]	@ (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	494d      	ldr	r1, [pc, #308]	@ (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d044      	beq.n	8003840 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d107      	bne.n	80037ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037be:	4b47      	ldr	r3, [pc, #284]	@ (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d119      	bne.n	80037fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e07f      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d003      	beq.n	80037de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037da:	2b03      	cmp	r3, #3
 80037dc:	d107      	bne.n	80037ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037de:	4b3f      	ldr	r3, [pc, #252]	@ (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d109      	bne.n	80037fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e06f      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ee:	4b3b      	ldr	r3, [pc, #236]	@ (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e067      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037fe:	4b37      	ldr	r3, [pc, #220]	@ (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f023 0203 	bic.w	r2, r3, #3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	4934      	ldr	r1, [pc, #208]	@ (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 800380c:	4313      	orrs	r3, r2
 800380e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003810:	f7fe fbb6 	bl	8001f80 <HAL_GetTick>
 8003814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003816:	e00a      	b.n	800382e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003818:	f7fe fbb2 	bl	8001f80 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003826:	4293      	cmp	r3, r2
 8003828:	d901      	bls.n	800382e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e04f      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800382e:	4b2b      	ldr	r3, [pc, #172]	@ (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 020c 	and.w	r2, r3, #12
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	429a      	cmp	r2, r3
 800383e:	d1eb      	bne.n	8003818 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003840:	4b25      	ldr	r3, [pc, #148]	@ (80038d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0307 	and.w	r3, r3, #7
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	429a      	cmp	r2, r3
 800384c:	d20c      	bcs.n	8003868 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800384e:	4b22      	ldr	r3, [pc, #136]	@ (80038d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003856:	4b20      	ldr	r3, [pc, #128]	@ (80038d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	429a      	cmp	r2, r3
 8003862:	d001      	beq.n	8003868 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e032      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	2b00      	cmp	r3, #0
 8003872:	d008      	beq.n	8003886 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003874:	4b19      	ldr	r3, [pc, #100]	@ (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	4916      	ldr	r1, [pc, #88]	@ (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 8003882:	4313      	orrs	r3, r2
 8003884:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b00      	cmp	r3, #0
 8003890:	d009      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003892:	4b12      	ldr	r3, [pc, #72]	@ (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	490e      	ldr	r1, [pc, #56]	@ (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038a6:	f000 f821 	bl	80038ec <HAL_RCC_GetSysClockFreq>
 80038aa:	4602      	mov	r2, r0
 80038ac:	4b0b      	ldr	r3, [pc, #44]	@ (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	091b      	lsrs	r3, r3, #4
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	490a      	ldr	r1, [pc, #40]	@ (80038e0 <HAL_RCC_ClockConfig+0x1c0>)
 80038b8:	5ccb      	ldrb	r3, [r1, r3]
 80038ba:	fa22 f303 	lsr.w	r3, r2, r3
 80038be:	4a09      	ldr	r2, [pc, #36]	@ (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 80038c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80038c2:	4b09      	ldr	r3, [pc, #36]	@ (80038e8 <HAL_RCC_ClockConfig+0x1c8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7fd faf6 	bl	8000eb8 <HAL_InitTick>

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	40023c00 	.word	0x40023c00
 80038dc:	40023800 	.word	0x40023800
 80038e0:	08006e38 	.word	0x08006e38
 80038e4:	20000000 	.word	0x20000000
 80038e8:	20000004 	.word	0x20000004

080038ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038f0:	b090      	sub	sp, #64	@ 0x40
 80038f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80038f4:	2300      	movs	r3, #0
 80038f6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80038f8:	2300      	movs	r3, #0
 80038fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80038fc:	2300      	movs	r3, #0
 80038fe:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003900:	2300      	movs	r3, #0
 8003902:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003904:	4b59      	ldr	r3, [pc, #356]	@ (8003a6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f003 030c 	and.w	r3, r3, #12
 800390c:	2b08      	cmp	r3, #8
 800390e:	d00d      	beq.n	800392c <HAL_RCC_GetSysClockFreq+0x40>
 8003910:	2b08      	cmp	r3, #8
 8003912:	f200 80a1 	bhi.w	8003a58 <HAL_RCC_GetSysClockFreq+0x16c>
 8003916:	2b00      	cmp	r3, #0
 8003918:	d002      	beq.n	8003920 <HAL_RCC_GetSysClockFreq+0x34>
 800391a:	2b04      	cmp	r3, #4
 800391c:	d003      	beq.n	8003926 <HAL_RCC_GetSysClockFreq+0x3a>
 800391e:	e09b      	b.n	8003a58 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003920:	4b53      	ldr	r3, [pc, #332]	@ (8003a70 <HAL_RCC_GetSysClockFreq+0x184>)
 8003922:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003924:	e09b      	b.n	8003a5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003926:	4b53      	ldr	r3, [pc, #332]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x188>)
 8003928:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800392a:	e098      	b.n	8003a5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800392c:	4b4f      	ldr	r3, [pc, #316]	@ (8003a6c <HAL_RCC_GetSysClockFreq+0x180>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003934:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003936:	4b4d      	ldr	r3, [pc, #308]	@ (8003a6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d028      	beq.n	8003994 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003942:	4b4a      	ldr	r3, [pc, #296]	@ (8003a6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	099b      	lsrs	r3, r3, #6
 8003948:	2200      	movs	r2, #0
 800394a:	623b      	str	r3, [r7, #32]
 800394c:	627a      	str	r2, [r7, #36]	@ 0x24
 800394e:	6a3b      	ldr	r3, [r7, #32]
 8003950:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003954:	2100      	movs	r1, #0
 8003956:	4b47      	ldr	r3, [pc, #284]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x188>)
 8003958:	fb03 f201 	mul.w	r2, r3, r1
 800395c:	2300      	movs	r3, #0
 800395e:	fb00 f303 	mul.w	r3, r0, r3
 8003962:	4413      	add	r3, r2
 8003964:	4a43      	ldr	r2, [pc, #268]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x188>)
 8003966:	fba0 1202 	umull	r1, r2, r0, r2
 800396a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800396c:	460a      	mov	r2, r1
 800396e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003970:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003972:	4413      	add	r3, r2
 8003974:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003978:	2200      	movs	r2, #0
 800397a:	61bb      	str	r3, [r7, #24]
 800397c:	61fa      	str	r2, [r7, #28]
 800397e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003982:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003986:	f7fc fc73 	bl	8000270 <__aeabi_uldivmod>
 800398a:	4602      	mov	r2, r0
 800398c:	460b      	mov	r3, r1
 800398e:	4613      	mov	r3, r2
 8003990:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003992:	e053      	b.n	8003a3c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003994:	4b35      	ldr	r3, [pc, #212]	@ (8003a6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	099b      	lsrs	r3, r3, #6
 800399a:	2200      	movs	r2, #0
 800399c:	613b      	str	r3, [r7, #16]
 800399e:	617a      	str	r2, [r7, #20]
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80039a6:	f04f 0b00 	mov.w	fp, #0
 80039aa:	4652      	mov	r2, sl
 80039ac:	465b      	mov	r3, fp
 80039ae:	f04f 0000 	mov.w	r0, #0
 80039b2:	f04f 0100 	mov.w	r1, #0
 80039b6:	0159      	lsls	r1, r3, #5
 80039b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039bc:	0150      	lsls	r0, r2, #5
 80039be:	4602      	mov	r2, r0
 80039c0:	460b      	mov	r3, r1
 80039c2:	ebb2 080a 	subs.w	r8, r2, sl
 80039c6:	eb63 090b 	sbc.w	r9, r3, fp
 80039ca:	f04f 0200 	mov.w	r2, #0
 80039ce:	f04f 0300 	mov.w	r3, #0
 80039d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80039d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80039da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80039de:	ebb2 0408 	subs.w	r4, r2, r8
 80039e2:	eb63 0509 	sbc.w	r5, r3, r9
 80039e6:	f04f 0200 	mov.w	r2, #0
 80039ea:	f04f 0300 	mov.w	r3, #0
 80039ee:	00eb      	lsls	r3, r5, #3
 80039f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039f4:	00e2      	lsls	r2, r4, #3
 80039f6:	4614      	mov	r4, r2
 80039f8:	461d      	mov	r5, r3
 80039fa:	eb14 030a 	adds.w	r3, r4, sl
 80039fe:	603b      	str	r3, [r7, #0]
 8003a00:	eb45 030b 	adc.w	r3, r5, fp
 8003a04:	607b      	str	r3, [r7, #4]
 8003a06:	f04f 0200 	mov.w	r2, #0
 8003a0a:	f04f 0300 	mov.w	r3, #0
 8003a0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a12:	4629      	mov	r1, r5
 8003a14:	028b      	lsls	r3, r1, #10
 8003a16:	4621      	mov	r1, r4
 8003a18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a1c:	4621      	mov	r1, r4
 8003a1e:	028a      	lsls	r2, r1, #10
 8003a20:	4610      	mov	r0, r2
 8003a22:	4619      	mov	r1, r3
 8003a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a26:	2200      	movs	r2, #0
 8003a28:	60bb      	str	r3, [r7, #8]
 8003a2a:	60fa      	str	r2, [r7, #12]
 8003a2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a30:	f7fc fc1e 	bl	8000270 <__aeabi_uldivmod>
 8003a34:	4602      	mov	r2, r0
 8003a36:	460b      	mov	r3, r1
 8003a38:	4613      	mov	r3, r2
 8003a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	0c1b      	lsrs	r3, r3, #16
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	3301      	adds	r3, #1
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003a4c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a54:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a56:	e002      	b.n	8003a5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a58:	4b05      	ldr	r3, [pc, #20]	@ (8003a70 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a5a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3740      	adds	r7, #64	@ 0x40
 8003a64:	46bd      	mov	sp, r7
 8003a66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40023800 	.word	0x40023800
 8003a70:	00f42400 	.word	0x00f42400
 8003a74:	017d7840 	.word	0x017d7840

08003a78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a7c:	4b03      	ldr	r3, [pc, #12]	@ (8003a8c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	20000000 	.word	0x20000000

08003a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a94:	f7ff fff0 	bl	8003a78 <HAL_RCC_GetHCLKFreq>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	4b05      	ldr	r3, [pc, #20]	@ (8003ab0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	0a9b      	lsrs	r3, r3, #10
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	4903      	ldr	r1, [pc, #12]	@ (8003ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aa6:	5ccb      	ldrb	r3, [r1, r3]
 8003aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	08006e48 	.word	0x08006e48

08003ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003abc:	f7ff ffdc 	bl	8003a78 <HAL_RCC_GetHCLKFreq>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	4b05      	ldr	r3, [pc, #20]	@ (8003ad8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	0b5b      	lsrs	r3, r3, #13
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	4903      	ldr	r1, [pc, #12]	@ (8003adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ace:	5ccb      	ldrb	r3, [r1, r3]
 8003ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	08006e48 	.word	0x08006e48

08003ae0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	220f      	movs	r2, #15
 8003aee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003af0:	4b12      	ldr	r3, [pc, #72]	@ (8003b3c <HAL_RCC_GetClockConfig+0x5c>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f003 0203 	and.w	r2, r3, #3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003afc:	4b0f      	ldr	r3, [pc, #60]	@ (8003b3c <HAL_RCC_GetClockConfig+0x5c>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003b08:	4b0c      	ldr	r3, [pc, #48]	@ (8003b3c <HAL_RCC_GetClockConfig+0x5c>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003b14:	4b09      	ldr	r3, [pc, #36]	@ (8003b3c <HAL_RCC_GetClockConfig+0x5c>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	08db      	lsrs	r3, r3, #3
 8003b1a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003b22:	4b07      	ldr	r3, [pc, #28]	@ (8003b40 <HAL_RCC_GetClockConfig+0x60>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0207 	and.w	r2, r3, #7
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	601a      	str	r2, [r3, #0]
}
 8003b2e:	bf00      	nop
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	40023800 	.word	0x40023800
 8003b40:	40023c00 	.word	0x40023c00

08003b44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e07b      	b.n	8003c4e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d108      	bne.n	8003b70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b66:	d009      	beq.n	8003b7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	61da      	str	r2, [r3, #28]
 8003b6e:	e005      	b.n	8003b7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d106      	bne.n	8003b9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7fd f91a 	bl	8000dd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bb2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	431a      	orrs	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bec:	431a      	orrs	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c00:	ea42 0103 	orr.w	r1, r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c08:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	0c1b      	lsrs	r3, r3, #16
 8003c1a:	f003 0104 	and.w	r1, r3, #4
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c22:	f003 0210 	and.w	r2, r3, #16
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	69da      	ldr	r2, [r3, #28]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b088      	sub	sp, #32
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	60f8      	str	r0, [r7, #12]
 8003c5e:	60b9      	str	r1, [r7, #8]
 8003c60:	603b      	str	r3, [r7, #0]
 8003c62:	4613      	mov	r3, r2
 8003c64:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c66:	f7fe f98b 	bl	8001f80 <HAL_GetTick>
 8003c6a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003c6c:	88fb      	ldrh	r3, [r7, #6]
 8003c6e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d001      	beq.n	8003c80 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	e12a      	b.n	8003ed6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d002      	beq.n	8003c8c <HAL_SPI_Transmit+0x36>
 8003c86:	88fb      	ldrh	r3, [r7, #6]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d101      	bne.n	8003c90 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e122      	b.n	8003ed6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d101      	bne.n	8003c9e <HAL_SPI_Transmit+0x48>
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	e11b      	b.n	8003ed6 <HAL_SPI_Transmit+0x280>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2203      	movs	r2, #3
 8003caa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	88fa      	ldrh	r2, [r7, #6]
 8003cbe:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	88fa      	ldrh	r2, [r7, #6]
 8003cc4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cec:	d10f      	bne.n	8003d0e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cfc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d0c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d18:	2b40      	cmp	r3, #64	@ 0x40
 8003d1a:	d007      	beq.n	8003d2c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d34:	d152      	bne.n	8003ddc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d002      	beq.n	8003d44 <HAL_SPI_Transmit+0xee>
 8003d3e:	8b7b      	ldrh	r3, [r7, #26]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d145      	bne.n	8003dd0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d48:	881a      	ldrh	r2, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d54:	1c9a      	adds	r2, r3, #2
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	3b01      	subs	r3, #1
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d68:	e032      	b.n	8003dd0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d112      	bne.n	8003d9e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d7c:	881a      	ldrh	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d88:	1c9a      	adds	r2, r3, #2
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	3b01      	subs	r3, #1
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003d9c:	e018      	b.n	8003dd0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d9e:	f7fe f8ef 	bl	8001f80 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d803      	bhi.n	8003db6 <HAL_SPI_Transmit+0x160>
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db4:	d102      	bne.n	8003dbc <HAL_SPI_Transmit+0x166>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d109      	bne.n	8003dd0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e082      	b.n	8003ed6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1c7      	bne.n	8003d6a <HAL_SPI_Transmit+0x114>
 8003dda:	e053      	b.n	8003e84 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d002      	beq.n	8003dea <HAL_SPI_Transmit+0x194>
 8003de4:	8b7b      	ldrh	r3, [r7, #26]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d147      	bne.n	8003e7a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	330c      	adds	r3, #12
 8003df4:	7812      	ldrb	r2, [r2, #0]
 8003df6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfc:	1c5a      	adds	r2, r3, #1
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003e10:	e033      	b.n	8003e7a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d113      	bne.n	8003e48 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	330c      	adds	r3, #12
 8003e2a:	7812      	ldrb	r2, [r2, #0]
 8003e2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e32:	1c5a      	adds	r2, r3, #1
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003e46:	e018      	b.n	8003e7a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e48:	f7fe f89a 	bl	8001f80 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d803      	bhi.n	8003e60 <HAL_SPI_Transmit+0x20a>
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5e:	d102      	bne.n	8003e66 <HAL_SPI_Transmit+0x210>
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d109      	bne.n	8003e7a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e02d      	b.n	8003ed6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1c6      	bne.n	8003e12 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e84:	69fa      	ldr	r2, [r7, #28]
 8003e86:	6839      	ldr	r1, [r7, #0]
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f000 fbd9 	bl	8004640 <SPI_EndRxTxTransaction>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d002      	beq.n	8003e9a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2220      	movs	r2, #32
 8003e98:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10a      	bne.n	8003eb8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	617b      	str	r3, [r7, #20]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	617b      	str	r3, [r7, #20]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	617b      	str	r3, [r7, #20]
 8003eb6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e000      	b.n	8003ed6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
  }
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3720      	adds	r7, #32
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b088      	sub	sp, #32
 8003ee2:	af02      	add	r7, sp, #8
 8003ee4:	60f8      	str	r0, [r7, #12]
 8003ee6:	60b9      	str	r1, [r7, #8]
 8003ee8:	603b      	str	r3, [r7, #0]
 8003eea:	4613      	mov	r3, r2
 8003eec:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d001      	beq.n	8003efe <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003efa:	2302      	movs	r3, #2
 8003efc:	e104      	b.n	8004108 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f06:	d112      	bne.n	8003f2e <HAL_SPI_Receive+0x50>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10e      	bne.n	8003f2e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2204      	movs	r2, #4
 8003f14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003f18:	88fa      	ldrh	r2, [r7, #6]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	68b9      	ldr	r1, [r7, #8]
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f000 f8f3 	bl	8004110 <HAL_SPI_TransmitReceive>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	e0ec      	b.n	8004108 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f2e:	f7fe f827 	bl	8001f80 <HAL_GetTick>
 8003f32:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d002      	beq.n	8003f40 <HAL_SPI_Receive+0x62>
 8003f3a:	88fb      	ldrh	r3, [r7, #6]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e0e1      	b.n	8004108 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d101      	bne.n	8003f52 <HAL_SPI_Receive+0x74>
 8003f4e:	2302      	movs	r3, #2
 8003f50:	e0da      	b.n	8004108 <HAL_SPI_Receive+0x22a>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2204      	movs	r2, #4
 8003f5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	88fa      	ldrh	r2, [r7, #6]
 8003f72:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	88fa      	ldrh	r2, [r7, #6]
 8003f78:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fa0:	d10f      	bne.n	8003fc2 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fb0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003fc0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fcc:	2b40      	cmp	r3, #64	@ 0x40
 8003fce:	d007      	beq.n	8003fe0 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003fde:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d170      	bne.n	80040ca <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003fe8:	e035      	b.n	8004056 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d115      	bne.n	8004024 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f103 020c 	add.w	r2, r3, #12
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004004:	7812      	ldrb	r2, [r2, #0]
 8004006:	b2d2      	uxtb	r2, r2
 8004008:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800400e:	1c5a      	adds	r2, r3, #1
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004018:	b29b      	uxth	r3, r3
 800401a:	3b01      	subs	r3, #1
 800401c:	b29a      	uxth	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004022:	e018      	b.n	8004056 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004024:	f7fd ffac 	bl	8001f80 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	429a      	cmp	r2, r3
 8004032:	d803      	bhi.n	800403c <HAL_SPI_Receive+0x15e>
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800403a:	d102      	bne.n	8004042 <HAL_SPI_Receive+0x164>
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d109      	bne.n	8004056 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e058      	b.n	8004108 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800405a:	b29b      	uxth	r3, r3
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1c4      	bne.n	8003fea <HAL_SPI_Receive+0x10c>
 8004060:	e038      	b.n	80040d4 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b01      	cmp	r3, #1
 800406e:	d113      	bne.n	8004098 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68da      	ldr	r2, [r3, #12]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800407a:	b292      	uxth	r2, r2
 800407c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004082:	1c9a      	adds	r2, r3, #2
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800408c:	b29b      	uxth	r3, r3
 800408e:	3b01      	subs	r3, #1
 8004090:	b29a      	uxth	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004096:	e018      	b.n	80040ca <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004098:	f7fd ff72 	bl	8001f80 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d803      	bhi.n	80040b0 <HAL_SPI_Receive+0x1d2>
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ae:	d102      	bne.n	80040b6 <HAL_SPI_Receive+0x1d8>
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d109      	bne.n	80040ca <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e01e      	b.n	8004108 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1c6      	bne.n	8004062 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	6839      	ldr	r1, [r7, #0]
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 fa4b 	bl	8004574 <SPI_EndRxTransaction>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d002      	beq.n	80040ea <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2220      	movs	r2, #32
 80040e8:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e000      	b.n	8004108 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004106:	2300      	movs	r3, #0
  }
}
 8004108:	4618      	mov	r0, r3
 800410a:	3718      	adds	r7, #24
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b08a      	sub	sp, #40	@ 0x28
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
 800411c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800411e:	2301      	movs	r3, #1
 8004120:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004122:	f7fd ff2d 	bl	8001f80 <HAL_GetTick>
 8004126:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800412e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004136:	887b      	ldrh	r3, [r7, #2]
 8004138:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800413a:	7ffb      	ldrb	r3, [r7, #31]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d00c      	beq.n	800415a <HAL_SPI_TransmitReceive+0x4a>
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004146:	d106      	bne.n	8004156 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d102      	bne.n	8004156 <HAL_SPI_TransmitReceive+0x46>
 8004150:	7ffb      	ldrb	r3, [r7, #31]
 8004152:	2b04      	cmp	r3, #4
 8004154:	d001      	beq.n	800415a <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004156:	2302      	movs	r3, #2
 8004158:	e17f      	b.n	800445a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d005      	beq.n	800416c <HAL_SPI_TransmitReceive+0x5c>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d002      	beq.n	800416c <HAL_SPI_TransmitReceive+0x5c>
 8004166:	887b      	ldrh	r3, [r7, #2]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d101      	bne.n	8004170 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e174      	b.n	800445a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004176:	2b01      	cmp	r3, #1
 8004178:	d101      	bne.n	800417e <HAL_SPI_TransmitReceive+0x6e>
 800417a:	2302      	movs	r3, #2
 800417c:	e16d      	b.n	800445a <HAL_SPI_TransmitReceive+0x34a>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b04      	cmp	r3, #4
 8004190:	d003      	beq.n	800419a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2205      	movs	r2, #5
 8004196:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	887a      	ldrh	r2, [r7, #2]
 80041aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	887a      	ldrh	r2, [r7, #2]
 80041b0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	887a      	ldrh	r2, [r7, #2]
 80041bc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	887a      	ldrh	r2, [r7, #2]
 80041c2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041da:	2b40      	cmp	r3, #64	@ 0x40
 80041dc:	d007      	beq.n	80041ee <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80041ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041f6:	d17e      	bne.n	80042f6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d002      	beq.n	8004206 <HAL_SPI_TransmitReceive+0xf6>
 8004200:	8afb      	ldrh	r3, [r7, #22]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d16c      	bne.n	80042e0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800420a:	881a      	ldrh	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004216:	1c9a      	adds	r2, r3, #2
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004220:	b29b      	uxth	r3, r3
 8004222:	3b01      	subs	r3, #1
 8004224:	b29a      	uxth	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800422a:	e059      	b.n	80042e0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b02      	cmp	r3, #2
 8004238:	d11b      	bne.n	8004272 <HAL_SPI_TransmitReceive+0x162>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800423e:	b29b      	uxth	r3, r3
 8004240:	2b00      	cmp	r3, #0
 8004242:	d016      	beq.n	8004272 <HAL_SPI_TransmitReceive+0x162>
 8004244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004246:	2b01      	cmp	r3, #1
 8004248:	d113      	bne.n	8004272 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800424e:	881a      	ldrh	r2, [r3, #0]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800425a:	1c9a      	adds	r2, r3, #2
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004264:	b29b      	uxth	r3, r3
 8004266:	3b01      	subs	r3, #1
 8004268:	b29a      	uxth	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800426e:	2300      	movs	r3, #0
 8004270:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b01      	cmp	r3, #1
 800427e:	d119      	bne.n	80042b4 <HAL_SPI_TransmitReceive+0x1a4>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004284:	b29b      	uxth	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d014      	beq.n	80042b4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68da      	ldr	r2, [r3, #12]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004294:	b292      	uxth	r2, r2
 8004296:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800429c:	1c9a      	adds	r2, r3, #2
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	3b01      	subs	r3, #1
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042b0:	2301      	movs	r3, #1
 80042b2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80042b4:	f7fd fe64 	bl	8001f80 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	6a3b      	ldr	r3, [r7, #32]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d80d      	bhi.n	80042e0 <HAL_SPI_TransmitReceive+0x1d0>
 80042c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ca:	d009      	beq.n	80042e0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e0bc      	b.n	800445a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1a0      	bne.n	800422c <HAL_SPI_TransmitReceive+0x11c>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d19b      	bne.n	800422c <HAL_SPI_TransmitReceive+0x11c>
 80042f4:	e082      	b.n	80043fc <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d002      	beq.n	8004304 <HAL_SPI_TransmitReceive+0x1f4>
 80042fe:	8afb      	ldrh	r3, [r7, #22]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d171      	bne.n	80043e8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	330c      	adds	r3, #12
 800430e:	7812      	ldrb	r2, [r2, #0]
 8004310:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004316:	1c5a      	adds	r2, r3, #1
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004320:	b29b      	uxth	r3, r3
 8004322:	3b01      	subs	r3, #1
 8004324:	b29a      	uxth	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800432a:	e05d      	b.n	80043e8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b02      	cmp	r3, #2
 8004338:	d11c      	bne.n	8004374 <HAL_SPI_TransmitReceive+0x264>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800433e:	b29b      	uxth	r3, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	d017      	beq.n	8004374 <HAL_SPI_TransmitReceive+0x264>
 8004344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004346:	2b01      	cmp	r3, #1
 8004348:	d114      	bne.n	8004374 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	330c      	adds	r3, #12
 8004354:	7812      	ldrb	r2, [r2, #0]
 8004356:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800435c:	1c5a      	adds	r2, r3, #1
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004366:	b29b      	uxth	r3, r3
 8004368:	3b01      	subs	r3, #1
 800436a:	b29a      	uxth	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004370:	2300      	movs	r3, #0
 8004372:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b01      	cmp	r3, #1
 8004380:	d119      	bne.n	80043b6 <HAL_SPI_TransmitReceive+0x2a6>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004386:	b29b      	uxth	r3, r3
 8004388:	2b00      	cmp	r3, #0
 800438a:	d014      	beq.n	80043b6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68da      	ldr	r2, [r3, #12]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004396:	b2d2      	uxtb	r2, r2
 8004398:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800439e:	1c5a      	adds	r2, r3, #1
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	3b01      	subs	r3, #1
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043b2:	2301      	movs	r3, #1
 80043b4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80043b6:	f7fd fde3 	bl	8001f80 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	6a3b      	ldr	r3, [r7, #32]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d803      	bhi.n	80043ce <HAL_SPI_TransmitReceive+0x2be>
 80043c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043cc:	d102      	bne.n	80043d4 <HAL_SPI_TransmitReceive+0x2c4>
 80043ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d109      	bne.n	80043e8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e038      	b.n	800445a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d19c      	bne.n	800432c <HAL_SPI_TransmitReceive+0x21c>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d197      	bne.n	800432c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043fc:	6a3a      	ldr	r2, [r7, #32]
 80043fe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f000 f91d 	bl	8004640 <SPI_EndRxTxTransaction>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d008      	beq.n	800441e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2220      	movs	r2, #32
 8004410:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e01d      	b.n	800445a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10a      	bne.n	800443c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004426:	2300      	movs	r3, #0
 8004428:	613b      	str	r3, [r7, #16]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	613b      	str	r3, [r7, #16]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	613b      	str	r3, [r7, #16]
 800443a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e000      	b.n	800445a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004458:	2300      	movs	r3, #0
  }
}
 800445a:	4618      	mov	r0, r3
 800445c:	3728      	adds	r7, #40	@ 0x28
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
	...

08004464 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b088      	sub	sp, #32
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	603b      	str	r3, [r7, #0]
 8004470:	4613      	mov	r3, r2
 8004472:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004474:	f7fd fd84 	bl	8001f80 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800447c:	1a9b      	subs	r3, r3, r2
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	4413      	add	r3, r2
 8004482:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004484:	f7fd fd7c 	bl	8001f80 <HAL_GetTick>
 8004488:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800448a:	4b39      	ldr	r3, [pc, #228]	@ (8004570 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	015b      	lsls	r3, r3, #5
 8004490:	0d1b      	lsrs	r3, r3, #20
 8004492:	69fa      	ldr	r2, [r7, #28]
 8004494:	fb02 f303 	mul.w	r3, r2, r3
 8004498:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800449a:	e054      	b.n	8004546 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a2:	d050      	beq.n	8004546 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80044a4:	f7fd fd6c 	bl	8001f80 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	69fa      	ldr	r2, [r7, #28]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d902      	bls.n	80044ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d13d      	bne.n	8004536 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80044c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044d2:	d111      	bne.n	80044f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044dc:	d004      	beq.n	80044e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044e6:	d107      	bne.n	80044f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004500:	d10f      	bne.n	8004522 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004520:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e017      	b.n	8004566 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d101      	bne.n	8004540 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800453c:	2300      	movs	r3, #0
 800453e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	3b01      	subs	r3, #1
 8004544:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	4013      	ands	r3, r2
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	429a      	cmp	r2, r3
 8004554:	bf0c      	ite	eq
 8004556:	2301      	moveq	r3, #1
 8004558:	2300      	movne	r3, #0
 800455a:	b2db      	uxtb	r3, r3
 800455c:	461a      	mov	r2, r3
 800455e:	79fb      	ldrb	r3, [r7, #7]
 8004560:	429a      	cmp	r2, r3
 8004562:	d19b      	bne.n	800449c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3720      	adds	r7, #32
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	20000000 	.word	0x20000000

08004574 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af02      	add	r7, sp, #8
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004588:	d111      	bne.n	80045ae <SPI_EndRxTransaction+0x3a>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004592:	d004      	beq.n	800459e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800459c:	d107      	bne.n	80045ae <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045ac:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045b6:	d12a      	bne.n	800460e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045c0:	d012      	beq.n	80045e8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	9300      	str	r3, [sp, #0]
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	2200      	movs	r2, #0
 80045ca:	2180      	movs	r1, #128	@ 0x80
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f7ff ff49 	bl	8004464 <SPI_WaitFlagStateUntilTimeout>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d02d      	beq.n	8004634 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045dc:	f043 0220 	orr.w	r2, r3, #32
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e026      	b.n	8004636 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	2200      	movs	r2, #0
 80045f0:	2101      	movs	r1, #1
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f7ff ff36 	bl	8004464 <SPI_WaitFlagStateUntilTimeout>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d01a      	beq.n	8004634 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004602:	f043 0220 	orr.w	r2, r3, #32
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e013      	b.n	8004636 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	2200      	movs	r2, #0
 8004616:	2101      	movs	r1, #1
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f7ff ff23 	bl	8004464 <SPI_WaitFlagStateUntilTimeout>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d007      	beq.n	8004634 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004628:	f043 0220 	orr.w	r2, r3, #32
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e000      	b.n	8004636 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
	...

08004640 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b088      	sub	sp, #32
 8004644:	af02      	add	r7, sp, #8
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	2201      	movs	r2, #1
 8004654:	2102      	movs	r1, #2
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f7ff ff04 	bl	8004464 <SPI_WaitFlagStateUntilTimeout>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d007      	beq.n	8004672 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004666:	f043 0220 	orr.w	r2, r3, #32
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e032      	b.n	80046d8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004672:	4b1b      	ldr	r3, [pc, #108]	@ (80046e0 <SPI_EndRxTxTransaction+0xa0>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a1b      	ldr	r2, [pc, #108]	@ (80046e4 <SPI_EndRxTxTransaction+0xa4>)
 8004678:	fba2 2303 	umull	r2, r3, r2, r3
 800467c:	0d5b      	lsrs	r3, r3, #21
 800467e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004682:	fb02 f303 	mul.w	r3, r2, r3
 8004686:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004690:	d112      	bne.n	80046b8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	9300      	str	r3, [sp, #0]
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	2200      	movs	r2, #0
 800469a:	2180      	movs	r1, #128	@ 0x80
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f7ff fee1 	bl	8004464 <SPI_WaitFlagStateUntilTimeout>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d016      	beq.n	80046d6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ac:	f043 0220 	orr.w	r2, r3, #32
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e00f      	b.n	80046d8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00a      	beq.n	80046d4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	3b01      	subs	r3, #1
 80046c2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ce:	2b80      	cmp	r3, #128	@ 0x80
 80046d0:	d0f2      	beq.n	80046b8 <SPI_EndRxTxTransaction+0x78>
 80046d2:	e000      	b.n	80046d6 <SPI_EndRxTxTransaction+0x96>
        break;
 80046d4:	bf00      	nop
  }

  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3718      	adds	r7, #24
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	20000000 	.word	0x20000000
 80046e4:	165e9f81 	.word	0x165e9f81

080046e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e041      	b.n	800477e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d106      	bne.n	8004714 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7fc ff04 	bl	800151c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	3304      	adds	r3, #4
 8004724:	4619      	mov	r1, r3
 8004726:	4610      	mov	r0, r2
 8004728:	f000 fb90 	bl	8004e4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
	...

08004788 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b01      	cmp	r3, #1
 800479a:	d001      	beq.n	80047a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e04e      	b.n	800483e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2202      	movs	r2, #2
 80047a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68da      	ldr	r2, [r3, #12]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f042 0201 	orr.w	r2, r2, #1
 80047b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a23      	ldr	r2, [pc, #140]	@ (800484c <HAL_TIM_Base_Start_IT+0xc4>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d022      	beq.n	8004808 <HAL_TIM_Base_Start_IT+0x80>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047ca:	d01d      	beq.n	8004808 <HAL_TIM_Base_Start_IT+0x80>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a1f      	ldr	r2, [pc, #124]	@ (8004850 <HAL_TIM_Base_Start_IT+0xc8>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d018      	beq.n	8004808 <HAL_TIM_Base_Start_IT+0x80>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a1e      	ldr	r2, [pc, #120]	@ (8004854 <HAL_TIM_Base_Start_IT+0xcc>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d013      	beq.n	8004808 <HAL_TIM_Base_Start_IT+0x80>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a1c      	ldr	r2, [pc, #112]	@ (8004858 <HAL_TIM_Base_Start_IT+0xd0>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d00e      	beq.n	8004808 <HAL_TIM_Base_Start_IT+0x80>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a1b      	ldr	r2, [pc, #108]	@ (800485c <HAL_TIM_Base_Start_IT+0xd4>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d009      	beq.n	8004808 <HAL_TIM_Base_Start_IT+0x80>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a19      	ldr	r2, [pc, #100]	@ (8004860 <HAL_TIM_Base_Start_IT+0xd8>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d004      	beq.n	8004808 <HAL_TIM_Base_Start_IT+0x80>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a18      	ldr	r2, [pc, #96]	@ (8004864 <HAL_TIM_Base_Start_IT+0xdc>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d111      	bne.n	800482c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 0307 	and.w	r3, r3, #7
 8004812:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2b06      	cmp	r3, #6
 8004818:	d010      	beq.n	800483c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f042 0201 	orr.w	r2, r2, #1
 8004828:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800482a:	e007      	b.n	800483c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f042 0201 	orr.w	r2, r2, #1
 800483a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3714      	adds	r7, #20
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	40010000 	.word	0x40010000
 8004850:	40000400 	.word	0x40000400
 8004854:	40000800 	.word	0x40000800
 8004858:	40000c00 	.word	0x40000c00
 800485c:	40010400 	.word	0x40010400
 8004860:	40014000 	.word	0x40014000
 8004864:	40001800 	.word	0x40001800

08004868 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e041      	b.n	80048fe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d106      	bne.n	8004894 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f7fc feae 	bl	80015f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2202      	movs	r2, #2
 8004898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	3304      	adds	r3, #4
 80048a4:	4619      	mov	r1, r3
 80048a6:	4610      	mov	r0, r2
 80048a8:	f000 fad0 	bl	8004e4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3708      	adds	r7, #8
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b084      	sub	sp, #16
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d020      	beq.n	800496a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d01b      	beq.n	800496a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f06f 0202 	mvn.w	r2, #2
 800493a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	f003 0303 	and.w	r3, r3, #3
 800494c:	2b00      	cmp	r3, #0
 800494e:	d003      	beq.n	8004958 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 fa5c 	bl	8004e0e <HAL_TIM_IC_CaptureCallback>
 8004956:	e005      	b.n	8004964 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 fa4e 	bl	8004dfa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 fa5f 	bl	8004e22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	f003 0304 	and.w	r3, r3, #4
 8004970:	2b00      	cmp	r3, #0
 8004972:	d020      	beq.n	80049b6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f003 0304 	and.w	r3, r3, #4
 800497a:	2b00      	cmp	r3, #0
 800497c:	d01b      	beq.n	80049b6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f06f 0204 	mvn.w	r2, #4
 8004986:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2202      	movs	r2, #2
 800498c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004998:	2b00      	cmp	r3, #0
 800499a:	d003      	beq.n	80049a4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 fa36 	bl	8004e0e <HAL_TIM_IC_CaptureCallback>
 80049a2:	e005      	b.n	80049b0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 fa28 	bl	8004dfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 fa39 	bl	8004e22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	f003 0308 	and.w	r3, r3, #8
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d020      	beq.n	8004a02 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f003 0308 	and.w	r3, r3, #8
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d01b      	beq.n	8004a02 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f06f 0208 	mvn.w	r2, #8
 80049d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2204      	movs	r2, #4
 80049d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	69db      	ldr	r3, [r3, #28]
 80049e0:	f003 0303 	and.w	r3, r3, #3
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d003      	beq.n	80049f0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 fa10 	bl	8004e0e <HAL_TIM_IC_CaptureCallback>
 80049ee:	e005      	b.n	80049fc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 fa02 	bl	8004dfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 fa13 	bl	8004e22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	f003 0310 	and.w	r3, r3, #16
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d020      	beq.n	8004a4e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f003 0310 	and.w	r3, r3, #16
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d01b      	beq.n	8004a4e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f06f 0210 	mvn.w	r2, #16
 8004a1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2208      	movs	r2, #8
 8004a24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	69db      	ldr	r3, [r3, #28]
 8004a2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d003      	beq.n	8004a3c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 f9ea 	bl	8004e0e <HAL_TIM_IC_CaptureCallback>
 8004a3a:	e005      	b.n	8004a48 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f9dc 	bl	8004dfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f9ed 	bl	8004e22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	f003 0301 	and.w	r3, r3, #1
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d00c      	beq.n	8004a72 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d007      	beq.n	8004a72 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f06f 0201 	mvn.w	r2, #1
 8004a6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f7fc f961 	bl	8000d34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00c      	beq.n	8004a96 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d007      	beq.n	8004a96 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004a8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 fd57 	bl	8005544 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00c      	beq.n	8004aba <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d007      	beq.n	8004aba <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004ab2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 f9be 	bl	8004e36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	f003 0320 	and.w	r3, r3, #32
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00c      	beq.n	8004ade <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f003 0320 	and.w	r3, r3, #32
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d007      	beq.n	8004ade <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f06f 0220 	mvn.w	r2, #32
 8004ad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 fd29 	bl	8005530 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ade:	bf00      	nop
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
	...

08004ae8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004af4:	2300      	movs	r3, #0
 8004af6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d101      	bne.n	8004b06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b02:	2302      	movs	r3, #2
 8004b04:	e0ae      	b.n	8004c64 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b0c      	cmp	r3, #12
 8004b12:	f200 809f 	bhi.w	8004c54 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004b16:	a201      	add	r2, pc, #4	@ (adr r2, 8004b1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1c:	08004b51 	.word	0x08004b51
 8004b20:	08004c55 	.word	0x08004c55
 8004b24:	08004c55 	.word	0x08004c55
 8004b28:	08004c55 	.word	0x08004c55
 8004b2c:	08004b91 	.word	0x08004b91
 8004b30:	08004c55 	.word	0x08004c55
 8004b34:	08004c55 	.word	0x08004c55
 8004b38:	08004c55 	.word	0x08004c55
 8004b3c:	08004bd3 	.word	0x08004bd3
 8004b40:	08004c55 	.word	0x08004c55
 8004b44:	08004c55 	.word	0x08004c55
 8004b48:	08004c55 	.word	0x08004c55
 8004b4c:	08004c13 	.word	0x08004c13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68b9      	ldr	r1, [r7, #8]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f000 fa24 	bl	8004fa4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	699a      	ldr	r2, [r3, #24]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f042 0208 	orr.w	r2, r2, #8
 8004b6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	699a      	ldr	r2, [r3, #24]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f022 0204 	bic.w	r2, r2, #4
 8004b7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6999      	ldr	r1, [r3, #24]
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	691a      	ldr	r2, [r3, #16]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	619a      	str	r2, [r3, #24]
      break;
 8004b8e:	e064      	b.n	8004c5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68b9      	ldr	r1, [r7, #8]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f000 fa74 	bl	8005084 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	699a      	ldr	r2, [r3, #24]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004baa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	699a      	ldr	r2, [r3, #24]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6999      	ldr	r1, [r3, #24]
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	021a      	lsls	r2, r3, #8
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	619a      	str	r2, [r3, #24]
      break;
 8004bd0:	e043      	b.n	8004c5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68b9      	ldr	r1, [r7, #8]
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f000 fac9 	bl	8005170 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	69da      	ldr	r2, [r3, #28]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f042 0208 	orr.w	r2, r2, #8
 8004bec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	69da      	ldr	r2, [r3, #28]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f022 0204 	bic.w	r2, r2, #4
 8004bfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	69d9      	ldr	r1, [r3, #28]
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	691a      	ldr	r2, [r3, #16]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	61da      	str	r2, [r3, #28]
      break;
 8004c10:	e023      	b.n	8004c5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68b9      	ldr	r1, [r7, #8]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f000 fb1d 	bl	8005258 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	69da      	ldr	r2, [r3, #28]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	69da      	ldr	r2, [r3, #28]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	69d9      	ldr	r1, [r3, #28]
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	021a      	lsls	r2, r3, #8
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	61da      	str	r2, [r3, #28]
      break;
 8004c52:	e002      	b.n	8004c5a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	75fb      	strb	r3, [r7, #23]
      break;
 8004c58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3718      	adds	r7, #24
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c76:	2300      	movs	r3, #0
 8004c78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d101      	bne.n	8004c88 <HAL_TIM_ConfigClockSource+0x1c>
 8004c84:	2302      	movs	r3, #2
 8004c86:	e0b4      	b.n	8004df2 <HAL_TIM_ConfigClockSource+0x186>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2202      	movs	r2, #2
 8004c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004ca6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68ba      	ldr	r2, [r7, #8]
 8004cb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cc0:	d03e      	beq.n	8004d40 <HAL_TIM_ConfigClockSource+0xd4>
 8004cc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cc6:	f200 8087 	bhi.w	8004dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cce:	f000 8086 	beq.w	8004dde <HAL_TIM_ConfigClockSource+0x172>
 8004cd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cd6:	d87f      	bhi.n	8004dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cd8:	2b70      	cmp	r3, #112	@ 0x70
 8004cda:	d01a      	beq.n	8004d12 <HAL_TIM_ConfigClockSource+0xa6>
 8004cdc:	2b70      	cmp	r3, #112	@ 0x70
 8004cde:	d87b      	bhi.n	8004dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ce0:	2b60      	cmp	r3, #96	@ 0x60
 8004ce2:	d050      	beq.n	8004d86 <HAL_TIM_ConfigClockSource+0x11a>
 8004ce4:	2b60      	cmp	r3, #96	@ 0x60
 8004ce6:	d877      	bhi.n	8004dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ce8:	2b50      	cmp	r3, #80	@ 0x50
 8004cea:	d03c      	beq.n	8004d66 <HAL_TIM_ConfigClockSource+0xfa>
 8004cec:	2b50      	cmp	r3, #80	@ 0x50
 8004cee:	d873      	bhi.n	8004dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cf0:	2b40      	cmp	r3, #64	@ 0x40
 8004cf2:	d058      	beq.n	8004da6 <HAL_TIM_ConfigClockSource+0x13a>
 8004cf4:	2b40      	cmp	r3, #64	@ 0x40
 8004cf6:	d86f      	bhi.n	8004dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cf8:	2b30      	cmp	r3, #48	@ 0x30
 8004cfa:	d064      	beq.n	8004dc6 <HAL_TIM_ConfigClockSource+0x15a>
 8004cfc:	2b30      	cmp	r3, #48	@ 0x30
 8004cfe:	d86b      	bhi.n	8004dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004d00:	2b20      	cmp	r3, #32
 8004d02:	d060      	beq.n	8004dc6 <HAL_TIM_ConfigClockSource+0x15a>
 8004d04:	2b20      	cmp	r3, #32
 8004d06:	d867      	bhi.n	8004dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d05c      	beq.n	8004dc6 <HAL_TIM_ConfigClockSource+0x15a>
 8004d0c:	2b10      	cmp	r3, #16
 8004d0e:	d05a      	beq.n	8004dc6 <HAL_TIM_ConfigClockSource+0x15a>
 8004d10:	e062      	b.n	8004dd8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d22:	f000 fb69 	bl	80053f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68ba      	ldr	r2, [r7, #8]
 8004d3c:	609a      	str	r2, [r3, #8]
      break;
 8004d3e:	e04f      	b.n	8004de0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d50:	f000 fb52 	bl	80053f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689a      	ldr	r2, [r3, #8]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d62:	609a      	str	r2, [r3, #8]
      break;
 8004d64:	e03c      	b.n	8004de0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d72:	461a      	mov	r2, r3
 8004d74:	f000 fac6 	bl	8005304 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2150      	movs	r1, #80	@ 0x50
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 fb1f 	bl	80053c2 <TIM_ITRx_SetConfig>
      break;
 8004d84:	e02c      	b.n	8004de0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d92:	461a      	mov	r2, r3
 8004d94:	f000 fae5 	bl	8005362 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2160      	movs	r1, #96	@ 0x60
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 fb0f 	bl	80053c2 <TIM_ITRx_SetConfig>
      break;
 8004da4:	e01c      	b.n	8004de0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004db2:	461a      	mov	r2, r3
 8004db4:	f000 faa6 	bl	8005304 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2140      	movs	r1, #64	@ 0x40
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 faff 	bl	80053c2 <TIM_ITRx_SetConfig>
      break;
 8004dc4:	e00c      	b.n	8004de0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4619      	mov	r1, r3
 8004dd0:	4610      	mov	r0, r2
 8004dd2:	f000 faf6 	bl	80053c2 <TIM_ITRx_SetConfig>
      break;
 8004dd6:	e003      	b.n	8004de0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	73fb      	strb	r3, [r7, #15]
      break;
 8004ddc:	e000      	b.n	8004de0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004dde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b083      	sub	sp, #12
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e02:	bf00      	nop
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e0e:	b480      	push	{r7}
 8004e10:	b083      	sub	sp, #12
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e16:	bf00      	nop
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr

08004e22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e22:	b480      	push	{r7}
 8004e24:	b083      	sub	sp, #12
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e2a:	bf00      	nop
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b083      	sub	sp, #12
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e3e:	bf00      	nop
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
	...

08004e4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a46      	ldr	r2, [pc, #280]	@ (8004f78 <TIM_Base_SetConfig+0x12c>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d013      	beq.n	8004e8c <TIM_Base_SetConfig+0x40>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e6a:	d00f      	beq.n	8004e8c <TIM_Base_SetConfig+0x40>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a43      	ldr	r2, [pc, #268]	@ (8004f7c <TIM_Base_SetConfig+0x130>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d00b      	beq.n	8004e8c <TIM_Base_SetConfig+0x40>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a42      	ldr	r2, [pc, #264]	@ (8004f80 <TIM_Base_SetConfig+0x134>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d007      	beq.n	8004e8c <TIM_Base_SetConfig+0x40>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a41      	ldr	r2, [pc, #260]	@ (8004f84 <TIM_Base_SetConfig+0x138>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d003      	beq.n	8004e8c <TIM_Base_SetConfig+0x40>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a40      	ldr	r2, [pc, #256]	@ (8004f88 <TIM_Base_SetConfig+0x13c>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d108      	bne.n	8004e9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a35      	ldr	r2, [pc, #212]	@ (8004f78 <TIM_Base_SetConfig+0x12c>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d02b      	beq.n	8004efe <TIM_Base_SetConfig+0xb2>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eac:	d027      	beq.n	8004efe <TIM_Base_SetConfig+0xb2>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a32      	ldr	r2, [pc, #200]	@ (8004f7c <TIM_Base_SetConfig+0x130>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d023      	beq.n	8004efe <TIM_Base_SetConfig+0xb2>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a31      	ldr	r2, [pc, #196]	@ (8004f80 <TIM_Base_SetConfig+0x134>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d01f      	beq.n	8004efe <TIM_Base_SetConfig+0xb2>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a30      	ldr	r2, [pc, #192]	@ (8004f84 <TIM_Base_SetConfig+0x138>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d01b      	beq.n	8004efe <TIM_Base_SetConfig+0xb2>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a2f      	ldr	r2, [pc, #188]	@ (8004f88 <TIM_Base_SetConfig+0x13c>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d017      	beq.n	8004efe <TIM_Base_SetConfig+0xb2>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a2e      	ldr	r2, [pc, #184]	@ (8004f8c <TIM_Base_SetConfig+0x140>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d013      	beq.n	8004efe <TIM_Base_SetConfig+0xb2>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a2d      	ldr	r2, [pc, #180]	@ (8004f90 <TIM_Base_SetConfig+0x144>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d00f      	beq.n	8004efe <TIM_Base_SetConfig+0xb2>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a2c      	ldr	r2, [pc, #176]	@ (8004f94 <TIM_Base_SetConfig+0x148>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d00b      	beq.n	8004efe <TIM_Base_SetConfig+0xb2>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a2b      	ldr	r2, [pc, #172]	@ (8004f98 <TIM_Base_SetConfig+0x14c>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d007      	beq.n	8004efe <TIM_Base_SetConfig+0xb2>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a2a      	ldr	r2, [pc, #168]	@ (8004f9c <TIM_Base_SetConfig+0x150>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d003      	beq.n	8004efe <TIM_Base_SetConfig+0xb2>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a29      	ldr	r2, [pc, #164]	@ (8004fa0 <TIM_Base_SetConfig+0x154>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d108      	bne.n	8004f10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	689a      	ldr	r2, [r3, #8]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a10      	ldr	r2, [pc, #64]	@ (8004f78 <TIM_Base_SetConfig+0x12c>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d003      	beq.n	8004f44 <TIM_Base_SetConfig+0xf8>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a12      	ldr	r2, [pc, #72]	@ (8004f88 <TIM_Base_SetConfig+0x13c>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d103      	bne.n	8004f4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	691a      	ldr	r2, [r3, #16]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d105      	bne.n	8004f6a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	f023 0201 	bic.w	r2, r3, #1
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	611a      	str	r2, [r3, #16]
  }
}
 8004f6a:	bf00      	nop
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	40010000 	.word	0x40010000
 8004f7c:	40000400 	.word	0x40000400
 8004f80:	40000800 	.word	0x40000800
 8004f84:	40000c00 	.word	0x40000c00
 8004f88:	40010400 	.word	0x40010400
 8004f8c:	40014000 	.word	0x40014000
 8004f90:	40014400 	.word	0x40014400
 8004f94:	40014800 	.word	0x40014800
 8004f98:	40001800 	.word	0x40001800
 8004f9c:	40001c00 	.word	0x40001c00
 8004fa0:	40002000 	.word	0x40002000

08004fa4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b087      	sub	sp, #28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a1b      	ldr	r3, [r3, #32]
 8004fb8:	f023 0201 	bic.w	r2, r3, #1
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f023 0303 	bic.w	r3, r3, #3
 8004fda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f023 0302 	bic.w	r3, r3, #2
 8004fec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a20      	ldr	r2, [pc, #128]	@ (800507c <TIM_OC1_SetConfig+0xd8>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d003      	beq.n	8005008 <TIM_OC1_SetConfig+0x64>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a1f      	ldr	r2, [pc, #124]	@ (8005080 <TIM_OC1_SetConfig+0xdc>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d10c      	bne.n	8005022 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	f023 0308 	bic.w	r3, r3, #8
 800500e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	4313      	orrs	r3, r2
 8005018:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f023 0304 	bic.w	r3, r3, #4
 8005020:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a15      	ldr	r2, [pc, #84]	@ (800507c <TIM_OC1_SetConfig+0xd8>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d003      	beq.n	8005032 <TIM_OC1_SetConfig+0x8e>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a14      	ldr	r2, [pc, #80]	@ (8005080 <TIM_OC1_SetConfig+0xdc>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d111      	bne.n	8005056 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005038:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005040:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	4313      	orrs	r3, r2
 800504a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	4313      	orrs	r3, r2
 8005054:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	685a      	ldr	r2, [r3, #4]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	697a      	ldr	r2, [r7, #20]
 800506e:	621a      	str	r2, [r3, #32]
}
 8005070:	bf00      	nop
 8005072:	371c      	adds	r7, #28
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr
 800507c:	40010000 	.word	0x40010000
 8005080:	40010400 	.word	0x40010400

08005084 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005084:	b480      	push	{r7}
 8005086:	b087      	sub	sp, #28
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	f023 0210 	bic.w	r2, r3, #16
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	021b      	lsls	r3, r3, #8
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	f023 0320 	bic.w	r3, r3, #32
 80050ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	011b      	lsls	r3, r3, #4
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	4313      	orrs	r3, r2
 80050da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a22      	ldr	r2, [pc, #136]	@ (8005168 <TIM_OC2_SetConfig+0xe4>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d003      	beq.n	80050ec <TIM_OC2_SetConfig+0x68>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a21      	ldr	r2, [pc, #132]	@ (800516c <TIM_OC2_SetConfig+0xe8>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d10d      	bne.n	8005108 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	011b      	lsls	r3, r3, #4
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005106:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a17      	ldr	r2, [pc, #92]	@ (8005168 <TIM_OC2_SetConfig+0xe4>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d003      	beq.n	8005118 <TIM_OC2_SetConfig+0x94>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a16      	ldr	r2, [pc, #88]	@ (800516c <TIM_OC2_SetConfig+0xe8>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d113      	bne.n	8005140 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800511e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005126:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	695b      	ldr	r3, [r3, #20]
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	4313      	orrs	r3, r2
 8005132:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	4313      	orrs	r3, r2
 800513e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	685a      	ldr	r2, [r3, #4]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	621a      	str	r2, [r3, #32]
}
 800515a:	bf00      	nop
 800515c:	371c      	adds	r7, #28
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	40010000 	.word	0x40010000
 800516c:	40010400 	.word	0x40010400

08005170 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005170:	b480      	push	{r7}
 8005172:	b087      	sub	sp, #28
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a1b      	ldr	r3, [r3, #32]
 8005184:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	69db      	ldr	r3, [r3, #28]
 8005196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800519e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f023 0303 	bic.w	r3, r3, #3
 80051a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80051b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	021b      	lsls	r3, r3, #8
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a21      	ldr	r2, [pc, #132]	@ (8005250 <TIM_OC3_SetConfig+0xe0>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d003      	beq.n	80051d6 <TIM_OC3_SetConfig+0x66>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a20      	ldr	r2, [pc, #128]	@ (8005254 <TIM_OC3_SetConfig+0xe4>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d10d      	bne.n	80051f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80051dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	021b      	lsls	r3, r3, #8
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a16      	ldr	r2, [pc, #88]	@ (8005250 <TIM_OC3_SetConfig+0xe0>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d003      	beq.n	8005202 <TIM_OC3_SetConfig+0x92>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a15      	ldr	r2, [pc, #84]	@ (8005254 <TIM_OC3_SetConfig+0xe4>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d113      	bne.n	800522a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005208:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005210:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	011b      	lsls	r3, r3, #4
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	4313      	orrs	r3, r2
 800521c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	011b      	lsls	r3, r3, #4
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	4313      	orrs	r3, r2
 8005228:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	685a      	ldr	r2, [r3, #4]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	621a      	str	r2, [r3, #32]
}
 8005244:	bf00      	nop
 8005246:	371c      	adds	r7, #28
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr
 8005250:	40010000 	.word	0x40010000
 8005254:	40010400 	.word	0x40010400

08005258 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005258:	b480      	push	{r7}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	69db      	ldr	r3, [r3, #28]
 800527e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800528e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	021b      	lsls	r3, r3, #8
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	4313      	orrs	r3, r2
 800529a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80052a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	031b      	lsls	r3, r3, #12
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a12      	ldr	r2, [pc, #72]	@ (80052fc <TIM_OC4_SetConfig+0xa4>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d003      	beq.n	80052c0 <TIM_OC4_SetConfig+0x68>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a11      	ldr	r2, [pc, #68]	@ (8005300 <TIM_OC4_SetConfig+0xa8>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d109      	bne.n	80052d4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80052c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	019b      	lsls	r3, r3, #6
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	685a      	ldr	r2, [r3, #4]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	621a      	str	r2, [r3, #32]
}
 80052ee:	bf00      	nop
 80052f0:	371c      	adds	r7, #28
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	40010000 	.word	0x40010000
 8005300:	40010400 	.word	0x40010400

08005304 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005304:	b480      	push	{r7}
 8005306:	b087      	sub	sp, #28
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6a1b      	ldr	r3, [r3, #32]
 8005314:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	f023 0201 	bic.w	r2, r3, #1
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800532e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	011b      	lsls	r3, r3, #4
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	4313      	orrs	r3, r2
 8005338:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f023 030a 	bic.w	r3, r3, #10
 8005340:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	4313      	orrs	r3, r2
 8005348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	621a      	str	r2, [r3, #32]
}
 8005356:	bf00      	nop
 8005358:	371c      	adds	r7, #28
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005362:	b480      	push	{r7}
 8005364:	b087      	sub	sp, #28
 8005366:	af00      	add	r7, sp, #0
 8005368:	60f8      	str	r0, [r7, #12]
 800536a:	60b9      	str	r1, [r7, #8]
 800536c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6a1b      	ldr	r3, [r3, #32]
 8005378:	f023 0210 	bic.w	r2, r3, #16
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800538c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	031b      	lsls	r3, r3, #12
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	4313      	orrs	r3, r2
 8005396:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800539e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	011b      	lsls	r3, r3, #4
 80053a4:	697a      	ldr	r2, [r7, #20]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	621a      	str	r2, [r3, #32]
}
 80053b6:	bf00      	nop
 80053b8:	371c      	adds	r7, #28
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b085      	sub	sp, #20
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
 80053ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053da:	683a      	ldr	r2, [r7, #0]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	4313      	orrs	r3, r2
 80053e0:	f043 0307 	orr.w	r3, r3, #7
 80053e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	609a      	str	r2, [r3, #8]
}
 80053ec:	bf00      	nop
 80053ee:	3714      	adds	r7, #20
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b087      	sub	sp, #28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
 8005404:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005412:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	021a      	lsls	r2, r3, #8
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	431a      	orrs	r2, r3
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	4313      	orrs	r3, r2
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	4313      	orrs	r3, r2
 8005424:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	609a      	str	r2, [r3, #8]
}
 800542c:	bf00      	nop
 800542e:	371c      	adds	r7, #28
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005448:	2b01      	cmp	r3, #1
 800544a:	d101      	bne.n	8005450 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800544c:	2302      	movs	r3, #2
 800544e:	e05a      	b.n	8005506 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005476:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	4313      	orrs	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a21      	ldr	r2, [pc, #132]	@ (8005514 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d022      	beq.n	80054da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800549c:	d01d      	beq.n	80054da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a1d      	ldr	r2, [pc, #116]	@ (8005518 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d018      	beq.n	80054da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a1b      	ldr	r2, [pc, #108]	@ (800551c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d013      	beq.n	80054da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a1a      	ldr	r2, [pc, #104]	@ (8005520 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d00e      	beq.n	80054da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a18      	ldr	r2, [pc, #96]	@ (8005524 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d009      	beq.n	80054da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a17      	ldr	r2, [pc, #92]	@ (8005528 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d004      	beq.n	80054da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a15      	ldr	r2, [pc, #84]	@ (800552c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d10c      	bne.n	80054f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	68ba      	ldr	r2, [r7, #8]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3714      	adds	r7, #20
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	40010000 	.word	0x40010000
 8005518:	40000400 	.word	0x40000400
 800551c:	40000800 	.word	0x40000800
 8005520:	40000c00 	.word	0x40000c00
 8005524:	40010400 	.word	0x40010400
 8005528:	40014000 	.word	0x40014000
 800552c:	40001800 	.word	0x40001800

08005530 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005538:	bf00      	nop
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d101      	bne.n	800556a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e042      	b.n	80055f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b00      	cmp	r3, #0
 8005574:	d106      	bne.n	8005584 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f7fc f978 	bl	8001874 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2224      	movs	r2, #36	@ 0x24
 8005588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68da      	ldr	r2, [r3, #12]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800559a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 f82b 	bl	80055f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	691a      	ldr	r2, [r3, #16]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80055b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	695a      	ldr	r2, [r3, #20]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80055c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68da      	ldr	r2, [r3, #12]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80055d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2220      	movs	r2, #32
 80055dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2220      	movs	r2, #32
 80055e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055fc:	b0c0      	sub	sp, #256	@ 0x100
 80055fe:	af00      	add	r7, sp, #0
 8005600:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005614:	68d9      	ldr	r1, [r3, #12]
 8005616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	ea40 0301 	orr.w	r3, r0, r1
 8005620:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005626:	689a      	ldr	r2, [r3, #8]
 8005628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	431a      	orrs	r2, r3
 8005630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	431a      	orrs	r2, r3
 8005638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800563c:	69db      	ldr	r3, [r3, #28]
 800563e:	4313      	orrs	r3, r2
 8005640:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005650:	f021 010c 	bic.w	r1, r1, #12
 8005654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800565e:	430b      	orrs	r3, r1
 8005660:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800566e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005672:	6999      	ldr	r1, [r3, #24]
 8005674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	ea40 0301 	orr.w	r3, r0, r1
 800567e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	4b8f      	ldr	r3, [pc, #572]	@ (80058c4 <UART_SetConfig+0x2cc>)
 8005688:	429a      	cmp	r2, r3
 800568a:	d005      	beq.n	8005698 <UART_SetConfig+0xa0>
 800568c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	4b8d      	ldr	r3, [pc, #564]	@ (80058c8 <UART_SetConfig+0x2d0>)
 8005694:	429a      	cmp	r2, r3
 8005696:	d104      	bne.n	80056a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005698:	f7fe fa0e 	bl	8003ab8 <HAL_RCC_GetPCLK2Freq>
 800569c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80056a0:	e003      	b.n	80056aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80056a2:	f7fe f9f5 	bl	8003a90 <HAL_RCC_GetPCLK1Freq>
 80056a6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ae:	69db      	ldr	r3, [r3, #28]
 80056b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056b4:	f040 810c 	bne.w	80058d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056bc:	2200      	movs	r2, #0
 80056be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80056c2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80056c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80056ca:	4622      	mov	r2, r4
 80056cc:	462b      	mov	r3, r5
 80056ce:	1891      	adds	r1, r2, r2
 80056d0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80056d2:	415b      	adcs	r3, r3
 80056d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80056d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80056da:	4621      	mov	r1, r4
 80056dc:	eb12 0801 	adds.w	r8, r2, r1
 80056e0:	4629      	mov	r1, r5
 80056e2:	eb43 0901 	adc.w	r9, r3, r1
 80056e6:	f04f 0200 	mov.w	r2, #0
 80056ea:	f04f 0300 	mov.w	r3, #0
 80056ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056fa:	4690      	mov	r8, r2
 80056fc:	4699      	mov	r9, r3
 80056fe:	4623      	mov	r3, r4
 8005700:	eb18 0303 	adds.w	r3, r8, r3
 8005704:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005708:	462b      	mov	r3, r5
 800570a:	eb49 0303 	adc.w	r3, r9, r3
 800570e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800571e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005722:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005726:	460b      	mov	r3, r1
 8005728:	18db      	adds	r3, r3, r3
 800572a:	653b      	str	r3, [r7, #80]	@ 0x50
 800572c:	4613      	mov	r3, r2
 800572e:	eb42 0303 	adc.w	r3, r2, r3
 8005732:	657b      	str	r3, [r7, #84]	@ 0x54
 8005734:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005738:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800573c:	f7fa fd98 	bl	8000270 <__aeabi_uldivmod>
 8005740:	4602      	mov	r2, r0
 8005742:	460b      	mov	r3, r1
 8005744:	4b61      	ldr	r3, [pc, #388]	@ (80058cc <UART_SetConfig+0x2d4>)
 8005746:	fba3 2302 	umull	r2, r3, r3, r2
 800574a:	095b      	lsrs	r3, r3, #5
 800574c:	011c      	lsls	r4, r3, #4
 800574e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005752:	2200      	movs	r2, #0
 8005754:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005758:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800575c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005760:	4642      	mov	r2, r8
 8005762:	464b      	mov	r3, r9
 8005764:	1891      	adds	r1, r2, r2
 8005766:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005768:	415b      	adcs	r3, r3
 800576a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800576c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005770:	4641      	mov	r1, r8
 8005772:	eb12 0a01 	adds.w	sl, r2, r1
 8005776:	4649      	mov	r1, r9
 8005778:	eb43 0b01 	adc.w	fp, r3, r1
 800577c:	f04f 0200 	mov.w	r2, #0
 8005780:	f04f 0300 	mov.w	r3, #0
 8005784:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005788:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800578c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005790:	4692      	mov	sl, r2
 8005792:	469b      	mov	fp, r3
 8005794:	4643      	mov	r3, r8
 8005796:	eb1a 0303 	adds.w	r3, sl, r3
 800579a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800579e:	464b      	mov	r3, r9
 80057a0:	eb4b 0303 	adc.w	r3, fp, r3
 80057a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80057a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80057b4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80057b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80057bc:	460b      	mov	r3, r1
 80057be:	18db      	adds	r3, r3, r3
 80057c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80057c2:	4613      	mov	r3, r2
 80057c4:	eb42 0303 	adc.w	r3, r2, r3
 80057c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80057ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80057ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80057d2:	f7fa fd4d 	bl	8000270 <__aeabi_uldivmod>
 80057d6:	4602      	mov	r2, r0
 80057d8:	460b      	mov	r3, r1
 80057da:	4611      	mov	r1, r2
 80057dc:	4b3b      	ldr	r3, [pc, #236]	@ (80058cc <UART_SetConfig+0x2d4>)
 80057de:	fba3 2301 	umull	r2, r3, r3, r1
 80057e2:	095b      	lsrs	r3, r3, #5
 80057e4:	2264      	movs	r2, #100	@ 0x64
 80057e6:	fb02 f303 	mul.w	r3, r2, r3
 80057ea:	1acb      	subs	r3, r1, r3
 80057ec:	00db      	lsls	r3, r3, #3
 80057ee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80057f2:	4b36      	ldr	r3, [pc, #216]	@ (80058cc <UART_SetConfig+0x2d4>)
 80057f4:	fba3 2302 	umull	r2, r3, r3, r2
 80057f8:	095b      	lsrs	r3, r3, #5
 80057fa:	005b      	lsls	r3, r3, #1
 80057fc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005800:	441c      	add	r4, r3
 8005802:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005806:	2200      	movs	r2, #0
 8005808:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800580c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005810:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005814:	4642      	mov	r2, r8
 8005816:	464b      	mov	r3, r9
 8005818:	1891      	adds	r1, r2, r2
 800581a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800581c:	415b      	adcs	r3, r3
 800581e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005820:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005824:	4641      	mov	r1, r8
 8005826:	1851      	adds	r1, r2, r1
 8005828:	6339      	str	r1, [r7, #48]	@ 0x30
 800582a:	4649      	mov	r1, r9
 800582c:	414b      	adcs	r3, r1
 800582e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005830:	f04f 0200 	mov.w	r2, #0
 8005834:	f04f 0300 	mov.w	r3, #0
 8005838:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800583c:	4659      	mov	r1, fp
 800583e:	00cb      	lsls	r3, r1, #3
 8005840:	4651      	mov	r1, sl
 8005842:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005846:	4651      	mov	r1, sl
 8005848:	00ca      	lsls	r2, r1, #3
 800584a:	4610      	mov	r0, r2
 800584c:	4619      	mov	r1, r3
 800584e:	4603      	mov	r3, r0
 8005850:	4642      	mov	r2, r8
 8005852:	189b      	adds	r3, r3, r2
 8005854:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005858:	464b      	mov	r3, r9
 800585a:	460a      	mov	r2, r1
 800585c:	eb42 0303 	adc.w	r3, r2, r3
 8005860:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005870:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005874:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005878:	460b      	mov	r3, r1
 800587a:	18db      	adds	r3, r3, r3
 800587c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800587e:	4613      	mov	r3, r2
 8005880:	eb42 0303 	adc.w	r3, r2, r3
 8005884:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005886:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800588a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800588e:	f7fa fcef 	bl	8000270 <__aeabi_uldivmod>
 8005892:	4602      	mov	r2, r0
 8005894:	460b      	mov	r3, r1
 8005896:	4b0d      	ldr	r3, [pc, #52]	@ (80058cc <UART_SetConfig+0x2d4>)
 8005898:	fba3 1302 	umull	r1, r3, r3, r2
 800589c:	095b      	lsrs	r3, r3, #5
 800589e:	2164      	movs	r1, #100	@ 0x64
 80058a0:	fb01 f303 	mul.w	r3, r1, r3
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	00db      	lsls	r3, r3, #3
 80058a8:	3332      	adds	r3, #50	@ 0x32
 80058aa:	4a08      	ldr	r2, [pc, #32]	@ (80058cc <UART_SetConfig+0x2d4>)
 80058ac:	fba2 2303 	umull	r2, r3, r2, r3
 80058b0:	095b      	lsrs	r3, r3, #5
 80058b2:	f003 0207 	and.w	r2, r3, #7
 80058b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4422      	add	r2, r4
 80058be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058c0:	e106      	b.n	8005ad0 <UART_SetConfig+0x4d8>
 80058c2:	bf00      	nop
 80058c4:	40011000 	.word	0x40011000
 80058c8:	40011400 	.word	0x40011400
 80058cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058d4:	2200      	movs	r2, #0
 80058d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80058da:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80058de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80058e2:	4642      	mov	r2, r8
 80058e4:	464b      	mov	r3, r9
 80058e6:	1891      	adds	r1, r2, r2
 80058e8:	6239      	str	r1, [r7, #32]
 80058ea:	415b      	adcs	r3, r3
 80058ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80058ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058f2:	4641      	mov	r1, r8
 80058f4:	1854      	adds	r4, r2, r1
 80058f6:	4649      	mov	r1, r9
 80058f8:	eb43 0501 	adc.w	r5, r3, r1
 80058fc:	f04f 0200 	mov.w	r2, #0
 8005900:	f04f 0300 	mov.w	r3, #0
 8005904:	00eb      	lsls	r3, r5, #3
 8005906:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800590a:	00e2      	lsls	r2, r4, #3
 800590c:	4614      	mov	r4, r2
 800590e:	461d      	mov	r5, r3
 8005910:	4643      	mov	r3, r8
 8005912:	18e3      	adds	r3, r4, r3
 8005914:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005918:	464b      	mov	r3, r9
 800591a:	eb45 0303 	adc.w	r3, r5, r3
 800591e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800592e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005932:	f04f 0200 	mov.w	r2, #0
 8005936:	f04f 0300 	mov.w	r3, #0
 800593a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800593e:	4629      	mov	r1, r5
 8005940:	008b      	lsls	r3, r1, #2
 8005942:	4621      	mov	r1, r4
 8005944:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005948:	4621      	mov	r1, r4
 800594a:	008a      	lsls	r2, r1, #2
 800594c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005950:	f7fa fc8e 	bl	8000270 <__aeabi_uldivmod>
 8005954:	4602      	mov	r2, r0
 8005956:	460b      	mov	r3, r1
 8005958:	4b60      	ldr	r3, [pc, #384]	@ (8005adc <UART_SetConfig+0x4e4>)
 800595a:	fba3 2302 	umull	r2, r3, r3, r2
 800595e:	095b      	lsrs	r3, r3, #5
 8005960:	011c      	lsls	r4, r3, #4
 8005962:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005966:	2200      	movs	r2, #0
 8005968:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800596c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005970:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005974:	4642      	mov	r2, r8
 8005976:	464b      	mov	r3, r9
 8005978:	1891      	adds	r1, r2, r2
 800597a:	61b9      	str	r1, [r7, #24]
 800597c:	415b      	adcs	r3, r3
 800597e:	61fb      	str	r3, [r7, #28]
 8005980:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005984:	4641      	mov	r1, r8
 8005986:	1851      	adds	r1, r2, r1
 8005988:	6139      	str	r1, [r7, #16]
 800598a:	4649      	mov	r1, r9
 800598c:	414b      	adcs	r3, r1
 800598e:	617b      	str	r3, [r7, #20]
 8005990:	f04f 0200 	mov.w	r2, #0
 8005994:	f04f 0300 	mov.w	r3, #0
 8005998:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800599c:	4659      	mov	r1, fp
 800599e:	00cb      	lsls	r3, r1, #3
 80059a0:	4651      	mov	r1, sl
 80059a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059a6:	4651      	mov	r1, sl
 80059a8:	00ca      	lsls	r2, r1, #3
 80059aa:	4610      	mov	r0, r2
 80059ac:	4619      	mov	r1, r3
 80059ae:	4603      	mov	r3, r0
 80059b0:	4642      	mov	r2, r8
 80059b2:	189b      	adds	r3, r3, r2
 80059b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80059b8:	464b      	mov	r3, r9
 80059ba:	460a      	mov	r2, r1
 80059bc:	eb42 0303 	adc.w	r3, r2, r3
 80059c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80059c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80059ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80059d0:	f04f 0200 	mov.w	r2, #0
 80059d4:	f04f 0300 	mov.w	r3, #0
 80059d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80059dc:	4649      	mov	r1, r9
 80059de:	008b      	lsls	r3, r1, #2
 80059e0:	4641      	mov	r1, r8
 80059e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059e6:	4641      	mov	r1, r8
 80059e8:	008a      	lsls	r2, r1, #2
 80059ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80059ee:	f7fa fc3f 	bl	8000270 <__aeabi_uldivmod>
 80059f2:	4602      	mov	r2, r0
 80059f4:	460b      	mov	r3, r1
 80059f6:	4611      	mov	r1, r2
 80059f8:	4b38      	ldr	r3, [pc, #224]	@ (8005adc <UART_SetConfig+0x4e4>)
 80059fa:	fba3 2301 	umull	r2, r3, r3, r1
 80059fe:	095b      	lsrs	r3, r3, #5
 8005a00:	2264      	movs	r2, #100	@ 0x64
 8005a02:	fb02 f303 	mul.w	r3, r2, r3
 8005a06:	1acb      	subs	r3, r1, r3
 8005a08:	011b      	lsls	r3, r3, #4
 8005a0a:	3332      	adds	r3, #50	@ 0x32
 8005a0c:	4a33      	ldr	r2, [pc, #204]	@ (8005adc <UART_SetConfig+0x4e4>)
 8005a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a12:	095b      	lsrs	r3, r3, #5
 8005a14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a18:	441c      	add	r4, r3
 8005a1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a1e:	2200      	movs	r2, #0
 8005a20:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a22:	677a      	str	r2, [r7, #116]	@ 0x74
 8005a24:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005a28:	4642      	mov	r2, r8
 8005a2a:	464b      	mov	r3, r9
 8005a2c:	1891      	adds	r1, r2, r2
 8005a2e:	60b9      	str	r1, [r7, #8]
 8005a30:	415b      	adcs	r3, r3
 8005a32:	60fb      	str	r3, [r7, #12]
 8005a34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a38:	4641      	mov	r1, r8
 8005a3a:	1851      	adds	r1, r2, r1
 8005a3c:	6039      	str	r1, [r7, #0]
 8005a3e:	4649      	mov	r1, r9
 8005a40:	414b      	adcs	r3, r1
 8005a42:	607b      	str	r3, [r7, #4]
 8005a44:	f04f 0200 	mov.w	r2, #0
 8005a48:	f04f 0300 	mov.w	r3, #0
 8005a4c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a50:	4659      	mov	r1, fp
 8005a52:	00cb      	lsls	r3, r1, #3
 8005a54:	4651      	mov	r1, sl
 8005a56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a5a:	4651      	mov	r1, sl
 8005a5c:	00ca      	lsls	r2, r1, #3
 8005a5e:	4610      	mov	r0, r2
 8005a60:	4619      	mov	r1, r3
 8005a62:	4603      	mov	r3, r0
 8005a64:	4642      	mov	r2, r8
 8005a66:	189b      	adds	r3, r3, r2
 8005a68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a6a:	464b      	mov	r3, r9
 8005a6c:	460a      	mov	r2, r1
 8005a6e:	eb42 0303 	adc.w	r3, r2, r3
 8005a72:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a7e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005a80:	f04f 0200 	mov.w	r2, #0
 8005a84:	f04f 0300 	mov.w	r3, #0
 8005a88:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005a8c:	4649      	mov	r1, r9
 8005a8e:	008b      	lsls	r3, r1, #2
 8005a90:	4641      	mov	r1, r8
 8005a92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a96:	4641      	mov	r1, r8
 8005a98:	008a      	lsls	r2, r1, #2
 8005a9a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005a9e:	f7fa fbe7 	bl	8000270 <__aeabi_uldivmod>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8005adc <UART_SetConfig+0x4e4>)
 8005aa8:	fba3 1302 	umull	r1, r3, r3, r2
 8005aac:	095b      	lsrs	r3, r3, #5
 8005aae:	2164      	movs	r1, #100	@ 0x64
 8005ab0:	fb01 f303 	mul.w	r3, r1, r3
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	011b      	lsls	r3, r3, #4
 8005ab8:	3332      	adds	r3, #50	@ 0x32
 8005aba:	4a08      	ldr	r2, [pc, #32]	@ (8005adc <UART_SetConfig+0x4e4>)
 8005abc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac0:	095b      	lsrs	r3, r3, #5
 8005ac2:	f003 020f 	and.w	r2, r3, #15
 8005ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4422      	add	r2, r4
 8005ace:	609a      	str	r2, [r3, #8]
}
 8005ad0:	bf00      	nop
 8005ad2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005adc:	51eb851f 	.word	0x51eb851f

08005ae0 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	689a      	ldr	r2, [r3, #8]
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	683a      	ldr	r2, [r7, #0]
 8005b04:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	683a      	ldr	r2, [r7, #0]
 8005b0a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	1c5a      	adds	r2, r3, #1
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	601a      	str	r2, [r3, #0]
}
 8005b1c:	bf00      	nop
 8005b1e:	3714      	adds	r7, #20
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	6892      	ldr	r2, [r2, #8]
 8005b3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	6852      	ldr	r2, [r2, #4]
 8005b48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d103      	bne.n	8005b5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	689a      	ldr	r2, [r3, #8]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	1e5a      	subs	r2, r3, #1
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3714      	adds	r7, #20
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b086      	sub	sp, #24
 8005b80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005b82:	2300      	movs	r3, #0
 8005b84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b86:	4b4f      	ldr	r3, [pc, #316]	@ (8005cc4 <xTaskIncrementTick+0x148>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f040 808f 	bne.w	8005cae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005b90:	4b4d      	ldr	r3, [pc, #308]	@ (8005cc8 <xTaskIncrementTick+0x14c>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	3301      	adds	r3, #1
 8005b96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005b98:	4a4b      	ldr	r2, [pc, #300]	@ (8005cc8 <xTaskIncrementTick+0x14c>)
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d121      	bne.n	8005be8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005ba4:	4b49      	ldr	r3, [pc, #292]	@ (8005ccc <xTaskIncrementTick+0x150>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00b      	beq.n	8005bc6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bb2:	f383 8811 	msr	BASEPRI, r3
 8005bb6:	f3bf 8f6f 	isb	sy
 8005bba:	f3bf 8f4f 	dsb	sy
 8005bbe:	603b      	str	r3, [r7, #0]
}
 8005bc0:	bf00      	nop
 8005bc2:	bf00      	nop
 8005bc4:	e7fd      	b.n	8005bc2 <xTaskIncrementTick+0x46>
 8005bc6:	4b41      	ldr	r3, [pc, #260]	@ (8005ccc <xTaskIncrementTick+0x150>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	60fb      	str	r3, [r7, #12]
 8005bcc:	4b40      	ldr	r3, [pc, #256]	@ (8005cd0 <xTaskIncrementTick+0x154>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a3e      	ldr	r2, [pc, #248]	@ (8005ccc <xTaskIncrementTick+0x150>)
 8005bd2:	6013      	str	r3, [r2, #0]
 8005bd4:	4a3e      	ldr	r2, [pc, #248]	@ (8005cd0 <xTaskIncrementTick+0x154>)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6013      	str	r3, [r2, #0]
 8005bda:	4b3e      	ldr	r3, [pc, #248]	@ (8005cd4 <xTaskIncrementTick+0x158>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	3301      	adds	r3, #1
 8005be0:	4a3c      	ldr	r2, [pc, #240]	@ (8005cd4 <xTaskIncrementTick+0x158>)
 8005be2:	6013      	str	r3, [r2, #0]
 8005be4:	f000 f8e0 	bl	8005da8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005be8:	4b3b      	ldr	r3, [pc, #236]	@ (8005cd8 <xTaskIncrementTick+0x15c>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d348      	bcc.n	8005c84 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bf2:	4b36      	ldr	r3, [pc, #216]	@ (8005ccc <xTaskIncrementTick+0x150>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d104      	bne.n	8005c06 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bfc:	4b36      	ldr	r3, [pc, #216]	@ (8005cd8 <xTaskIncrementTick+0x15c>)
 8005bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8005c02:	601a      	str	r2, [r3, #0]
					break;
 8005c04:	e03e      	b.n	8005c84 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c06:	4b31      	ldr	r3, [pc, #196]	@ (8005ccc <xTaskIncrementTick+0x150>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d203      	bcs.n	8005c26 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005c1e:	4a2e      	ldr	r2, [pc, #184]	@ (8005cd8 <xTaskIncrementTick+0x15c>)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005c24:	e02e      	b.n	8005c84 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	3304      	adds	r3, #4
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7ff ff7c 	bl	8005b28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d004      	beq.n	8005c42 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	3318      	adds	r3, #24
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f7ff ff73 	bl	8005b28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c46:	2201      	movs	r2, #1
 8005c48:	409a      	lsls	r2, r3
 8005c4a:	4b24      	ldr	r3, [pc, #144]	@ (8005cdc <xTaskIncrementTick+0x160>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	4a22      	ldr	r2, [pc, #136]	@ (8005cdc <xTaskIncrementTick+0x160>)
 8005c52:	6013      	str	r3, [r2, #0]
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c58:	4613      	mov	r3, r2
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	4413      	add	r3, r2
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	4a1f      	ldr	r2, [pc, #124]	@ (8005ce0 <xTaskIncrementTick+0x164>)
 8005c62:	441a      	add	r2, r3
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	3304      	adds	r3, #4
 8005c68:	4619      	mov	r1, r3
 8005c6a:	4610      	mov	r0, r2
 8005c6c:	f7ff ff38 	bl	8005ae0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c74:	4b1b      	ldr	r3, [pc, #108]	@ (8005ce4 <xTaskIncrementTick+0x168>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d3b9      	bcc.n	8005bf2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c82:	e7b6      	b.n	8005bf2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005c84:	4b17      	ldr	r3, [pc, #92]	@ (8005ce4 <xTaskIncrementTick+0x168>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c8a:	4915      	ldr	r1, [pc, #84]	@ (8005ce0 <xTaskIncrementTick+0x164>)
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	4413      	add	r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	440b      	add	r3, r1
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d901      	bls.n	8005ca0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005ca0:	4b11      	ldr	r3, [pc, #68]	@ (8005ce8 <xTaskIncrementTick+0x16c>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d007      	beq.n	8005cb8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	617b      	str	r3, [r7, #20]
 8005cac:	e004      	b.n	8005cb8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005cae:	4b0f      	ldr	r3, [pc, #60]	@ (8005cec <xTaskIncrementTick+0x170>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8005cec <xTaskIncrementTick+0x170>)
 8005cb6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005cb8:	697b      	ldr	r3, [r7, #20]
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3718      	adds	r7, #24
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	2000055c 	.word	0x2000055c
 8005cc8:	20000544 	.word	0x20000544
 8005ccc:	2000053c 	.word	0x2000053c
 8005cd0:	20000540 	.word	0x20000540
 8005cd4:	20000554 	.word	0x20000554
 8005cd8:	20000558 	.word	0x20000558
 8005cdc:	20000548 	.word	0x20000548
 8005ce0:	200004b0 	.word	0x200004b0
 8005ce4:	200004ac 	.word	0x200004ac
 8005ce8:	20000550 	.word	0x20000550
 8005cec:	2000054c 	.word	0x2000054c

08005cf0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b087      	sub	sp, #28
 8005cf4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005cf6:	4b27      	ldr	r3, [pc, #156]	@ (8005d94 <vTaskSwitchContext+0xa4>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d003      	beq.n	8005d06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005cfe:	4b26      	ldr	r3, [pc, #152]	@ (8005d98 <vTaskSwitchContext+0xa8>)
 8005d00:	2201      	movs	r2, #1
 8005d02:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005d04:	e040      	b.n	8005d88 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005d06:	4b24      	ldr	r3, [pc, #144]	@ (8005d98 <vTaskSwitchContext+0xa8>)
 8005d08:	2200      	movs	r2, #0
 8005d0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d0c:	4b23      	ldr	r3, [pc, #140]	@ (8005d9c <vTaskSwitchContext+0xac>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	fab3 f383 	clz	r3, r3
 8005d18:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005d1a:	7afb      	ldrb	r3, [r7, #11]
 8005d1c:	f1c3 031f 	rsb	r3, r3, #31
 8005d20:	617b      	str	r3, [r7, #20]
 8005d22:	491f      	ldr	r1, [pc, #124]	@ (8005da0 <vTaskSwitchContext+0xb0>)
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	4613      	mov	r3, r2
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	4413      	add	r3, r2
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	440b      	add	r3, r1
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10b      	bne.n	8005d4e <vTaskSwitchContext+0x5e>
	__asm volatile
 8005d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d3a:	f383 8811 	msr	BASEPRI, r3
 8005d3e:	f3bf 8f6f 	isb	sy
 8005d42:	f3bf 8f4f 	dsb	sy
 8005d46:	607b      	str	r3, [r7, #4]
}
 8005d48:	bf00      	nop
 8005d4a:	bf00      	nop
 8005d4c:	e7fd      	b.n	8005d4a <vTaskSwitchContext+0x5a>
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	4613      	mov	r3, r2
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	4413      	add	r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4a11      	ldr	r2, [pc, #68]	@ (8005da0 <vTaskSwitchContext+0xb0>)
 8005d5a:	4413      	add	r3, r2
 8005d5c:	613b      	str	r3, [r7, #16]
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	685a      	ldr	r2, [r3, #4]
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	605a      	str	r2, [r3, #4]
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	685a      	ldr	r2, [r3, #4]
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	3308      	adds	r3, #8
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d104      	bne.n	8005d7e <vTaskSwitchContext+0x8e>
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	685a      	ldr	r2, [r3, #4]
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	605a      	str	r2, [r3, #4]
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	4a07      	ldr	r2, [pc, #28]	@ (8005da4 <vTaskSwitchContext+0xb4>)
 8005d86:	6013      	str	r3, [r2, #0]
}
 8005d88:	bf00      	nop
 8005d8a:	371c      	adds	r7, #28
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr
 8005d94:	2000055c 	.word	0x2000055c
 8005d98:	20000550 	.word	0x20000550
 8005d9c:	20000548 	.word	0x20000548
 8005da0:	200004b0 	.word	0x200004b0
 8005da4:	200004ac 	.word	0x200004ac

08005da8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dae:	4b0c      	ldr	r3, [pc, #48]	@ (8005de0 <prvResetNextTaskUnblockTime+0x38>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d104      	bne.n	8005dc2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005db8:	4b0a      	ldr	r3, [pc, #40]	@ (8005de4 <prvResetNextTaskUnblockTime+0x3c>)
 8005dba:	f04f 32ff 	mov.w	r2, #4294967295
 8005dbe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005dc0:	e008      	b.n	8005dd4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dc2:	4b07      	ldr	r3, [pc, #28]	@ (8005de0 <prvResetNextTaskUnblockTime+0x38>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	4a04      	ldr	r2, [pc, #16]	@ (8005de4 <prvResetNextTaskUnblockTime+0x3c>)
 8005dd2:	6013      	str	r3, [r2, #0]
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr
 8005de0:	2000053c 	.word	0x2000053c
 8005de4:	20000558 	.word	0x20000558
	...

08005df0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005df0:	4b07      	ldr	r3, [pc, #28]	@ (8005e10 <pxCurrentTCBConst2>)
 8005df2:	6819      	ldr	r1, [r3, #0]
 8005df4:	6808      	ldr	r0, [r1, #0]
 8005df6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dfa:	f380 8809 	msr	PSP, r0
 8005dfe:	f3bf 8f6f 	isb	sy
 8005e02:	f04f 0000 	mov.w	r0, #0
 8005e06:	f380 8811 	msr	BASEPRI, r0
 8005e0a:	4770      	bx	lr
 8005e0c:	f3af 8000 	nop.w

08005e10 <pxCurrentTCBConst2>:
 8005e10:	200004ac 	.word	0x200004ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005e14:	bf00      	nop
 8005e16:	bf00      	nop
	...

08005e20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005e20:	f3ef 8009 	mrs	r0, PSP
 8005e24:	f3bf 8f6f 	isb	sy
 8005e28:	4b15      	ldr	r3, [pc, #84]	@ (8005e80 <pxCurrentTCBConst>)
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	f01e 0f10 	tst.w	lr, #16
 8005e30:	bf08      	it	eq
 8005e32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005e36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e3a:	6010      	str	r0, [r2, #0]
 8005e3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005e40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005e44:	f380 8811 	msr	BASEPRI, r0
 8005e48:	f3bf 8f4f 	dsb	sy
 8005e4c:	f3bf 8f6f 	isb	sy
 8005e50:	f7ff ff4e 	bl	8005cf0 <vTaskSwitchContext>
 8005e54:	f04f 0000 	mov.w	r0, #0
 8005e58:	f380 8811 	msr	BASEPRI, r0
 8005e5c:	bc09      	pop	{r0, r3}
 8005e5e:	6819      	ldr	r1, [r3, #0]
 8005e60:	6808      	ldr	r0, [r1, #0]
 8005e62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e66:	f01e 0f10 	tst.w	lr, #16
 8005e6a:	bf08      	it	eq
 8005e6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005e70:	f380 8809 	msr	PSP, r0
 8005e74:	f3bf 8f6f 	isb	sy
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	f3af 8000 	nop.w

08005e80 <pxCurrentTCBConst>:
 8005e80:	200004ac 	.word	0x200004ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005e84:	bf00      	nop
 8005e86:	bf00      	nop

08005e88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
	__asm volatile
 8005e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e92:	f383 8811 	msr	BASEPRI, r3
 8005e96:	f3bf 8f6f 	isb	sy
 8005e9a:	f3bf 8f4f 	dsb	sy
 8005e9e:	607b      	str	r3, [r7, #4]
}
 8005ea0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ea2:	f7ff fe6b 	bl	8005b7c <xTaskIncrementTick>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d003      	beq.n	8005eb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005eac:	4b06      	ldr	r3, [pc, #24]	@ (8005ec8 <SysTick_Handler+0x40>)
 8005eae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005eb2:	601a      	str	r2, [r3, #0]
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	f383 8811 	msr	BASEPRI, r3
}
 8005ebe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005ec0:	bf00      	nop
 8005ec2:	3708      	adds	r7, #8
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	e000ed04 	.word	0xe000ed04

08005ecc <malloc>:
 8005ecc:	4b02      	ldr	r3, [pc, #8]	@ (8005ed8 <malloc+0xc>)
 8005ece:	4601      	mov	r1, r0
 8005ed0:	6818      	ldr	r0, [r3, #0]
 8005ed2:	f000 b825 	b.w	8005f20 <_malloc_r>
 8005ed6:	bf00      	nop
 8005ed8:	20000018 	.word	0x20000018

08005edc <sbrk_aligned>:
 8005edc:	b570      	push	{r4, r5, r6, lr}
 8005ede:	4e0f      	ldr	r6, [pc, #60]	@ (8005f1c <sbrk_aligned+0x40>)
 8005ee0:	460c      	mov	r4, r1
 8005ee2:	6831      	ldr	r1, [r6, #0]
 8005ee4:	4605      	mov	r5, r0
 8005ee6:	b911      	cbnz	r1, 8005eee <sbrk_aligned+0x12>
 8005ee8:	f000 fa02 	bl	80062f0 <_sbrk_r>
 8005eec:	6030      	str	r0, [r6, #0]
 8005eee:	4621      	mov	r1, r4
 8005ef0:	4628      	mov	r0, r5
 8005ef2:	f000 f9fd 	bl	80062f0 <_sbrk_r>
 8005ef6:	1c43      	adds	r3, r0, #1
 8005ef8:	d103      	bne.n	8005f02 <sbrk_aligned+0x26>
 8005efa:	f04f 34ff 	mov.w	r4, #4294967295
 8005efe:	4620      	mov	r0, r4
 8005f00:	bd70      	pop	{r4, r5, r6, pc}
 8005f02:	1cc4      	adds	r4, r0, #3
 8005f04:	f024 0403 	bic.w	r4, r4, #3
 8005f08:	42a0      	cmp	r0, r4
 8005f0a:	d0f8      	beq.n	8005efe <sbrk_aligned+0x22>
 8005f0c:	1a21      	subs	r1, r4, r0
 8005f0e:	4628      	mov	r0, r5
 8005f10:	f000 f9ee 	bl	80062f0 <_sbrk_r>
 8005f14:	3001      	adds	r0, #1
 8005f16:	d1f2      	bne.n	8005efe <sbrk_aligned+0x22>
 8005f18:	e7ef      	b.n	8005efa <sbrk_aligned+0x1e>
 8005f1a:	bf00      	nop
 8005f1c:	20000560 	.word	0x20000560

08005f20 <_malloc_r>:
 8005f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f24:	1ccd      	adds	r5, r1, #3
 8005f26:	f025 0503 	bic.w	r5, r5, #3
 8005f2a:	3508      	adds	r5, #8
 8005f2c:	2d0c      	cmp	r5, #12
 8005f2e:	bf38      	it	cc
 8005f30:	250c      	movcc	r5, #12
 8005f32:	2d00      	cmp	r5, #0
 8005f34:	4606      	mov	r6, r0
 8005f36:	db01      	blt.n	8005f3c <_malloc_r+0x1c>
 8005f38:	42a9      	cmp	r1, r5
 8005f3a:	d904      	bls.n	8005f46 <_malloc_r+0x26>
 8005f3c:	230c      	movs	r3, #12
 8005f3e:	6033      	str	r3, [r6, #0]
 8005f40:	2000      	movs	r0, #0
 8005f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800601c <_malloc_r+0xfc>
 8005f4a:	f000 f869 	bl	8006020 <__malloc_lock>
 8005f4e:	f8d8 3000 	ldr.w	r3, [r8]
 8005f52:	461c      	mov	r4, r3
 8005f54:	bb44      	cbnz	r4, 8005fa8 <_malloc_r+0x88>
 8005f56:	4629      	mov	r1, r5
 8005f58:	4630      	mov	r0, r6
 8005f5a:	f7ff ffbf 	bl	8005edc <sbrk_aligned>
 8005f5e:	1c43      	adds	r3, r0, #1
 8005f60:	4604      	mov	r4, r0
 8005f62:	d158      	bne.n	8006016 <_malloc_r+0xf6>
 8005f64:	f8d8 4000 	ldr.w	r4, [r8]
 8005f68:	4627      	mov	r7, r4
 8005f6a:	2f00      	cmp	r7, #0
 8005f6c:	d143      	bne.n	8005ff6 <_malloc_r+0xd6>
 8005f6e:	2c00      	cmp	r4, #0
 8005f70:	d04b      	beq.n	800600a <_malloc_r+0xea>
 8005f72:	6823      	ldr	r3, [r4, #0]
 8005f74:	4639      	mov	r1, r7
 8005f76:	4630      	mov	r0, r6
 8005f78:	eb04 0903 	add.w	r9, r4, r3
 8005f7c:	f000 f9b8 	bl	80062f0 <_sbrk_r>
 8005f80:	4581      	cmp	r9, r0
 8005f82:	d142      	bne.n	800600a <_malloc_r+0xea>
 8005f84:	6821      	ldr	r1, [r4, #0]
 8005f86:	1a6d      	subs	r5, r5, r1
 8005f88:	4629      	mov	r1, r5
 8005f8a:	4630      	mov	r0, r6
 8005f8c:	f7ff ffa6 	bl	8005edc <sbrk_aligned>
 8005f90:	3001      	adds	r0, #1
 8005f92:	d03a      	beq.n	800600a <_malloc_r+0xea>
 8005f94:	6823      	ldr	r3, [r4, #0]
 8005f96:	442b      	add	r3, r5
 8005f98:	6023      	str	r3, [r4, #0]
 8005f9a:	f8d8 3000 	ldr.w	r3, [r8]
 8005f9e:	685a      	ldr	r2, [r3, #4]
 8005fa0:	bb62      	cbnz	r2, 8005ffc <_malloc_r+0xdc>
 8005fa2:	f8c8 7000 	str.w	r7, [r8]
 8005fa6:	e00f      	b.n	8005fc8 <_malloc_r+0xa8>
 8005fa8:	6822      	ldr	r2, [r4, #0]
 8005faa:	1b52      	subs	r2, r2, r5
 8005fac:	d420      	bmi.n	8005ff0 <_malloc_r+0xd0>
 8005fae:	2a0b      	cmp	r2, #11
 8005fb0:	d917      	bls.n	8005fe2 <_malloc_r+0xc2>
 8005fb2:	1961      	adds	r1, r4, r5
 8005fb4:	42a3      	cmp	r3, r4
 8005fb6:	6025      	str	r5, [r4, #0]
 8005fb8:	bf18      	it	ne
 8005fba:	6059      	strne	r1, [r3, #4]
 8005fbc:	6863      	ldr	r3, [r4, #4]
 8005fbe:	bf08      	it	eq
 8005fc0:	f8c8 1000 	streq.w	r1, [r8]
 8005fc4:	5162      	str	r2, [r4, r5]
 8005fc6:	604b      	str	r3, [r1, #4]
 8005fc8:	4630      	mov	r0, r6
 8005fca:	f000 f82f 	bl	800602c <__malloc_unlock>
 8005fce:	f104 000b 	add.w	r0, r4, #11
 8005fd2:	1d23      	adds	r3, r4, #4
 8005fd4:	f020 0007 	bic.w	r0, r0, #7
 8005fd8:	1ac2      	subs	r2, r0, r3
 8005fda:	bf1c      	itt	ne
 8005fdc:	1a1b      	subne	r3, r3, r0
 8005fde:	50a3      	strne	r3, [r4, r2]
 8005fe0:	e7af      	b.n	8005f42 <_malloc_r+0x22>
 8005fe2:	6862      	ldr	r2, [r4, #4]
 8005fe4:	42a3      	cmp	r3, r4
 8005fe6:	bf0c      	ite	eq
 8005fe8:	f8c8 2000 	streq.w	r2, [r8]
 8005fec:	605a      	strne	r2, [r3, #4]
 8005fee:	e7eb      	b.n	8005fc8 <_malloc_r+0xa8>
 8005ff0:	4623      	mov	r3, r4
 8005ff2:	6864      	ldr	r4, [r4, #4]
 8005ff4:	e7ae      	b.n	8005f54 <_malloc_r+0x34>
 8005ff6:	463c      	mov	r4, r7
 8005ff8:	687f      	ldr	r7, [r7, #4]
 8005ffa:	e7b6      	b.n	8005f6a <_malloc_r+0x4a>
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	42a3      	cmp	r3, r4
 8006002:	d1fb      	bne.n	8005ffc <_malloc_r+0xdc>
 8006004:	2300      	movs	r3, #0
 8006006:	6053      	str	r3, [r2, #4]
 8006008:	e7de      	b.n	8005fc8 <_malloc_r+0xa8>
 800600a:	230c      	movs	r3, #12
 800600c:	6033      	str	r3, [r6, #0]
 800600e:	4630      	mov	r0, r6
 8006010:	f000 f80c 	bl	800602c <__malloc_unlock>
 8006014:	e794      	b.n	8005f40 <_malloc_r+0x20>
 8006016:	6005      	str	r5, [r0, #0]
 8006018:	e7d6      	b.n	8005fc8 <_malloc_r+0xa8>
 800601a:	bf00      	nop
 800601c:	20000564 	.word	0x20000564

08006020 <__malloc_lock>:
 8006020:	4801      	ldr	r0, [pc, #4]	@ (8006028 <__malloc_lock+0x8>)
 8006022:	f7fb bd3f 	b.w	8001aa4 <__retarget_lock_acquire_recursive>
 8006026:	bf00      	nop
 8006028:	20000488 	.word	0x20000488

0800602c <__malloc_unlock>:
 800602c:	4801      	ldr	r0, [pc, #4]	@ (8006034 <__malloc_unlock+0x8>)
 800602e:	f7fb bd4e 	b.w	8001ace <__retarget_lock_release_recursive>
 8006032:	bf00      	nop
 8006034:	20000488 	.word	0x20000488

08006038 <std>:
 8006038:	2300      	movs	r3, #0
 800603a:	b510      	push	{r4, lr}
 800603c:	4604      	mov	r4, r0
 800603e:	e9c0 3300 	strd	r3, r3, [r0]
 8006042:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006046:	6083      	str	r3, [r0, #8]
 8006048:	8181      	strh	r1, [r0, #12]
 800604a:	6643      	str	r3, [r0, #100]	@ 0x64
 800604c:	81c2      	strh	r2, [r0, #14]
 800604e:	6183      	str	r3, [r0, #24]
 8006050:	4619      	mov	r1, r3
 8006052:	2208      	movs	r2, #8
 8006054:	305c      	adds	r0, #92	@ 0x5c
 8006056:	f000 f90e 	bl	8006276 <memset>
 800605a:	4b0d      	ldr	r3, [pc, #52]	@ (8006090 <std+0x58>)
 800605c:	6263      	str	r3, [r4, #36]	@ 0x24
 800605e:	4b0d      	ldr	r3, [pc, #52]	@ (8006094 <std+0x5c>)
 8006060:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006062:	4b0d      	ldr	r3, [pc, #52]	@ (8006098 <std+0x60>)
 8006064:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006066:	4b0d      	ldr	r3, [pc, #52]	@ (800609c <std+0x64>)
 8006068:	6323      	str	r3, [r4, #48]	@ 0x30
 800606a:	4b0d      	ldr	r3, [pc, #52]	@ (80060a0 <std+0x68>)
 800606c:	6224      	str	r4, [r4, #32]
 800606e:	429c      	cmp	r4, r3
 8006070:	d006      	beq.n	8006080 <std+0x48>
 8006072:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006076:	4294      	cmp	r4, r2
 8006078:	d002      	beq.n	8006080 <std+0x48>
 800607a:	33d0      	adds	r3, #208	@ 0xd0
 800607c:	429c      	cmp	r4, r3
 800607e:	d105      	bne.n	800608c <std+0x54>
 8006080:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006088:	f7fb bce5 	b.w	8001a56 <__retarget_lock_init_recursive>
 800608c:	bd10      	pop	{r4, pc}
 800608e:	bf00      	nop
 8006090:	080061f1 	.word	0x080061f1
 8006094:	08006213 	.word	0x08006213
 8006098:	0800624b 	.word	0x0800624b
 800609c:	0800626f 	.word	0x0800626f
 80060a0:	20000568 	.word	0x20000568

080060a4 <stdio_exit_handler>:
 80060a4:	4a02      	ldr	r2, [pc, #8]	@ (80060b0 <stdio_exit_handler+0xc>)
 80060a6:	4903      	ldr	r1, [pc, #12]	@ (80060b4 <stdio_exit_handler+0x10>)
 80060a8:	4803      	ldr	r0, [pc, #12]	@ (80060b8 <stdio_exit_handler+0x14>)
 80060aa:	f000 b869 	b.w	8006180 <_fwalk_sglue>
 80060ae:	bf00      	nop
 80060b0:	2000000c 	.word	0x2000000c
 80060b4:	08006ac5 	.word	0x08006ac5
 80060b8:	2000001c 	.word	0x2000001c

080060bc <cleanup_stdio>:
 80060bc:	6841      	ldr	r1, [r0, #4]
 80060be:	4b0c      	ldr	r3, [pc, #48]	@ (80060f0 <cleanup_stdio+0x34>)
 80060c0:	4299      	cmp	r1, r3
 80060c2:	b510      	push	{r4, lr}
 80060c4:	4604      	mov	r4, r0
 80060c6:	d001      	beq.n	80060cc <cleanup_stdio+0x10>
 80060c8:	f000 fcfc 	bl	8006ac4 <_fflush_r>
 80060cc:	68a1      	ldr	r1, [r4, #8]
 80060ce:	4b09      	ldr	r3, [pc, #36]	@ (80060f4 <cleanup_stdio+0x38>)
 80060d0:	4299      	cmp	r1, r3
 80060d2:	d002      	beq.n	80060da <cleanup_stdio+0x1e>
 80060d4:	4620      	mov	r0, r4
 80060d6:	f000 fcf5 	bl	8006ac4 <_fflush_r>
 80060da:	68e1      	ldr	r1, [r4, #12]
 80060dc:	4b06      	ldr	r3, [pc, #24]	@ (80060f8 <cleanup_stdio+0x3c>)
 80060de:	4299      	cmp	r1, r3
 80060e0:	d004      	beq.n	80060ec <cleanup_stdio+0x30>
 80060e2:	4620      	mov	r0, r4
 80060e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060e8:	f000 bcec 	b.w	8006ac4 <_fflush_r>
 80060ec:	bd10      	pop	{r4, pc}
 80060ee:	bf00      	nop
 80060f0:	20000568 	.word	0x20000568
 80060f4:	200005d0 	.word	0x200005d0
 80060f8:	20000638 	.word	0x20000638

080060fc <global_stdio_init.part.0>:
 80060fc:	b510      	push	{r4, lr}
 80060fe:	4b0b      	ldr	r3, [pc, #44]	@ (800612c <global_stdio_init.part.0+0x30>)
 8006100:	4c0b      	ldr	r4, [pc, #44]	@ (8006130 <global_stdio_init.part.0+0x34>)
 8006102:	4a0c      	ldr	r2, [pc, #48]	@ (8006134 <global_stdio_init.part.0+0x38>)
 8006104:	601a      	str	r2, [r3, #0]
 8006106:	4620      	mov	r0, r4
 8006108:	2200      	movs	r2, #0
 800610a:	2104      	movs	r1, #4
 800610c:	f7ff ff94 	bl	8006038 <std>
 8006110:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006114:	2201      	movs	r2, #1
 8006116:	2109      	movs	r1, #9
 8006118:	f7ff ff8e 	bl	8006038 <std>
 800611c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006120:	2202      	movs	r2, #2
 8006122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006126:	2112      	movs	r1, #18
 8006128:	f7ff bf86 	b.w	8006038 <std>
 800612c:	200006a0 	.word	0x200006a0
 8006130:	20000568 	.word	0x20000568
 8006134:	080060a5 	.word	0x080060a5

08006138 <__sfp_lock_acquire>:
 8006138:	4801      	ldr	r0, [pc, #4]	@ (8006140 <__sfp_lock_acquire+0x8>)
 800613a:	f7fb bcb3 	b.w	8001aa4 <__retarget_lock_acquire_recursive>
 800613e:	bf00      	nop
 8006140:	2000047c 	.word	0x2000047c

08006144 <__sfp_lock_release>:
 8006144:	4801      	ldr	r0, [pc, #4]	@ (800614c <__sfp_lock_release+0x8>)
 8006146:	f7fb bcc2 	b.w	8001ace <__retarget_lock_release_recursive>
 800614a:	bf00      	nop
 800614c:	2000047c 	.word	0x2000047c

08006150 <__sinit>:
 8006150:	b510      	push	{r4, lr}
 8006152:	4604      	mov	r4, r0
 8006154:	f7ff fff0 	bl	8006138 <__sfp_lock_acquire>
 8006158:	6a23      	ldr	r3, [r4, #32]
 800615a:	b11b      	cbz	r3, 8006164 <__sinit+0x14>
 800615c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006160:	f7ff bff0 	b.w	8006144 <__sfp_lock_release>
 8006164:	4b04      	ldr	r3, [pc, #16]	@ (8006178 <__sinit+0x28>)
 8006166:	6223      	str	r3, [r4, #32]
 8006168:	4b04      	ldr	r3, [pc, #16]	@ (800617c <__sinit+0x2c>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1f5      	bne.n	800615c <__sinit+0xc>
 8006170:	f7ff ffc4 	bl	80060fc <global_stdio_init.part.0>
 8006174:	e7f2      	b.n	800615c <__sinit+0xc>
 8006176:	bf00      	nop
 8006178:	080060bd 	.word	0x080060bd
 800617c:	200006a0 	.word	0x200006a0

08006180 <_fwalk_sglue>:
 8006180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006184:	4607      	mov	r7, r0
 8006186:	4688      	mov	r8, r1
 8006188:	4614      	mov	r4, r2
 800618a:	2600      	movs	r6, #0
 800618c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006190:	f1b9 0901 	subs.w	r9, r9, #1
 8006194:	d505      	bpl.n	80061a2 <_fwalk_sglue+0x22>
 8006196:	6824      	ldr	r4, [r4, #0]
 8006198:	2c00      	cmp	r4, #0
 800619a:	d1f7      	bne.n	800618c <_fwalk_sglue+0xc>
 800619c:	4630      	mov	r0, r6
 800619e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061a2:	89ab      	ldrh	r3, [r5, #12]
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d907      	bls.n	80061b8 <_fwalk_sglue+0x38>
 80061a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061ac:	3301      	adds	r3, #1
 80061ae:	d003      	beq.n	80061b8 <_fwalk_sglue+0x38>
 80061b0:	4629      	mov	r1, r5
 80061b2:	4638      	mov	r0, r7
 80061b4:	47c0      	blx	r8
 80061b6:	4306      	orrs	r6, r0
 80061b8:	3568      	adds	r5, #104	@ 0x68
 80061ba:	e7e9      	b.n	8006190 <_fwalk_sglue+0x10>

080061bc <iprintf>:
 80061bc:	b40f      	push	{r0, r1, r2, r3}
 80061be:	b507      	push	{r0, r1, r2, lr}
 80061c0:	4906      	ldr	r1, [pc, #24]	@ (80061dc <iprintf+0x20>)
 80061c2:	ab04      	add	r3, sp, #16
 80061c4:	6808      	ldr	r0, [r1, #0]
 80061c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80061ca:	6881      	ldr	r1, [r0, #8]
 80061cc:	9301      	str	r3, [sp, #4]
 80061ce:	f000 f94f 	bl	8006470 <_vfiprintf_r>
 80061d2:	b003      	add	sp, #12
 80061d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80061d8:	b004      	add	sp, #16
 80061da:	4770      	bx	lr
 80061dc:	20000018 	.word	0x20000018

080061e0 <putchar>:
 80061e0:	4b02      	ldr	r3, [pc, #8]	@ (80061ec <putchar+0xc>)
 80061e2:	4601      	mov	r1, r0
 80061e4:	6818      	ldr	r0, [r3, #0]
 80061e6:	6882      	ldr	r2, [r0, #8]
 80061e8:	f000 bc94 	b.w	8006b14 <_putc_r>
 80061ec:	20000018 	.word	0x20000018

080061f0 <__sread>:
 80061f0:	b510      	push	{r4, lr}
 80061f2:	460c      	mov	r4, r1
 80061f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061f8:	f000 f868 	bl	80062cc <_read_r>
 80061fc:	2800      	cmp	r0, #0
 80061fe:	bfab      	itete	ge
 8006200:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006202:	89a3      	ldrhlt	r3, [r4, #12]
 8006204:	181b      	addge	r3, r3, r0
 8006206:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800620a:	bfac      	ite	ge
 800620c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800620e:	81a3      	strhlt	r3, [r4, #12]
 8006210:	bd10      	pop	{r4, pc}

08006212 <__swrite>:
 8006212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006216:	461f      	mov	r7, r3
 8006218:	898b      	ldrh	r3, [r1, #12]
 800621a:	05db      	lsls	r3, r3, #23
 800621c:	4605      	mov	r5, r0
 800621e:	460c      	mov	r4, r1
 8006220:	4616      	mov	r6, r2
 8006222:	d505      	bpl.n	8006230 <__swrite+0x1e>
 8006224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006228:	2302      	movs	r3, #2
 800622a:	2200      	movs	r2, #0
 800622c:	f000 f83c 	bl	80062a8 <_lseek_r>
 8006230:	89a3      	ldrh	r3, [r4, #12]
 8006232:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006236:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800623a:	81a3      	strh	r3, [r4, #12]
 800623c:	4632      	mov	r2, r6
 800623e:	463b      	mov	r3, r7
 8006240:	4628      	mov	r0, r5
 8006242:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006246:	f000 b863 	b.w	8006310 <_write_r>

0800624a <__sseek>:
 800624a:	b510      	push	{r4, lr}
 800624c:	460c      	mov	r4, r1
 800624e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006252:	f000 f829 	bl	80062a8 <_lseek_r>
 8006256:	1c43      	adds	r3, r0, #1
 8006258:	89a3      	ldrh	r3, [r4, #12]
 800625a:	bf15      	itete	ne
 800625c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800625e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006262:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006266:	81a3      	strheq	r3, [r4, #12]
 8006268:	bf18      	it	ne
 800626a:	81a3      	strhne	r3, [r4, #12]
 800626c:	bd10      	pop	{r4, pc}

0800626e <__sclose>:
 800626e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006272:	f000 b809 	b.w	8006288 <_close_r>

08006276 <memset>:
 8006276:	4402      	add	r2, r0
 8006278:	4603      	mov	r3, r0
 800627a:	4293      	cmp	r3, r2
 800627c:	d100      	bne.n	8006280 <memset+0xa>
 800627e:	4770      	bx	lr
 8006280:	f803 1b01 	strb.w	r1, [r3], #1
 8006284:	e7f9      	b.n	800627a <memset+0x4>
	...

08006288 <_close_r>:
 8006288:	b538      	push	{r3, r4, r5, lr}
 800628a:	4d06      	ldr	r5, [pc, #24]	@ (80062a4 <_close_r+0x1c>)
 800628c:	2300      	movs	r3, #0
 800628e:	4604      	mov	r4, r0
 8006290:	4608      	mov	r0, r1
 8006292:	602b      	str	r3, [r5, #0]
 8006294:	f7fa fef1 	bl	800107a <_close>
 8006298:	1c43      	adds	r3, r0, #1
 800629a:	d102      	bne.n	80062a2 <_close_r+0x1a>
 800629c:	682b      	ldr	r3, [r5, #0]
 800629e:	b103      	cbz	r3, 80062a2 <_close_r+0x1a>
 80062a0:	6023      	str	r3, [r4, #0]
 80062a2:	bd38      	pop	{r3, r4, r5, pc}
 80062a4:	200006a4 	.word	0x200006a4

080062a8 <_lseek_r>:
 80062a8:	b538      	push	{r3, r4, r5, lr}
 80062aa:	4d07      	ldr	r5, [pc, #28]	@ (80062c8 <_lseek_r+0x20>)
 80062ac:	4604      	mov	r4, r0
 80062ae:	4608      	mov	r0, r1
 80062b0:	4611      	mov	r1, r2
 80062b2:	2200      	movs	r2, #0
 80062b4:	602a      	str	r2, [r5, #0]
 80062b6:	461a      	mov	r2, r3
 80062b8:	f7fa ff06 	bl	80010c8 <_lseek>
 80062bc:	1c43      	adds	r3, r0, #1
 80062be:	d102      	bne.n	80062c6 <_lseek_r+0x1e>
 80062c0:	682b      	ldr	r3, [r5, #0]
 80062c2:	b103      	cbz	r3, 80062c6 <_lseek_r+0x1e>
 80062c4:	6023      	str	r3, [r4, #0]
 80062c6:	bd38      	pop	{r3, r4, r5, pc}
 80062c8:	200006a4 	.word	0x200006a4

080062cc <_read_r>:
 80062cc:	b538      	push	{r3, r4, r5, lr}
 80062ce:	4d07      	ldr	r5, [pc, #28]	@ (80062ec <_read_r+0x20>)
 80062d0:	4604      	mov	r4, r0
 80062d2:	4608      	mov	r0, r1
 80062d4:	4611      	mov	r1, r2
 80062d6:	2200      	movs	r2, #0
 80062d8:	602a      	str	r2, [r5, #0]
 80062da:	461a      	mov	r2, r3
 80062dc:	f7fa fe94 	bl	8001008 <_read>
 80062e0:	1c43      	adds	r3, r0, #1
 80062e2:	d102      	bne.n	80062ea <_read_r+0x1e>
 80062e4:	682b      	ldr	r3, [r5, #0]
 80062e6:	b103      	cbz	r3, 80062ea <_read_r+0x1e>
 80062e8:	6023      	str	r3, [r4, #0]
 80062ea:	bd38      	pop	{r3, r4, r5, pc}
 80062ec:	200006a4 	.word	0x200006a4

080062f0 <_sbrk_r>:
 80062f0:	b538      	push	{r3, r4, r5, lr}
 80062f2:	4d06      	ldr	r5, [pc, #24]	@ (800630c <_sbrk_r+0x1c>)
 80062f4:	2300      	movs	r3, #0
 80062f6:	4604      	mov	r4, r0
 80062f8:	4608      	mov	r0, r1
 80062fa:	602b      	str	r3, [r5, #0]
 80062fc:	f7fa fef2 	bl	80010e4 <_sbrk>
 8006300:	1c43      	adds	r3, r0, #1
 8006302:	d102      	bne.n	800630a <_sbrk_r+0x1a>
 8006304:	682b      	ldr	r3, [r5, #0]
 8006306:	b103      	cbz	r3, 800630a <_sbrk_r+0x1a>
 8006308:	6023      	str	r3, [r4, #0]
 800630a:	bd38      	pop	{r3, r4, r5, pc}
 800630c:	200006a4 	.word	0x200006a4

08006310 <_write_r>:
 8006310:	b538      	push	{r3, r4, r5, lr}
 8006312:	4d07      	ldr	r5, [pc, #28]	@ (8006330 <_write_r+0x20>)
 8006314:	4604      	mov	r4, r0
 8006316:	4608      	mov	r0, r1
 8006318:	4611      	mov	r1, r2
 800631a:	2200      	movs	r2, #0
 800631c:	602a      	str	r2, [r5, #0]
 800631e:	461a      	mov	r2, r3
 8006320:	f7fa fe8f 	bl	8001042 <_write>
 8006324:	1c43      	adds	r3, r0, #1
 8006326:	d102      	bne.n	800632e <_write_r+0x1e>
 8006328:	682b      	ldr	r3, [r5, #0]
 800632a:	b103      	cbz	r3, 800632e <_write_r+0x1e>
 800632c:	6023      	str	r3, [r4, #0]
 800632e:	bd38      	pop	{r3, r4, r5, pc}
 8006330:	200006a4 	.word	0x200006a4

08006334 <__errno>:
 8006334:	4b01      	ldr	r3, [pc, #4]	@ (800633c <__errno+0x8>)
 8006336:	6818      	ldr	r0, [r3, #0]
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	20000018 	.word	0x20000018

08006340 <__libc_init_array>:
 8006340:	b570      	push	{r4, r5, r6, lr}
 8006342:	4d0d      	ldr	r5, [pc, #52]	@ (8006378 <__libc_init_array+0x38>)
 8006344:	4c0d      	ldr	r4, [pc, #52]	@ (800637c <__libc_init_array+0x3c>)
 8006346:	1b64      	subs	r4, r4, r5
 8006348:	10a4      	asrs	r4, r4, #2
 800634a:	2600      	movs	r6, #0
 800634c:	42a6      	cmp	r6, r4
 800634e:	d109      	bne.n	8006364 <__libc_init_array+0x24>
 8006350:	4d0b      	ldr	r5, [pc, #44]	@ (8006380 <__libc_init_array+0x40>)
 8006352:	4c0c      	ldr	r4, [pc, #48]	@ (8006384 <__libc_init_array+0x44>)
 8006354:	f000 fd2a 	bl	8006dac <_init>
 8006358:	1b64      	subs	r4, r4, r5
 800635a:	10a4      	asrs	r4, r4, #2
 800635c:	2600      	movs	r6, #0
 800635e:	42a6      	cmp	r6, r4
 8006360:	d105      	bne.n	800636e <__libc_init_array+0x2e>
 8006362:	bd70      	pop	{r4, r5, r6, pc}
 8006364:	f855 3b04 	ldr.w	r3, [r5], #4
 8006368:	4798      	blx	r3
 800636a:	3601      	adds	r6, #1
 800636c:	e7ee      	b.n	800634c <__libc_init_array+0xc>
 800636e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006372:	4798      	blx	r3
 8006374:	3601      	adds	r6, #1
 8006376:	e7f2      	b.n	800635e <__libc_init_array+0x1e>
 8006378:	08006ea4 	.word	0x08006ea4
 800637c:	08006ea4 	.word	0x08006ea4
 8006380:	08006ea4 	.word	0x08006ea4
 8006384:	08006ea8 	.word	0x08006ea8

08006388 <_free_r>:
 8006388:	b538      	push	{r3, r4, r5, lr}
 800638a:	4605      	mov	r5, r0
 800638c:	2900      	cmp	r1, #0
 800638e:	d041      	beq.n	8006414 <_free_r+0x8c>
 8006390:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006394:	1f0c      	subs	r4, r1, #4
 8006396:	2b00      	cmp	r3, #0
 8006398:	bfb8      	it	lt
 800639a:	18e4      	addlt	r4, r4, r3
 800639c:	f7ff fe40 	bl	8006020 <__malloc_lock>
 80063a0:	4a1d      	ldr	r2, [pc, #116]	@ (8006418 <_free_r+0x90>)
 80063a2:	6813      	ldr	r3, [r2, #0]
 80063a4:	b933      	cbnz	r3, 80063b4 <_free_r+0x2c>
 80063a6:	6063      	str	r3, [r4, #4]
 80063a8:	6014      	str	r4, [r2, #0]
 80063aa:	4628      	mov	r0, r5
 80063ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063b0:	f7ff be3c 	b.w	800602c <__malloc_unlock>
 80063b4:	42a3      	cmp	r3, r4
 80063b6:	d908      	bls.n	80063ca <_free_r+0x42>
 80063b8:	6820      	ldr	r0, [r4, #0]
 80063ba:	1821      	adds	r1, r4, r0
 80063bc:	428b      	cmp	r3, r1
 80063be:	bf01      	itttt	eq
 80063c0:	6819      	ldreq	r1, [r3, #0]
 80063c2:	685b      	ldreq	r3, [r3, #4]
 80063c4:	1809      	addeq	r1, r1, r0
 80063c6:	6021      	streq	r1, [r4, #0]
 80063c8:	e7ed      	b.n	80063a6 <_free_r+0x1e>
 80063ca:	461a      	mov	r2, r3
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	b10b      	cbz	r3, 80063d4 <_free_r+0x4c>
 80063d0:	42a3      	cmp	r3, r4
 80063d2:	d9fa      	bls.n	80063ca <_free_r+0x42>
 80063d4:	6811      	ldr	r1, [r2, #0]
 80063d6:	1850      	adds	r0, r2, r1
 80063d8:	42a0      	cmp	r0, r4
 80063da:	d10b      	bne.n	80063f4 <_free_r+0x6c>
 80063dc:	6820      	ldr	r0, [r4, #0]
 80063de:	4401      	add	r1, r0
 80063e0:	1850      	adds	r0, r2, r1
 80063e2:	4283      	cmp	r3, r0
 80063e4:	6011      	str	r1, [r2, #0]
 80063e6:	d1e0      	bne.n	80063aa <_free_r+0x22>
 80063e8:	6818      	ldr	r0, [r3, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	6053      	str	r3, [r2, #4]
 80063ee:	4408      	add	r0, r1
 80063f0:	6010      	str	r0, [r2, #0]
 80063f2:	e7da      	b.n	80063aa <_free_r+0x22>
 80063f4:	d902      	bls.n	80063fc <_free_r+0x74>
 80063f6:	230c      	movs	r3, #12
 80063f8:	602b      	str	r3, [r5, #0]
 80063fa:	e7d6      	b.n	80063aa <_free_r+0x22>
 80063fc:	6820      	ldr	r0, [r4, #0]
 80063fe:	1821      	adds	r1, r4, r0
 8006400:	428b      	cmp	r3, r1
 8006402:	bf04      	itt	eq
 8006404:	6819      	ldreq	r1, [r3, #0]
 8006406:	685b      	ldreq	r3, [r3, #4]
 8006408:	6063      	str	r3, [r4, #4]
 800640a:	bf04      	itt	eq
 800640c:	1809      	addeq	r1, r1, r0
 800640e:	6021      	streq	r1, [r4, #0]
 8006410:	6054      	str	r4, [r2, #4]
 8006412:	e7ca      	b.n	80063aa <_free_r+0x22>
 8006414:	bd38      	pop	{r3, r4, r5, pc}
 8006416:	bf00      	nop
 8006418:	20000564 	.word	0x20000564

0800641c <__sfputc_r>:
 800641c:	6893      	ldr	r3, [r2, #8]
 800641e:	3b01      	subs	r3, #1
 8006420:	2b00      	cmp	r3, #0
 8006422:	b410      	push	{r4}
 8006424:	6093      	str	r3, [r2, #8]
 8006426:	da08      	bge.n	800643a <__sfputc_r+0x1e>
 8006428:	6994      	ldr	r4, [r2, #24]
 800642a:	42a3      	cmp	r3, r4
 800642c:	db01      	blt.n	8006432 <__sfputc_r+0x16>
 800642e:	290a      	cmp	r1, #10
 8006430:	d103      	bne.n	800643a <__sfputc_r+0x1e>
 8006432:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006436:	f000 bba1 	b.w	8006b7c <__swbuf_r>
 800643a:	6813      	ldr	r3, [r2, #0]
 800643c:	1c58      	adds	r0, r3, #1
 800643e:	6010      	str	r0, [r2, #0]
 8006440:	7019      	strb	r1, [r3, #0]
 8006442:	4608      	mov	r0, r1
 8006444:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006448:	4770      	bx	lr

0800644a <__sfputs_r>:
 800644a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800644c:	4606      	mov	r6, r0
 800644e:	460f      	mov	r7, r1
 8006450:	4614      	mov	r4, r2
 8006452:	18d5      	adds	r5, r2, r3
 8006454:	42ac      	cmp	r4, r5
 8006456:	d101      	bne.n	800645c <__sfputs_r+0x12>
 8006458:	2000      	movs	r0, #0
 800645a:	e007      	b.n	800646c <__sfputs_r+0x22>
 800645c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006460:	463a      	mov	r2, r7
 8006462:	4630      	mov	r0, r6
 8006464:	f7ff ffda 	bl	800641c <__sfputc_r>
 8006468:	1c43      	adds	r3, r0, #1
 800646a:	d1f3      	bne.n	8006454 <__sfputs_r+0xa>
 800646c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006470 <_vfiprintf_r>:
 8006470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006474:	460d      	mov	r5, r1
 8006476:	b09d      	sub	sp, #116	@ 0x74
 8006478:	4614      	mov	r4, r2
 800647a:	4698      	mov	r8, r3
 800647c:	4606      	mov	r6, r0
 800647e:	b118      	cbz	r0, 8006488 <_vfiprintf_r+0x18>
 8006480:	6a03      	ldr	r3, [r0, #32]
 8006482:	b90b      	cbnz	r3, 8006488 <_vfiprintf_r+0x18>
 8006484:	f7ff fe64 	bl	8006150 <__sinit>
 8006488:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800648a:	07d9      	lsls	r1, r3, #31
 800648c:	d405      	bmi.n	800649a <_vfiprintf_r+0x2a>
 800648e:	89ab      	ldrh	r3, [r5, #12]
 8006490:	059a      	lsls	r2, r3, #22
 8006492:	d402      	bmi.n	800649a <_vfiprintf_r+0x2a>
 8006494:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006496:	f7fb fb05 	bl	8001aa4 <__retarget_lock_acquire_recursive>
 800649a:	89ab      	ldrh	r3, [r5, #12]
 800649c:	071b      	lsls	r3, r3, #28
 800649e:	d501      	bpl.n	80064a4 <_vfiprintf_r+0x34>
 80064a0:	692b      	ldr	r3, [r5, #16]
 80064a2:	b99b      	cbnz	r3, 80064cc <_vfiprintf_r+0x5c>
 80064a4:	4629      	mov	r1, r5
 80064a6:	4630      	mov	r0, r6
 80064a8:	f000 fba6 	bl	8006bf8 <__swsetup_r>
 80064ac:	b170      	cbz	r0, 80064cc <_vfiprintf_r+0x5c>
 80064ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80064b0:	07dc      	lsls	r4, r3, #31
 80064b2:	d504      	bpl.n	80064be <_vfiprintf_r+0x4e>
 80064b4:	f04f 30ff 	mov.w	r0, #4294967295
 80064b8:	b01d      	add	sp, #116	@ 0x74
 80064ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064be:	89ab      	ldrh	r3, [r5, #12]
 80064c0:	0598      	lsls	r0, r3, #22
 80064c2:	d4f7      	bmi.n	80064b4 <_vfiprintf_r+0x44>
 80064c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80064c6:	f7fb fb02 	bl	8001ace <__retarget_lock_release_recursive>
 80064ca:	e7f3      	b.n	80064b4 <_vfiprintf_r+0x44>
 80064cc:	2300      	movs	r3, #0
 80064ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80064d0:	2320      	movs	r3, #32
 80064d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80064d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80064da:	2330      	movs	r3, #48	@ 0x30
 80064dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800668c <_vfiprintf_r+0x21c>
 80064e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80064e4:	f04f 0901 	mov.w	r9, #1
 80064e8:	4623      	mov	r3, r4
 80064ea:	469a      	mov	sl, r3
 80064ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064f0:	b10a      	cbz	r2, 80064f6 <_vfiprintf_r+0x86>
 80064f2:	2a25      	cmp	r2, #37	@ 0x25
 80064f4:	d1f9      	bne.n	80064ea <_vfiprintf_r+0x7a>
 80064f6:	ebba 0b04 	subs.w	fp, sl, r4
 80064fa:	d00b      	beq.n	8006514 <_vfiprintf_r+0xa4>
 80064fc:	465b      	mov	r3, fp
 80064fe:	4622      	mov	r2, r4
 8006500:	4629      	mov	r1, r5
 8006502:	4630      	mov	r0, r6
 8006504:	f7ff ffa1 	bl	800644a <__sfputs_r>
 8006508:	3001      	adds	r0, #1
 800650a:	f000 80a7 	beq.w	800665c <_vfiprintf_r+0x1ec>
 800650e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006510:	445a      	add	r2, fp
 8006512:	9209      	str	r2, [sp, #36]	@ 0x24
 8006514:	f89a 3000 	ldrb.w	r3, [sl]
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 809f 	beq.w	800665c <_vfiprintf_r+0x1ec>
 800651e:	2300      	movs	r3, #0
 8006520:	f04f 32ff 	mov.w	r2, #4294967295
 8006524:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006528:	f10a 0a01 	add.w	sl, sl, #1
 800652c:	9304      	str	r3, [sp, #16]
 800652e:	9307      	str	r3, [sp, #28]
 8006530:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006534:	931a      	str	r3, [sp, #104]	@ 0x68
 8006536:	4654      	mov	r4, sl
 8006538:	2205      	movs	r2, #5
 800653a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800653e:	4853      	ldr	r0, [pc, #332]	@ (800668c <_vfiprintf_r+0x21c>)
 8006540:	f7f9 fe46 	bl	80001d0 <memchr>
 8006544:	9a04      	ldr	r2, [sp, #16]
 8006546:	b9d8      	cbnz	r0, 8006580 <_vfiprintf_r+0x110>
 8006548:	06d1      	lsls	r1, r2, #27
 800654a:	bf44      	itt	mi
 800654c:	2320      	movmi	r3, #32
 800654e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006552:	0713      	lsls	r3, r2, #28
 8006554:	bf44      	itt	mi
 8006556:	232b      	movmi	r3, #43	@ 0x2b
 8006558:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800655c:	f89a 3000 	ldrb.w	r3, [sl]
 8006560:	2b2a      	cmp	r3, #42	@ 0x2a
 8006562:	d015      	beq.n	8006590 <_vfiprintf_r+0x120>
 8006564:	9a07      	ldr	r2, [sp, #28]
 8006566:	4654      	mov	r4, sl
 8006568:	2000      	movs	r0, #0
 800656a:	f04f 0c0a 	mov.w	ip, #10
 800656e:	4621      	mov	r1, r4
 8006570:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006574:	3b30      	subs	r3, #48	@ 0x30
 8006576:	2b09      	cmp	r3, #9
 8006578:	d94b      	bls.n	8006612 <_vfiprintf_r+0x1a2>
 800657a:	b1b0      	cbz	r0, 80065aa <_vfiprintf_r+0x13a>
 800657c:	9207      	str	r2, [sp, #28]
 800657e:	e014      	b.n	80065aa <_vfiprintf_r+0x13a>
 8006580:	eba0 0308 	sub.w	r3, r0, r8
 8006584:	fa09 f303 	lsl.w	r3, r9, r3
 8006588:	4313      	orrs	r3, r2
 800658a:	9304      	str	r3, [sp, #16]
 800658c:	46a2      	mov	sl, r4
 800658e:	e7d2      	b.n	8006536 <_vfiprintf_r+0xc6>
 8006590:	9b03      	ldr	r3, [sp, #12]
 8006592:	1d19      	adds	r1, r3, #4
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	9103      	str	r1, [sp, #12]
 8006598:	2b00      	cmp	r3, #0
 800659a:	bfbb      	ittet	lt
 800659c:	425b      	neglt	r3, r3
 800659e:	f042 0202 	orrlt.w	r2, r2, #2
 80065a2:	9307      	strge	r3, [sp, #28]
 80065a4:	9307      	strlt	r3, [sp, #28]
 80065a6:	bfb8      	it	lt
 80065a8:	9204      	strlt	r2, [sp, #16]
 80065aa:	7823      	ldrb	r3, [r4, #0]
 80065ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80065ae:	d10a      	bne.n	80065c6 <_vfiprintf_r+0x156>
 80065b0:	7863      	ldrb	r3, [r4, #1]
 80065b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80065b4:	d132      	bne.n	800661c <_vfiprintf_r+0x1ac>
 80065b6:	9b03      	ldr	r3, [sp, #12]
 80065b8:	1d1a      	adds	r2, r3, #4
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	9203      	str	r2, [sp, #12]
 80065be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80065c2:	3402      	adds	r4, #2
 80065c4:	9305      	str	r3, [sp, #20]
 80065c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800669c <_vfiprintf_r+0x22c>
 80065ca:	7821      	ldrb	r1, [r4, #0]
 80065cc:	2203      	movs	r2, #3
 80065ce:	4650      	mov	r0, sl
 80065d0:	f7f9 fdfe 	bl	80001d0 <memchr>
 80065d4:	b138      	cbz	r0, 80065e6 <_vfiprintf_r+0x176>
 80065d6:	9b04      	ldr	r3, [sp, #16]
 80065d8:	eba0 000a 	sub.w	r0, r0, sl
 80065dc:	2240      	movs	r2, #64	@ 0x40
 80065de:	4082      	lsls	r2, r0
 80065e0:	4313      	orrs	r3, r2
 80065e2:	3401      	adds	r4, #1
 80065e4:	9304      	str	r3, [sp, #16]
 80065e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065ea:	4829      	ldr	r0, [pc, #164]	@ (8006690 <_vfiprintf_r+0x220>)
 80065ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80065f0:	2206      	movs	r2, #6
 80065f2:	f7f9 fded 	bl	80001d0 <memchr>
 80065f6:	2800      	cmp	r0, #0
 80065f8:	d03f      	beq.n	800667a <_vfiprintf_r+0x20a>
 80065fa:	4b26      	ldr	r3, [pc, #152]	@ (8006694 <_vfiprintf_r+0x224>)
 80065fc:	bb1b      	cbnz	r3, 8006646 <_vfiprintf_r+0x1d6>
 80065fe:	9b03      	ldr	r3, [sp, #12]
 8006600:	3307      	adds	r3, #7
 8006602:	f023 0307 	bic.w	r3, r3, #7
 8006606:	3308      	adds	r3, #8
 8006608:	9303      	str	r3, [sp, #12]
 800660a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800660c:	443b      	add	r3, r7
 800660e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006610:	e76a      	b.n	80064e8 <_vfiprintf_r+0x78>
 8006612:	fb0c 3202 	mla	r2, ip, r2, r3
 8006616:	460c      	mov	r4, r1
 8006618:	2001      	movs	r0, #1
 800661a:	e7a8      	b.n	800656e <_vfiprintf_r+0xfe>
 800661c:	2300      	movs	r3, #0
 800661e:	3401      	adds	r4, #1
 8006620:	9305      	str	r3, [sp, #20]
 8006622:	4619      	mov	r1, r3
 8006624:	f04f 0c0a 	mov.w	ip, #10
 8006628:	4620      	mov	r0, r4
 800662a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800662e:	3a30      	subs	r2, #48	@ 0x30
 8006630:	2a09      	cmp	r2, #9
 8006632:	d903      	bls.n	800663c <_vfiprintf_r+0x1cc>
 8006634:	2b00      	cmp	r3, #0
 8006636:	d0c6      	beq.n	80065c6 <_vfiprintf_r+0x156>
 8006638:	9105      	str	r1, [sp, #20]
 800663a:	e7c4      	b.n	80065c6 <_vfiprintf_r+0x156>
 800663c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006640:	4604      	mov	r4, r0
 8006642:	2301      	movs	r3, #1
 8006644:	e7f0      	b.n	8006628 <_vfiprintf_r+0x1b8>
 8006646:	ab03      	add	r3, sp, #12
 8006648:	9300      	str	r3, [sp, #0]
 800664a:	462a      	mov	r2, r5
 800664c:	4b12      	ldr	r3, [pc, #72]	@ (8006698 <_vfiprintf_r+0x228>)
 800664e:	a904      	add	r1, sp, #16
 8006650:	4630      	mov	r0, r6
 8006652:	f3af 8000 	nop.w
 8006656:	4607      	mov	r7, r0
 8006658:	1c78      	adds	r0, r7, #1
 800665a:	d1d6      	bne.n	800660a <_vfiprintf_r+0x19a>
 800665c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800665e:	07d9      	lsls	r1, r3, #31
 8006660:	d405      	bmi.n	800666e <_vfiprintf_r+0x1fe>
 8006662:	89ab      	ldrh	r3, [r5, #12]
 8006664:	059a      	lsls	r2, r3, #22
 8006666:	d402      	bmi.n	800666e <_vfiprintf_r+0x1fe>
 8006668:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800666a:	f7fb fa30 	bl	8001ace <__retarget_lock_release_recursive>
 800666e:	89ab      	ldrh	r3, [r5, #12]
 8006670:	065b      	lsls	r3, r3, #25
 8006672:	f53f af1f 	bmi.w	80064b4 <_vfiprintf_r+0x44>
 8006676:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006678:	e71e      	b.n	80064b8 <_vfiprintf_r+0x48>
 800667a:	ab03      	add	r3, sp, #12
 800667c:	9300      	str	r3, [sp, #0]
 800667e:	462a      	mov	r2, r5
 8006680:	4b05      	ldr	r3, [pc, #20]	@ (8006698 <_vfiprintf_r+0x228>)
 8006682:	a904      	add	r1, sp, #16
 8006684:	4630      	mov	r0, r6
 8006686:	f000 f879 	bl	800677c <_printf_i>
 800668a:	e7e4      	b.n	8006656 <_vfiprintf_r+0x1e6>
 800668c:	08006e68 	.word	0x08006e68
 8006690:	08006e72 	.word	0x08006e72
 8006694:	00000000 	.word	0x00000000
 8006698:	0800644b 	.word	0x0800644b
 800669c:	08006e6e 	.word	0x08006e6e

080066a0 <_printf_common>:
 80066a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066a4:	4616      	mov	r6, r2
 80066a6:	4698      	mov	r8, r3
 80066a8:	688a      	ldr	r2, [r1, #8]
 80066aa:	690b      	ldr	r3, [r1, #16]
 80066ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80066b0:	4293      	cmp	r3, r2
 80066b2:	bfb8      	it	lt
 80066b4:	4613      	movlt	r3, r2
 80066b6:	6033      	str	r3, [r6, #0]
 80066b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80066bc:	4607      	mov	r7, r0
 80066be:	460c      	mov	r4, r1
 80066c0:	b10a      	cbz	r2, 80066c6 <_printf_common+0x26>
 80066c2:	3301      	adds	r3, #1
 80066c4:	6033      	str	r3, [r6, #0]
 80066c6:	6823      	ldr	r3, [r4, #0]
 80066c8:	0699      	lsls	r1, r3, #26
 80066ca:	bf42      	ittt	mi
 80066cc:	6833      	ldrmi	r3, [r6, #0]
 80066ce:	3302      	addmi	r3, #2
 80066d0:	6033      	strmi	r3, [r6, #0]
 80066d2:	6825      	ldr	r5, [r4, #0]
 80066d4:	f015 0506 	ands.w	r5, r5, #6
 80066d8:	d106      	bne.n	80066e8 <_printf_common+0x48>
 80066da:	f104 0a19 	add.w	sl, r4, #25
 80066de:	68e3      	ldr	r3, [r4, #12]
 80066e0:	6832      	ldr	r2, [r6, #0]
 80066e2:	1a9b      	subs	r3, r3, r2
 80066e4:	42ab      	cmp	r3, r5
 80066e6:	dc26      	bgt.n	8006736 <_printf_common+0x96>
 80066e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80066ec:	6822      	ldr	r2, [r4, #0]
 80066ee:	3b00      	subs	r3, #0
 80066f0:	bf18      	it	ne
 80066f2:	2301      	movne	r3, #1
 80066f4:	0692      	lsls	r2, r2, #26
 80066f6:	d42b      	bmi.n	8006750 <_printf_common+0xb0>
 80066f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80066fc:	4641      	mov	r1, r8
 80066fe:	4638      	mov	r0, r7
 8006700:	47c8      	blx	r9
 8006702:	3001      	adds	r0, #1
 8006704:	d01e      	beq.n	8006744 <_printf_common+0xa4>
 8006706:	6823      	ldr	r3, [r4, #0]
 8006708:	6922      	ldr	r2, [r4, #16]
 800670a:	f003 0306 	and.w	r3, r3, #6
 800670e:	2b04      	cmp	r3, #4
 8006710:	bf02      	ittt	eq
 8006712:	68e5      	ldreq	r5, [r4, #12]
 8006714:	6833      	ldreq	r3, [r6, #0]
 8006716:	1aed      	subeq	r5, r5, r3
 8006718:	68a3      	ldr	r3, [r4, #8]
 800671a:	bf0c      	ite	eq
 800671c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006720:	2500      	movne	r5, #0
 8006722:	4293      	cmp	r3, r2
 8006724:	bfc4      	itt	gt
 8006726:	1a9b      	subgt	r3, r3, r2
 8006728:	18ed      	addgt	r5, r5, r3
 800672a:	2600      	movs	r6, #0
 800672c:	341a      	adds	r4, #26
 800672e:	42b5      	cmp	r5, r6
 8006730:	d11a      	bne.n	8006768 <_printf_common+0xc8>
 8006732:	2000      	movs	r0, #0
 8006734:	e008      	b.n	8006748 <_printf_common+0xa8>
 8006736:	2301      	movs	r3, #1
 8006738:	4652      	mov	r2, sl
 800673a:	4641      	mov	r1, r8
 800673c:	4638      	mov	r0, r7
 800673e:	47c8      	blx	r9
 8006740:	3001      	adds	r0, #1
 8006742:	d103      	bne.n	800674c <_printf_common+0xac>
 8006744:	f04f 30ff 	mov.w	r0, #4294967295
 8006748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800674c:	3501      	adds	r5, #1
 800674e:	e7c6      	b.n	80066de <_printf_common+0x3e>
 8006750:	18e1      	adds	r1, r4, r3
 8006752:	1c5a      	adds	r2, r3, #1
 8006754:	2030      	movs	r0, #48	@ 0x30
 8006756:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800675a:	4422      	add	r2, r4
 800675c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006760:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006764:	3302      	adds	r3, #2
 8006766:	e7c7      	b.n	80066f8 <_printf_common+0x58>
 8006768:	2301      	movs	r3, #1
 800676a:	4622      	mov	r2, r4
 800676c:	4641      	mov	r1, r8
 800676e:	4638      	mov	r0, r7
 8006770:	47c8      	blx	r9
 8006772:	3001      	adds	r0, #1
 8006774:	d0e6      	beq.n	8006744 <_printf_common+0xa4>
 8006776:	3601      	adds	r6, #1
 8006778:	e7d9      	b.n	800672e <_printf_common+0x8e>
	...

0800677c <_printf_i>:
 800677c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006780:	7e0f      	ldrb	r7, [r1, #24]
 8006782:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006784:	2f78      	cmp	r7, #120	@ 0x78
 8006786:	4691      	mov	r9, r2
 8006788:	4680      	mov	r8, r0
 800678a:	460c      	mov	r4, r1
 800678c:	469a      	mov	sl, r3
 800678e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006792:	d807      	bhi.n	80067a4 <_printf_i+0x28>
 8006794:	2f62      	cmp	r7, #98	@ 0x62
 8006796:	d80a      	bhi.n	80067ae <_printf_i+0x32>
 8006798:	2f00      	cmp	r7, #0
 800679a:	f000 80d2 	beq.w	8006942 <_printf_i+0x1c6>
 800679e:	2f58      	cmp	r7, #88	@ 0x58
 80067a0:	f000 80b9 	beq.w	8006916 <_printf_i+0x19a>
 80067a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80067ac:	e03a      	b.n	8006824 <_printf_i+0xa8>
 80067ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80067b2:	2b15      	cmp	r3, #21
 80067b4:	d8f6      	bhi.n	80067a4 <_printf_i+0x28>
 80067b6:	a101      	add	r1, pc, #4	@ (adr r1, 80067bc <_printf_i+0x40>)
 80067b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067bc:	08006815 	.word	0x08006815
 80067c0:	08006829 	.word	0x08006829
 80067c4:	080067a5 	.word	0x080067a5
 80067c8:	080067a5 	.word	0x080067a5
 80067cc:	080067a5 	.word	0x080067a5
 80067d0:	080067a5 	.word	0x080067a5
 80067d4:	08006829 	.word	0x08006829
 80067d8:	080067a5 	.word	0x080067a5
 80067dc:	080067a5 	.word	0x080067a5
 80067e0:	080067a5 	.word	0x080067a5
 80067e4:	080067a5 	.word	0x080067a5
 80067e8:	08006929 	.word	0x08006929
 80067ec:	08006853 	.word	0x08006853
 80067f0:	080068e3 	.word	0x080068e3
 80067f4:	080067a5 	.word	0x080067a5
 80067f8:	080067a5 	.word	0x080067a5
 80067fc:	0800694b 	.word	0x0800694b
 8006800:	080067a5 	.word	0x080067a5
 8006804:	08006853 	.word	0x08006853
 8006808:	080067a5 	.word	0x080067a5
 800680c:	080067a5 	.word	0x080067a5
 8006810:	080068eb 	.word	0x080068eb
 8006814:	6833      	ldr	r3, [r6, #0]
 8006816:	1d1a      	adds	r2, r3, #4
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	6032      	str	r2, [r6, #0]
 800681c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006820:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006824:	2301      	movs	r3, #1
 8006826:	e09d      	b.n	8006964 <_printf_i+0x1e8>
 8006828:	6833      	ldr	r3, [r6, #0]
 800682a:	6820      	ldr	r0, [r4, #0]
 800682c:	1d19      	adds	r1, r3, #4
 800682e:	6031      	str	r1, [r6, #0]
 8006830:	0606      	lsls	r6, r0, #24
 8006832:	d501      	bpl.n	8006838 <_printf_i+0xbc>
 8006834:	681d      	ldr	r5, [r3, #0]
 8006836:	e003      	b.n	8006840 <_printf_i+0xc4>
 8006838:	0645      	lsls	r5, r0, #25
 800683a:	d5fb      	bpl.n	8006834 <_printf_i+0xb8>
 800683c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006840:	2d00      	cmp	r5, #0
 8006842:	da03      	bge.n	800684c <_printf_i+0xd0>
 8006844:	232d      	movs	r3, #45	@ 0x2d
 8006846:	426d      	negs	r5, r5
 8006848:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800684c:	4859      	ldr	r0, [pc, #356]	@ (80069b4 <_printf_i+0x238>)
 800684e:	230a      	movs	r3, #10
 8006850:	e011      	b.n	8006876 <_printf_i+0xfa>
 8006852:	6821      	ldr	r1, [r4, #0]
 8006854:	6833      	ldr	r3, [r6, #0]
 8006856:	0608      	lsls	r0, r1, #24
 8006858:	f853 5b04 	ldr.w	r5, [r3], #4
 800685c:	d402      	bmi.n	8006864 <_printf_i+0xe8>
 800685e:	0649      	lsls	r1, r1, #25
 8006860:	bf48      	it	mi
 8006862:	b2ad      	uxthmi	r5, r5
 8006864:	2f6f      	cmp	r7, #111	@ 0x6f
 8006866:	4853      	ldr	r0, [pc, #332]	@ (80069b4 <_printf_i+0x238>)
 8006868:	6033      	str	r3, [r6, #0]
 800686a:	bf14      	ite	ne
 800686c:	230a      	movne	r3, #10
 800686e:	2308      	moveq	r3, #8
 8006870:	2100      	movs	r1, #0
 8006872:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006876:	6866      	ldr	r6, [r4, #4]
 8006878:	60a6      	str	r6, [r4, #8]
 800687a:	2e00      	cmp	r6, #0
 800687c:	bfa2      	ittt	ge
 800687e:	6821      	ldrge	r1, [r4, #0]
 8006880:	f021 0104 	bicge.w	r1, r1, #4
 8006884:	6021      	strge	r1, [r4, #0]
 8006886:	b90d      	cbnz	r5, 800688c <_printf_i+0x110>
 8006888:	2e00      	cmp	r6, #0
 800688a:	d04b      	beq.n	8006924 <_printf_i+0x1a8>
 800688c:	4616      	mov	r6, r2
 800688e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006892:	fb03 5711 	mls	r7, r3, r1, r5
 8006896:	5dc7      	ldrb	r7, [r0, r7]
 8006898:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800689c:	462f      	mov	r7, r5
 800689e:	42bb      	cmp	r3, r7
 80068a0:	460d      	mov	r5, r1
 80068a2:	d9f4      	bls.n	800688e <_printf_i+0x112>
 80068a4:	2b08      	cmp	r3, #8
 80068a6:	d10b      	bne.n	80068c0 <_printf_i+0x144>
 80068a8:	6823      	ldr	r3, [r4, #0]
 80068aa:	07df      	lsls	r7, r3, #31
 80068ac:	d508      	bpl.n	80068c0 <_printf_i+0x144>
 80068ae:	6923      	ldr	r3, [r4, #16]
 80068b0:	6861      	ldr	r1, [r4, #4]
 80068b2:	4299      	cmp	r1, r3
 80068b4:	bfde      	ittt	le
 80068b6:	2330      	movle	r3, #48	@ 0x30
 80068b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80068bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80068c0:	1b92      	subs	r2, r2, r6
 80068c2:	6122      	str	r2, [r4, #16]
 80068c4:	f8cd a000 	str.w	sl, [sp]
 80068c8:	464b      	mov	r3, r9
 80068ca:	aa03      	add	r2, sp, #12
 80068cc:	4621      	mov	r1, r4
 80068ce:	4640      	mov	r0, r8
 80068d0:	f7ff fee6 	bl	80066a0 <_printf_common>
 80068d4:	3001      	adds	r0, #1
 80068d6:	d14a      	bne.n	800696e <_printf_i+0x1f2>
 80068d8:	f04f 30ff 	mov.w	r0, #4294967295
 80068dc:	b004      	add	sp, #16
 80068de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068e2:	6823      	ldr	r3, [r4, #0]
 80068e4:	f043 0320 	orr.w	r3, r3, #32
 80068e8:	6023      	str	r3, [r4, #0]
 80068ea:	4833      	ldr	r0, [pc, #204]	@ (80069b8 <_printf_i+0x23c>)
 80068ec:	2778      	movs	r7, #120	@ 0x78
 80068ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80068f2:	6823      	ldr	r3, [r4, #0]
 80068f4:	6831      	ldr	r1, [r6, #0]
 80068f6:	061f      	lsls	r7, r3, #24
 80068f8:	f851 5b04 	ldr.w	r5, [r1], #4
 80068fc:	d402      	bmi.n	8006904 <_printf_i+0x188>
 80068fe:	065f      	lsls	r7, r3, #25
 8006900:	bf48      	it	mi
 8006902:	b2ad      	uxthmi	r5, r5
 8006904:	6031      	str	r1, [r6, #0]
 8006906:	07d9      	lsls	r1, r3, #31
 8006908:	bf44      	itt	mi
 800690a:	f043 0320 	orrmi.w	r3, r3, #32
 800690e:	6023      	strmi	r3, [r4, #0]
 8006910:	b11d      	cbz	r5, 800691a <_printf_i+0x19e>
 8006912:	2310      	movs	r3, #16
 8006914:	e7ac      	b.n	8006870 <_printf_i+0xf4>
 8006916:	4827      	ldr	r0, [pc, #156]	@ (80069b4 <_printf_i+0x238>)
 8006918:	e7e9      	b.n	80068ee <_printf_i+0x172>
 800691a:	6823      	ldr	r3, [r4, #0]
 800691c:	f023 0320 	bic.w	r3, r3, #32
 8006920:	6023      	str	r3, [r4, #0]
 8006922:	e7f6      	b.n	8006912 <_printf_i+0x196>
 8006924:	4616      	mov	r6, r2
 8006926:	e7bd      	b.n	80068a4 <_printf_i+0x128>
 8006928:	6833      	ldr	r3, [r6, #0]
 800692a:	6825      	ldr	r5, [r4, #0]
 800692c:	6961      	ldr	r1, [r4, #20]
 800692e:	1d18      	adds	r0, r3, #4
 8006930:	6030      	str	r0, [r6, #0]
 8006932:	062e      	lsls	r6, r5, #24
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	d501      	bpl.n	800693c <_printf_i+0x1c0>
 8006938:	6019      	str	r1, [r3, #0]
 800693a:	e002      	b.n	8006942 <_printf_i+0x1c6>
 800693c:	0668      	lsls	r0, r5, #25
 800693e:	d5fb      	bpl.n	8006938 <_printf_i+0x1bc>
 8006940:	8019      	strh	r1, [r3, #0]
 8006942:	2300      	movs	r3, #0
 8006944:	6123      	str	r3, [r4, #16]
 8006946:	4616      	mov	r6, r2
 8006948:	e7bc      	b.n	80068c4 <_printf_i+0x148>
 800694a:	6833      	ldr	r3, [r6, #0]
 800694c:	1d1a      	adds	r2, r3, #4
 800694e:	6032      	str	r2, [r6, #0]
 8006950:	681e      	ldr	r6, [r3, #0]
 8006952:	6862      	ldr	r2, [r4, #4]
 8006954:	2100      	movs	r1, #0
 8006956:	4630      	mov	r0, r6
 8006958:	f7f9 fc3a 	bl	80001d0 <memchr>
 800695c:	b108      	cbz	r0, 8006962 <_printf_i+0x1e6>
 800695e:	1b80      	subs	r0, r0, r6
 8006960:	6060      	str	r0, [r4, #4]
 8006962:	6863      	ldr	r3, [r4, #4]
 8006964:	6123      	str	r3, [r4, #16]
 8006966:	2300      	movs	r3, #0
 8006968:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800696c:	e7aa      	b.n	80068c4 <_printf_i+0x148>
 800696e:	6923      	ldr	r3, [r4, #16]
 8006970:	4632      	mov	r2, r6
 8006972:	4649      	mov	r1, r9
 8006974:	4640      	mov	r0, r8
 8006976:	47d0      	blx	sl
 8006978:	3001      	adds	r0, #1
 800697a:	d0ad      	beq.n	80068d8 <_printf_i+0x15c>
 800697c:	6823      	ldr	r3, [r4, #0]
 800697e:	079b      	lsls	r3, r3, #30
 8006980:	d413      	bmi.n	80069aa <_printf_i+0x22e>
 8006982:	68e0      	ldr	r0, [r4, #12]
 8006984:	9b03      	ldr	r3, [sp, #12]
 8006986:	4298      	cmp	r0, r3
 8006988:	bfb8      	it	lt
 800698a:	4618      	movlt	r0, r3
 800698c:	e7a6      	b.n	80068dc <_printf_i+0x160>
 800698e:	2301      	movs	r3, #1
 8006990:	4632      	mov	r2, r6
 8006992:	4649      	mov	r1, r9
 8006994:	4640      	mov	r0, r8
 8006996:	47d0      	blx	sl
 8006998:	3001      	adds	r0, #1
 800699a:	d09d      	beq.n	80068d8 <_printf_i+0x15c>
 800699c:	3501      	adds	r5, #1
 800699e:	68e3      	ldr	r3, [r4, #12]
 80069a0:	9903      	ldr	r1, [sp, #12]
 80069a2:	1a5b      	subs	r3, r3, r1
 80069a4:	42ab      	cmp	r3, r5
 80069a6:	dcf2      	bgt.n	800698e <_printf_i+0x212>
 80069a8:	e7eb      	b.n	8006982 <_printf_i+0x206>
 80069aa:	2500      	movs	r5, #0
 80069ac:	f104 0619 	add.w	r6, r4, #25
 80069b0:	e7f5      	b.n	800699e <_printf_i+0x222>
 80069b2:	bf00      	nop
 80069b4:	08006e79 	.word	0x08006e79
 80069b8:	08006e8a 	.word	0x08006e8a

080069bc <__sflush_r>:
 80069bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80069c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069c4:	0716      	lsls	r6, r2, #28
 80069c6:	4605      	mov	r5, r0
 80069c8:	460c      	mov	r4, r1
 80069ca:	d454      	bmi.n	8006a76 <__sflush_r+0xba>
 80069cc:	684b      	ldr	r3, [r1, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	dc02      	bgt.n	80069d8 <__sflush_r+0x1c>
 80069d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	dd48      	ble.n	8006a6a <__sflush_r+0xae>
 80069d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80069da:	2e00      	cmp	r6, #0
 80069dc:	d045      	beq.n	8006a6a <__sflush_r+0xae>
 80069de:	2300      	movs	r3, #0
 80069e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80069e4:	682f      	ldr	r7, [r5, #0]
 80069e6:	6a21      	ldr	r1, [r4, #32]
 80069e8:	602b      	str	r3, [r5, #0]
 80069ea:	d030      	beq.n	8006a4e <__sflush_r+0x92>
 80069ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80069ee:	89a3      	ldrh	r3, [r4, #12]
 80069f0:	0759      	lsls	r1, r3, #29
 80069f2:	d505      	bpl.n	8006a00 <__sflush_r+0x44>
 80069f4:	6863      	ldr	r3, [r4, #4]
 80069f6:	1ad2      	subs	r2, r2, r3
 80069f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80069fa:	b10b      	cbz	r3, 8006a00 <__sflush_r+0x44>
 80069fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80069fe:	1ad2      	subs	r2, r2, r3
 8006a00:	2300      	movs	r3, #0
 8006a02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a04:	6a21      	ldr	r1, [r4, #32]
 8006a06:	4628      	mov	r0, r5
 8006a08:	47b0      	blx	r6
 8006a0a:	1c43      	adds	r3, r0, #1
 8006a0c:	89a3      	ldrh	r3, [r4, #12]
 8006a0e:	d106      	bne.n	8006a1e <__sflush_r+0x62>
 8006a10:	6829      	ldr	r1, [r5, #0]
 8006a12:	291d      	cmp	r1, #29
 8006a14:	d82b      	bhi.n	8006a6e <__sflush_r+0xb2>
 8006a16:	4a2a      	ldr	r2, [pc, #168]	@ (8006ac0 <__sflush_r+0x104>)
 8006a18:	410a      	asrs	r2, r1
 8006a1a:	07d6      	lsls	r6, r2, #31
 8006a1c:	d427      	bmi.n	8006a6e <__sflush_r+0xb2>
 8006a1e:	2200      	movs	r2, #0
 8006a20:	6062      	str	r2, [r4, #4]
 8006a22:	04d9      	lsls	r1, r3, #19
 8006a24:	6922      	ldr	r2, [r4, #16]
 8006a26:	6022      	str	r2, [r4, #0]
 8006a28:	d504      	bpl.n	8006a34 <__sflush_r+0x78>
 8006a2a:	1c42      	adds	r2, r0, #1
 8006a2c:	d101      	bne.n	8006a32 <__sflush_r+0x76>
 8006a2e:	682b      	ldr	r3, [r5, #0]
 8006a30:	b903      	cbnz	r3, 8006a34 <__sflush_r+0x78>
 8006a32:	6560      	str	r0, [r4, #84]	@ 0x54
 8006a34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a36:	602f      	str	r7, [r5, #0]
 8006a38:	b1b9      	cbz	r1, 8006a6a <__sflush_r+0xae>
 8006a3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a3e:	4299      	cmp	r1, r3
 8006a40:	d002      	beq.n	8006a48 <__sflush_r+0x8c>
 8006a42:	4628      	mov	r0, r5
 8006a44:	f7ff fca0 	bl	8006388 <_free_r>
 8006a48:	2300      	movs	r3, #0
 8006a4a:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a4c:	e00d      	b.n	8006a6a <__sflush_r+0xae>
 8006a4e:	2301      	movs	r3, #1
 8006a50:	4628      	mov	r0, r5
 8006a52:	47b0      	blx	r6
 8006a54:	4602      	mov	r2, r0
 8006a56:	1c50      	adds	r0, r2, #1
 8006a58:	d1c9      	bne.n	80069ee <__sflush_r+0x32>
 8006a5a:	682b      	ldr	r3, [r5, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d0c6      	beq.n	80069ee <__sflush_r+0x32>
 8006a60:	2b1d      	cmp	r3, #29
 8006a62:	d001      	beq.n	8006a68 <__sflush_r+0xac>
 8006a64:	2b16      	cmp	r3, #22
 8006a66:	d11e      	bne.n	8006aa6 <__sflush_r+0xea>
 8006a68:	602f      	str	r7, [r5, #0]
 8006a6a:	2000      	movs	r0, #0
 8006a6c:	e022      	b.n	8006ab4 <__sflush_r+0xf8>
 8006a6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a72:	b21b      	sxth	r3, r3
 8006a74:	e01b      	b.n	8006aae <__sflush_r+0xf2>
 8006a76:	690f      	ldr	r7, [r1, #16]
 8006a78:	2f00      	cmp	r7, #0
 8006a7a:	d0f6      	beq.n	8006a6a <__sflush_r+0xae>
 8006a7c:	0793      	lsls	r3, r2, #30
 8006a7e:	680e      	ldr	r6, [r1, #0]
 8006a80:	bf08      	it	eq
 8006a82:	694b      	ldreq	r3, [r1, #20]
 8006a84:	600f      	str	r7, [r1, #0]
 8006a86:	bf18      	it	ne
 8006a88:	2300      	movne	r3, #0
 8006a8a:	eba6 0807 	sub.w	r8, r6, r7
 8006a8e:	608b      	str	r3, [r1, #8]
 8006a90:	f1b8 0f00 	cmp.w	r8, #0
 8006a94:	dde9      	ble.n	8006a6a <__sflush_r+0xae>
 8006a96:	6a21      	ldr	r1, [r4, #32]
 8006a98:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006a9a:	4643      	mov	r3, r8
 8006a9c:	463a      	mov	r2, r7
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	47b0      	blx	r6
 8006aa2:	2800      	cmp	r0, #0
 8006aa4:	dc08      	bgt.n	8006ab8 <__sflush_r+0xfc>
 8006aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006aae:	81a3      	strh	r3, [r4, #12]
 8006ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ab8:	4407      	add	r7, r0
 8006aba:	eba8 0800 	sub.w	r8, r8, r0
 8006abe:	e7e7      	b.n	8006a90 <__sflush_r+0xd4>
 8006ac0:	dfbffffe 	.word	0xdfbffffe

08006ac4 <_fflush_r>:
 8006ac4:	b538      	push	{r3, r4, r5, lr}
 8006ac6:	690b      	ldr	r3, [r1, #16]
 8006ac8:	4605      	mov	r5, r0
 8006aca:	460c      	mov	r4, r1
 8006acc:	b913      	cbnz	r3, 8006ad4 <_fflush_r+0x10>
 8006ace:	2500      	movs	r5, #0
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	bd38      	pop	{r3, r4, r5, pc}
 8006ad4:	b118      	cbz	r0, 8006ade <_fflush_r+0x1a>
 8006ad6:	6a03      	ldr	r3, [r0, #32]
 8006ad8:	b90b      	cbnz	r3, 8006ade <_fflush_r+0x1a>
 8006ada:	f7ff fb39 	bl	8006150 <__sinit>
 8006ade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d0f3      	beq.n	8006ace <_fflush_r+0xa>
 8006ae6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006ae8:	07d0      	lsls	r0, r2, #31
 8006aea:	d404      	bmi.n	8006af6 <_fflush_r+0x32>
 8006aec:	0599      	lsls	r1, r3, #22
 8006aee:	d402      	bmi.n	8006af6 <_fflush_r+0x32>
 8006af0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006af2:	f7fa ffd7 	bl	8001aa4 <__retarget_lock_acquire_recursive>
 8006af6:	4628      	mov	r0, r5
 8006af8:	4621      	mov	r1, r4
 8006afa:	f7ff ff5f 	bl	80069bc <__sflush_r>
 8006afe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b00:	07da      	lsls	r2, r3, #31
 8006b02:	4605      	mov	r5, r0
 8006b04:	d4e4      	bmi.n	8006ad0 <_fflush_r+0xc>
 8006b06:	89a3      	ldrh	r3, [r4, #12]
 8006b08:	059b      	lsls	r3, r3, #22
 8006b0a:	d4e1      	bmi.n	8006ad0 <_fflush_r+0xc>
 8006b0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b0e:	f7fa ffde 	bl	8001ace <__retarget_lock_release_recursive>
 8006b12:	e7dd      	b.n	8006ad0 <_fflush_r+0xc>

08006b14 <_putc_r>:
 8006b14:	b570      	push	{r4, r5, r6, lr}
 8006b16:	460d      	mov	r5, r1
 8006b18:	4614      	mov	r4, r2
 8006b1a:	4606      	mov	r6, r0
 8006b1c:	b118      	cbz	r0, 8006b26 <_putc_r+0x12>
 8006b1e:	6a03      	ldr	r3, [r0, #32]
 8006b20:	b90b      	cbnz	r3, 8006b26 <_putc_r+0x12>
 8006b22:	f7ff fb15 	bl	8006150 <__sinit>
 8006b26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b28:	07d8      	lsls	r0, r3, #31
 8006b2a:	d405      	bmi.n	8006b38 <_putc_r+0x24>
 8006b2c:	89a3      	ldrh	r3, [r4, #12]
 8006b2e:	0599      	lsls	r1, r3, #22
 8006b30:	d402      	bmi.n	8006b38 <_putc_r+0x24>
 8006b32:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b34:	f7fa ffb6 	bl	8001aa4 <__retarget_lock_acquire_recursive>
 8006b38:	68a3      	ldr	r3, [r4, #8]
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	60a3      	str	r3, [r4, #8]
 8006b40:	da05      	bge.n	8006b4e <_putc_r+0x3a>
 8006b42:	69a2      	ldr	r2, [r4, #24]
 8006b44:	4293      	cmp	r3, r2
 8006b46:	db12      	blt.n	8006b6e <_putc_r+0x5a>
 8006b48:	b2eb      	uxtb	r3, r5
 8006b4a:	2b0a      	cmp	r3, #10
 8006b4c:	d00f      	beq.n	8006b6e <_putc_r+0x5a>
 8006b4e:	6823      	ldr	r3, [r4, #0]
 8006b50:	1c5a      	adds	r2, r3, #1
 8006b52:	6022      	str	r2, [r4, #0]
 8006b54:	701d      	strb	r5, [r3, #0]
 8006b56:	b2ed      	uxtb	r5, r5
 8006b58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b5a:	07da      	lsls	r2, r3, #31
 8006b5c:	d405      	bmi.n	8006b6a <_putc_r+0x56>
 8006b5e:	89a3      	ldrh	r3, [r4, #12]
 8006b60:	059b      	lsls	r3, r3, #22
 8006b62:	d402      	bmi.n	8006b6a <_putc_r+0x56>
 8006b64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b66:	f7fa ffb2 	bl	8001ace <__retarget_lock_release_recursive>
 8006b6a:	4628      	mov	r0, r5
 8006b6c:	bd70      	pop	{r4, r5, r6, pc}
 8006b6e:	4629      	mov	r1, r5
 8006b70:	4622      	mov	r2, r4
 8006b72:	4630      	mov	r0, r6
 8006b74:	f000 f802 	bl	8006b7c <__swbuf_r>
 8006b78:	4605      	mov	r5, r0
 8006b7a:	e7ed      	b.n	8006b58 <_putc_r+0x44>

08006b7c <__swbuf_r>:
 8006b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b7e:	460e      	mov	r6, r1
 8006b80:	4614      	mov	r4, r2
 8006b82:	4605      	mov	r5, r0
 8006b84:	b118      	cbz	r0, 8006b8e <__swbuf_r+0x12>
 8006b86:	6a03      	ldr	r3, [r0, #32]
 8006b88:	b90b      	cbnz	r3, 8006b8e <__swbuf_r+0x12>
 8006b8a:	f7ff fae1 	bl	8006150 <__sinit>
 8006b8e:	69a3      	ldr	r3, [r4, #24]
 8006b90:	60a3      	str	r3, [r4, #8]
 8006b92:	89a3      	ldrh	r3, [r4, #12]
 8006b94:	071a      	lsls	r2, r3, #28
 8006b96:	d501      	bpl.n	8006b9c <__swbuf_r+0x20>
 8006b98:	6923      	ldr	r3, [r4, #16]
 8006b9a:	b943      	cbnz	r3, 8006bae <__swbuf_r+0x32>
 8006b9c:	4621      	mov	r1, r4
 8006b9e:	4628      	mov	r0, r5
 8006ba0:	f000 f82a 	bl	8006bf8 <__swsetup_r>
 8006ba4:	b118      	cbz	r0, 8006bae <__swbuf_r+0x32>
 8006ba6:	f04f 37ff 	mov.w	r7, #4294967295
 8006baa:	4638      	mov	r0, r7
 8006bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bae:	6823      	ldr	r3, [r4, #0]
 8006bb0:	6922      	ldr	r2, [r4, #16]
 8006bb2:	1a98      	subs	r0, r3, r2
 8006bb4:	6963      	ldr	r3, [r4, #20]
 8006bb6:	b2f6      	uxtb	r6, r6
 8006bb8:	4283      	cmp	r3, r0
 8006bba:	4637      	mov	r7, r6
 8006bbc:	dc05      	bgt.n	8006bca <__swbuf_r+0x4e>
 8006bbe:	4621      	mov	r1, r4
 8006bc0:	4628      	mov	r0, r5
 8006bc2:	f7ff ff7f 	bl	8006ac4 <_fflush_r>
 8006bc6:	2800      	cmp	r0, #0
 8006bc8:	d1ed      	bne.n	8006ba6 <__swbuf_r+0x2a>
 8006bca:	68a3      	ldr	r3, [r4, #8]
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	60a3      	str	r3, [r4, #8]
 8006bd0:	6823      	ldr	r3, [r4, #0]
 8006bd2:	1c5a      	adds	r2, r3, #1
 8006bd4:	6022      	str	r2, [r4, #0]
 8006bd6:	701e      	strb	r6, [r3, #0]
 8006bd8:	6962      	ldr	r2, [r4, #20]
 8006bda:	1c43      	adds	r3, r0, #1
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d004      	beq.n	8006bea <__swbuf_r+0x6e>
 8006be0:	89a3      	ldrh	r3, [r4, #12]
 8006be2:	07db      	lsls	r3, r3, #31
 8006be4:	d5e1      	bpl.n	8006baa <__swbuf_r+0x2e>
 8006be6:	2e0a      	cmp	r6, #10
 8006be8:	d1df      	bne.n	8006baa <__swbuf_r+0x2e>
 8006bea:	4621      	mov	r1, r4
 8006bec:	4628      	mov	r0, r5
 8006bee:	f7ff ff69 	bl	8006ac4 <_fflush_r>
 8006bf2:	2800      	cmp	r0, #0
 8006bf4:	d0d9      	beq.n	8006baa <__swbuf_r+0x2e>
 8006bf6:	e7d6      	b.n	8006ba6 <__swbuf_r+0x2a>

08006bf8 <__swsetup_r>:
 8006bf8:	b538      	push	{r3, r4, r5, lr}
 8006bfa:	4b29      	ldr	r3, [pc, #164]	@ (8006ca0 <__swsetup_r+0xa8>)
 8006bfc:	4605      	mov	r5, r0
 8006bfe:	6818      	ldr	r0, [r3, #0]
 8006c00:	460c      	mov	r4, r1
 8006c02:	b118      	cbz	r0, 8006c0c <__swsetup_r+0x14>
 8006c04:	6a03      	ldr	r3, [r0, #32]
 8006c06:	b90b      	cbnz	r3, 8006c0c <__swsetup_r+0x14>
 8006c08:	f7ff faa2 	bl	8006150 <__sinit>
 8006c0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c10:	0719      	lsls	r1, r3, #28
 8006c12:	d422      	bmi.n	8006c5a <__swsetup_r+0x62>
 8006c14:	06da      	lsls	r2, r3, #27
 8006c16:	d407      	bmi.n	8006c28 <__swsetup_r+0x30>
 8006c18:	2209      	movs	r2, #9
 8006c1a:	602a      	str	r2, [r5, #0]
 8006c1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c20:	81a3      	strh	r3, [r4, #12]
 8006c22:	f04f 30ff 	mov.w	r0, #4294967295
 8006c26:	e033      	b.n	8006c90 <__swsetup_r+0x98>
 8006c28:	0758      	lsls	r0, r3, #29
 8006c2a:	d512      	bpl.n	8006c52 <__swsetup_r+0x5a>
 8006c2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c2e:	b141      	cbz	r1, 8006c42 <__swsetup_r+0x4a>
 8006c30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006c34:	4299      	cmp	r1, r3
 8006c36:	d002      	beq.n	8006c3e <__swsetup_r+0x46>
 8006c38:	4628      	mov	r0, r5
 8006c3a:	f7ff fba5 	bl	8006388 <_free_r>
 8006c3e:	2300      	movs	r3, #0
 8006c40:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c42:	89a3      	ldrh	r3, [r4, #12]
 8006c44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006c48:	81a3      	strh	r3, [r4, #12]
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	6063      	str	r3, [r4, #4]
 8006c4e:	6923      	ldr	r3, [r4, #16]
 8006c50:	6023      	str	r3, [r4, #0]
 8006c52:	89a3      	ldrh	r3, [r4, #12]
 8006c54:	f043 0308 	orr.w	r3, r3, #8
 8006c58:	81a3      	strh	r3, [r4, #12]
 8006c5a:	6923      	ldr	r3, [r4, #16]
 8006c5c:	b94b      	cbnz	r3, 8006c72 <__swsetup_r+0x7a>
 8006c5e:	89a3      	ldrh	r3, [r4, #12]
 8006c60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006c64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c68:	d003      	beq.n	8006c72 <__swsetup_r+0x7a>
 8006c6a:	4621      	mov	r1, r4
 8006c6c:	4628      	mov	r0, r5
 8006c6e:	f000 f83f 	bl	8006cf0 <__smakebuf_r>
 8006c72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c76:	f013 0201 	ands.w	r2, r3, #1
 8006c7a:	d00a      	beq.n	8006c92 <__swsetup_r+0x9a>
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	60a2      	str	r2, [r4, #8]
 8006c80:	6962      	ldr	r2, [r4, #20]
 8006c82:	4252      	negs	r2, r2
 8006c84:	61a2      	str	r2, [r4, #24]
 8006c86:	6922      	ldr	r2, [r4, #16]
 8006c88:	b942      	cbnz	r2, 8006c9c <__swsetup_r+0xa4>
 8006c8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006c8e:	d1c5      	bne.n	8006c1c <__swsetup_r+0x24>
 8006c90:	bd38      	pop	{r3, r4, r5, pc}
 8006c92:	0799      	lsls	r1, r3, #30
 8006c94:	bf58      	it	pl
 8006c96:	6962      	ldrpl	r2, [r4, #20]
 8006c98:	60a2      	str	r2, [r4, #8]
 8006c9a:	e7f4      	b.n	8006c86 <__swsetup_r+0x8e>
 8006c9c:	2000      	movs	r0, #0
 8006c9e:	e7f7      	b.n	8006c90 <__swsetup_r+0x98>
 8006ca0:	20000018 	.word	0x20000018

08006ca4 <__swhatbuf_r>:
 8006ca4:	b570      	push	{r4, r5, r6, lr}
 8006ca6:	460c      	mov	r4, r1
 8006ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cac:	2900      	cmp	r1, #0
 8006cae:	b096      	sub	sp, #88	@ 0x58
 8006cb0:	4615      	mov	r5, r2
 8006cb2:	461e      	mov	r6, r3
 8006cb4:	da0d      	bge.n	8006cd2 <__swhatbuf_r+0x2e>
 8006cb6:	89a3      	ldrh	r3, [r4, #12]
 8006cb8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006cbc:	f04f 0100 	mov.w	r1, #0
 8006cc0:	bf14      	ite	ne
 8006cc2:	2340      	movne	r3, #64	@ 0x40
 8006cc4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006cc8:	2000      	movs	r0, #0
 8006cca:	6031      	str	r1, [r6, #0]
 8006ccc:	602b      	str	r3, [r5, #0]
 8006cce:	b016      	add	sp, #88	@ 0x58
 8006cd0:	bd70      	pop	{r4, r5, r6, pc}
 8006cd2:	466a      	mov	r2, sp
 8006cd4:	f000 f848 	bl	8006d68 <_fstat_r>
 8006cd8:	2800      	cmp	r0, #0
 8006cda:	dbec      	blt.n	8006cb6 <__swhatbuf_r+0x12>
 8006cdc:	9901      	ldr	r1, [sp, #4]
 8006cde:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006ce2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006ce6:	4259      	negs	r1, r3
 8006ce8:	4159      	adcs	r1, r3
 8006cea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006cee:	e7eb      	b.n	8006cc8 <__swhatbuf_r+0x24>

08006cf0 <__smakebuf_r>:
 8006cf0:	898b      	ldrh	r3, [r1, #12]
 8006cf2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cf4:	079d      	lsls	r5, r3, #30
 8006cf6:	4606      	mov	r6, r0
 8006cf8:	460c      	mov	r4, r1
 8006cfa:	d507      	bpl.n	8006d0c <__smakebuf_r+0x1c>
 8006cfc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006d00:	6023      	str	r3, [r4, #0]
 8006d02:	6123      	str	r3, [r4, #16]
 8006d04:	2301      	movs	r3, #1
 8006d06:	6163      	str	r3, [r4, #20]
 8006d08:	b003      	add	sp, #12
 8006d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d0c:	ab01      	add	r3, sp, #4
 8006d0e:	466a      	mov	r2, sp
 8006d10:	f7ff ffc8 	bl	8006ca4 <__swhatbuf_r>
 8006d14:	9f00      	ldr	r7, [sp, #0]
 8006d16:	4605      	mov	r5, r0
 8006d18:	4639      	mov	r1, r7
 8006d1a:	4630      	mov	r0, r6
 8006d1c:	f7ff f900 	bl	8005f20 <_malloc_r>
 8006d20:	b948      	cbnz	r0, 8006d36 <__smakebuf_r+0x46>
 8006d22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d26:	059a      	lsls	r2, r3, #22
 8006d28:	d4ee      	bmi.n	8006d08 <__smakebuf_r+0x18>
 8006d2a:	f023 0303 	bic.w	r3, r3, #3
 8006d2e:	f043 0302 	orr.w	r3, r3, #2
 8006d32:	81a3      	strh	r3, [r4, #12]
 8006d34:	e7e2      	b.n	8006cfc <__smakebuf_r+0xc>
 8006d36:	89a3      	ldrh	r3, [r4, #12]
 8006d38:	6020      	str	r0, [r4, #0]
 8006d3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d3e:	81a3      	strh	r3, [r4, #12]
 8006d40:	9b01      	ldr	r3, [sp, #4]
 8006d42:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006d46:	b15b      	cbz	r3, 8006d60 <__smakebuf_r+0x70>
 8006d48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d4c:	4630      	mov	r0, r6
 8006d4e:	f000 f81d 	bl	8006d8c <_isatty_r>
 8006d52:	b128      	cbz	r0, 8006d60 <__smakebuf_r+0x70>
 8006d54:	89a3      	ldrh	r3, [r4, #12]
 8006d56:	f023 0303 	bic.w	r3, r3, #3
 8006d5a:	f043 0301 	orr.w	r3, r3, #1
 8006d5e:	81a3      	strh	r3, [r4, #12]
 8006d60:	89a3      	ldrh	r3, [r4, #12]
 8006d62:	431d      	orrs	r5, r3
 8006d64:	81a5      	strh	r5, [r4, #12]
 8006d66:	e7cf      	b.n	8006d08 <__smakebuf_r+0x18>

08006d68 <_fstat_r>:
 8006d68:	b538      	push	{r3, r4, r5, lr}
 8006d6a:	4d07      	ldr	r5, [pc, #28]	@ (8006d88 <_fstat_r+0x20>)
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	4604      	mov	r4, r0
 8006d70:	4608      	mov	r0, r1
 8006d72:	4611      	mov	r1, r2
 8006d74:	602b      	str	r3, [r5, #0]
 8006d76:	f7fa f98c 	bl	8001092 <_fstat>
 8006d7a:	1c43      	adds	r3, r0, #1
 8006d7c:	d102      	bne.n	8006d84 <_fstat_r+0x1c>
 8006d7e:	682b      	ldr	r3, [r5, #0]
 8006d80:	b103      	cbz	r3, 8006d84 <_fstat_r+0x1c>
 8006d82:	6023      	str	r3, [r4, #0]
 8006d84:	bd38      	pop	{r3, r4, r5, pc}
 8006d86:	bf00      	nop
 8006d88:	200006a4 	.word	0x200006a4

08006d8c <_isatty_r>:
 8006d8c:	b538      	push	{r3, r4, r5, lr}
 8006d8e:	4d06      	ldr	r5, [pc, #24]	@ (8006da8 <_isatty_r+0x1c>)
 8006d90:	2300      	movs	r3, #0
 8006d92:	4604      	mov	r4, r0
 8006d94:	4608      	mov	r0, r1
 8006d96:	602b      	str	r3, [r5, #0]
 8006d98:	f7fa f98b 	bl	80010b2 <_isatty>
 8006d9c:	1c43      	adds	r3, r0, #1
 8006d9e:	d102      	bne.n	8006da6 <_isatty_r+0x1a>
 8006da0:	682b      	ldr	r3, [r5, #0]
 8006da2:	b103      	cbz	r3, 8006da6 <_isatty_r+0x1a>
 8006da4:	6023      	str	r3, [r4, #0]
 8006da6:	bd38      	pop	{r3, r4, r5, pc}
 8006da8:	200006a4 	.word	0x200006a4

08006dac <_init>:
 8006dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dae:	bf00      	nop
 8006db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006db2:	bc08      	pop	{r3}
 8006db4:	469e      	mov	lr, r3
 8006db6:	4770      	bx	lr

08006db8 <_fini>:
 8006db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dba:	bf00      	nop
 8006dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dbe:	bc08      	pop	{r3}
 8006dc0:	469e      	mov	lr, r3
 8006dc2:	4770      	bx	lr
